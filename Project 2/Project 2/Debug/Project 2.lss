
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800224  00800224  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa0  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000709  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000139  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000227d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_20>
  54:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	fc 00       	.word	0x00fc	; ????
  6a:	50 01       	movw	r10, r0
  6c:	46 01       	movw	r8, r12
  6e:	50 01       	movw	r10, r0
  70:	4b 01       	movw	r8, r22
  72:	50 01       	movw	r10, r0
  74:	50 01       	movw	r10, r0
  76:	50 01       	movw	r10, r0
  78:	50 01       	movw	r10, r0
  7a:	50 01       	movw	r10, r0
  7c:	50 01       	movw	r10, r0
  7e:	2c 01       	movw	r4, r24
  80:	0e 01       	movw	r0, r28
  82:	15 01       	movw	r2, r10
  84:	50 01       	movw	r10, r0
  86:	1c 01       	movw	r2, r24
  88:	50 01       	movw	r10, r0
  8a:	50 01       	movw	r10, r0
  8c:	fc 00       	.word	0x00fc	; ????
  8e:	23 01       	movw	r4, r6
  90:	50 01       	movw	r10, r0
  92:	fc 00       	.word	0x00fc	; ????
  94:	50 01       	movw	r10, r0
  96:	50 01       	movw	r10, r0
  98:	50 01       	movw	r10, r0
  9a:	50 01       	movw	r10, r0
  9c:	50 01       	movw	r10, r0
  9e:	50 01       	movw	r10, r0
  a0:	50 01       	movw	r10, r0
  a2:	50 01       	movw	r10, r0
  a4:	50 01       	movw	r10, r0
  a6:	50 01       	movw	r10, r0
  a8:	fc 00       	.word	0x00fc	; ????
  aa:	50 01       	movw	r10, r0
  ac:	46 01       	movw	r8, r12
  ae:	50 01       	movw	r10, r0
  b0:	4b 01       	movw	r8, r22
  b2:	50 01       	movw	r10, r0
  b4:	50 01       	movw	r10, r0
  b6:	50 01       	movw	r10, r0
  b8:	50 01       	movw	r10, r0
  ba:	50 01       	movw	r10, r0
  bc:	50 01       	movw	r10, r0
  be:	2c 01       	movw	r4, r24
  c0:	0e 01       	movw	r0, r28
  c2:	15 01       	movw	r2, r10
  c4:	50 01       	movw	r10, r0
  c6:	1c 01       	movw	r2, r24
  c8:	50 01       	movw	r10, r0
  ca:	50 01       	movw	r10, r0
  cc:	fc 00       	.word	0x00fc	; ????
  ce:	23 01       	movw	r4, r6
  d0:	50 01       	movw	r10, r0
  d2:	fc 00       	.word	0x00fc	; ????

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e2 e9       	ldi	r30, 0x92	; 146
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a4 32       	cpi	r26, 0x24	; 36
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	a4 e2       	ldi	r26, 0x24	; 36
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a0 36       	cpi	r26, 0x60	; 96
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}*/
	}
	return 1;
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	e8 e2       	ldi	r30, 0x28	; 40
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e8 5d       	subi	r30, 0xD8	; 216
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
	//int adc_mV;
	//double temp;
	//double OC;
	char ch;  /* character variable for received character*/
	//char data[50];
	init_ports();
 1c6:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1ca:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1ce:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1d2:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1d6:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1da:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1de:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1e0:	c0 ec       	ldi	r28, 0xC0	; 192
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1e4:	06 ec       	ldi	r16, 0xC6	; 198
 1e6:	10 e0       	ldi	r17, 0x00	; 0
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 1e8:	ee 24       	eor	r14, r14
 1ea:	e3 94       	inc	r14
 1ec:	f1 2c       	mov	r15, r1
				sendmsg(msg2);
				break;
				
				case 'N':
				case 'n':
				input = LDR;
 1ee:	cc 24       	eor	r12, r12
 1f0:	c3 94       	inc	r12
			ch = UDR0;    /*get character sent from PC*/
			switch (ch) { //character input
				
				case 'M':
				case 'm':
				input = Temp;
 1f2:	68 94       	set
 1f4:	dd 24       	eor	r13, r13
 1f6:	d1 f8       	bld	r13, 1

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f8:	88 81       	ld	r24, Y
 1fa:	88 23       	and	r24, r24
 1fc:	ec f7       	brge	.-6      	; 0x1f8 <main+0x32>
		{
			ch = UDR0;    /*get character sent from PC*/
 1fe:	d8 01       	movw	r26, r16
 200:	ec 91       	ld	r30, X
			switch (ch) { //character input
 202:	8e 2f       	mov	r24, r30
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	e1 54       	subi	r30, 0x41	; 65
 20a:	f1 09       	sbc	r31, r1
 20c:	e6 33       	cpi	r30, 0x36	; 54
 20e:	f1 05       	cpc	r31, r1
 210:	08 f0       	brcs	.+2      	; 0x214 <main+0x4e>
 212:	46 c0       	rjmp	.+140    	; 0x2a0 <main+0xda>
 214:	ec 5c       	subi	r30, 0xCC	; 204
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	0c 94 c1 01 	jmp	0x382	; 0x382 <__tablejump2__>
				
				case 'M':
				case 'm':
				input = Temp;
 21c:	d0 92 5b 02 	sts	0x025B, r13	; 0x80025b <input>
				sendmsg(msg2);
 220:	82 ee       	ldi	r24, 0xE2	; 226
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 228:	e7 cf       	rjmp	.-50     	; 0x1f8 <main+0x32>
				
				case 'N':
				case 'n':
				input = LDR;
 22a:	c0 92 5b 02 	sts	0x025B, r12	; 0x80025b <input>
				sendmsg(msg3);
 22e:	84 ec       	ldi	r24, 0xC4	; 196
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 236:	e0 cf       	rjmp	.-64     	; 0x1f8 <main+0x32>
				
				case 'P':
				case 'p':
				input = Volt;
 238:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <input>
				sendmsg(msg4);
 23c:	8c e9       	ldi	r24, 0x9C	; 156
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 244:	d9 cf       	rjmp	.-78     	; 0x1f8 <main+0x32>
				
				case 'T':
				case 't':
				if (input == Temp) {
 246:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <input>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	a9 f2       	breq	.-86     	; 0x1f8 <main+0x32>
					//temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					//sprintf(data,"LM35 Temperature = %f deg C",temp);
					//sendmsg(data);
				} else {
					//Give warning
					sendmsg(msg5);
 24e:	86 e5       	ldi	r24, 0x56	; 86
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 256:	d0 cf       	rjmp	.-96     	; 0x1f8 <main+0x32>
				}
				break;
				
				case 'L':
				case 'l':
				if (input == LDR) {
 258:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <input>
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	89 f4       	brne	.+34     	; 0x282 <main+0xbc>
						if(adc_reading>512)
 260:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <adc_reading>
 264:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <adc_reading+0x1>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	92 40       	sbci	r25, 0x02	; 2
 26c:	28 f0       	brcs	.+10     	; 0x278 <main+0xb2>
						{
							sendmsg(msg7);
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 276:	c0 cf       	rjmp	.-128    	; 0x1f8 <main+0x32>
						}
						else
						{
							sendmsg(msg8);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 280:	bb cf       	rjmp	.-138    	; 0x1f8 <main+0x32>
						}
					} else {
					//Give warning
					sendmsg(msg6);
 282:	88 e1       	ldi	r24, 0x18	; 24
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 28a:	b6 cf       	rjmp	.-148    	; 0x1f8 <main+0x32>
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 28c:	f0 92 25 02 	sts	0x0225, r15	; 0x800225 <__data_end+0x1>
 290:	e0 92 24 02 	sts	0x0224, r14	; 0x800224 <__data_end>
				break;
 294:	b1 cf       	rjmp	.-158    	; 0x1f8 <main+0x32>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 296:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <__data_end+0x1>
 29a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
				break;
 29e:	ac cf       	rjmp	.-168    	; 0x1f8 <main+0x32>
				//sprintf(data, "OCR2A = %f", OC);
				//sendmsg(data);
				break;
				}
				default:
				sendmsg(msg1); /*send default message*/
 2a0:	8f e0       	ldi	r24, 0x0F	; 15
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2a8:	a7 cf       	rjmp	.-178    	; 0x1f8 <main+0x32>

000002aa <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 2ba:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <sndcntr>
 2be:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <qcntr>
 2c2:	8e 17       	cp	r24, r30
 2c4:	51 f0       	breq	.+20     	; 0x2da <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	8e 0f       	add	r24, r30
 2ca:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <sndcntr>
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e8 5d       	subi	r30, 0xD8	; 216
 2d2:	fd 4f       	sbci	r31, 0xFD	; 253
 2d4:	80 81       	ld	r24, Z
 2d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	
	//adc_reading = ADC;
	new_adc_data = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <new_adc_data+0x1>
 300:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <new_adc_data>
	switch(input) {
 304:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <input>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	81 f0       	breq	.+32     	; 0x32c <__vector_21+0x42>
 30c:	18 f0       	brcs	.+6      	; 0x314 <__vector_21+0x2a>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	c9 f0       	breq	.+50     	; 0x344 <__vector_21+0x5a>
 312:	24 c0       	rjmp	.+72     	; 0x35c <__vector_21+0x72>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 314:	80 e8       	ldi	r24, 0x80	; 128
 316:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 31a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 31e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 322:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <adc_reading+0x1>
 326:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <adc_reading>
		break;
 32a:	23 c0       	rjmp	.+70     	; 0x372 <__vector_21+0x88>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 32c:	81 e8       	ldi	r24, 0x81	; 129
 32e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 332:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 336:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 33a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <adc_reading+0x1>
 33e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <adc_reading>
		break;
 342:	17 c0       	rjmp	.+46     	; 0x372 <__vector_21+0x88>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 344:	82 e8       	ldi	r24, 0x82	; 130
 346:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 34a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 34e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 352:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <adc_reading+0x1>
 356:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <adc_reading>
		break;
 35a:	0b c0       	rjmp	.+22     	; 0x372 <__vector_21+0x88>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 35c:	82 e8       	ldi	r24, 0x82	; 130
 35e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 362:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 366:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 36a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <adc_reading+0x1>
 36e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <adc_reading>
	}
	TIFR0 = TIFR0 & ~(1<<0); //clears Counter0 overflow
 372:	a8 98       	cbi	0x15, 0	; 21
}
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__tablejump2__>:
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	05 90       	lpm	r0, Z+
 388:	f4 91       	lpm	r31, Z
 38a:	e0 2d       	mov	r30, r0
 38c:	09 94       	ijmp

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
