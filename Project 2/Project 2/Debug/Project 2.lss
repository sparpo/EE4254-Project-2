
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  0080021a  0080021a  00000e50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8e  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000495  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  00002c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002e15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_20>
  54:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	8f 01       	movw	r16, r30
  6a:	f7 01       	movw	r30, r14
  6c:	d2 01       	movw	r26, r4
  6e:	f7 01       	movw	r30, r14
  70:	d7 01       	movw	r26, r14
  72:	f7 01       	movw	r30, r14
  74:	f7 01       	movw	r30, r14
  76:	f7 01       	movw	r30, r14
  78:	f7 01       	movw	r30, r14
  7a:	f7 01       	movw	r30, r14
  7c:	f7 01       	movw	r30, r14
  7e:	75 01       	movw	r14, r10
  80:	32 01       	movw	r6, r4
  82:	3a 01       	movw	r6, r20
  84:	f7 01       	movw	r30, r14
  86:	42 01       	movw	r8, r4
  88:	f7 01       	movw	r30, r14
  8a:	f7 01       	movw	r30, r14
  8c:	dc 01       	movw	r26, r24
  8e:	49 01       	movw	r8, r18
  90:	f7 01       	movw	r30, r14
  92:	a5 01       	movw	r20, r10
  94:	f7 01       	movw	r30, r14
  96:	f7 01       	movw	r30, r14
  98:	f7 01       	movw	r30, r14
  9a:	f7 01       	movw	r30, r14
  9c:	f7 01       	movw	r30, r14
  9e:	f7 01       	movw	r30, r14
  a0:	f7 01       	movw	r30, r14
  a2:	f7 01       	movw	r30, r14
  a4:	f7 01       	movw	r30, r14
  a6:	f7 01       	movw	r30, r14
  a8:	8f 01       	movw	r16, r30
  aa:	f7 01       	movw	r30, r14
  ac:	d2 01       	movw	r26, r4
  ae:	f7 01       	movw	r30, r14
  b0:	d7 01       	movw	r26, r14
  b2:	f7 01       	movw	r30, r14
  b4:	f7 01       	movw	r30, r14
  b6:	f7 01       	movw	r30, r14
  b8:	f7 01       	movw	r30, r14
  ba:	f7 01       	movw	r30, r14
  bc:	f7 01       	movw	r30, r14
  be:	75 01       	movw	r14, r10
  c0:	32 01       	movw	r6, r4
  c2:	3a 01       	movw	r6, r20
  c4:	f7 01       	movw	r30, r14
  c6:	42 01       	movw	r8, r4
  c8:	f7 01       	movw	r30, r14
  ca:	f7 01       	movw	r30, r14
  cc:	dc 01       	movw	r26, r24
  ce:	49 01       	movw	r8, r18
  d0:	f7 01       	movw	r30, r14
  d2:	a5 01       	movw	r20, r10

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e2 ea       	ldi	r30, 0xA2	; 162
  e8:	fc e0       	ldi	r31, 0x0C	; 12
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	aa 31       	cpi	r26, 0x1A	; 26
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	aa e1       	ldi	r26, 0x1A	; 26
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a8 38       	cpi	r26, 0x88	; 136
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
	}
	return 1;
	
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  //baud rate = 9600
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits 
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	ee e1       	ldi	r30, 0x1E	; 30
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e2 5e       	subi	r30, 0xE2	; 226
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
enum active{pot,lit,temper,OCR,ADC_val} on; // potentiometer measuring active,LDR measuring active,LM35 sensor active, OC2RA, ADC value

unsigned int enContDisplay = 0; //enable continuous display

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	6e 97       	sbiw	r28, 0x1e	; 30
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	int adc_mV;
	double temp;
	double OC;
	char ch;  /* character variable for received character*/
	char data[30];
	init_ports();
 1da:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1f2:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f4:	00 ec       	ldi	r16, 0xC0	; 192
 1f6:	10 e0       	ldi	r17, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f6 ec       	ldi	r31, 0xC6	; 198
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
				
				case 'S':
				case 's':
				{
					OC = OCR2A;
					sprintf(data, "OCR2A = %f", OC);
 202:	0f 2e       	mov	r0, r31
 204:	ff e0       	ldi	r31, 0x0F	; 15
 206:	af 2e       	mov	r10, r31
 208:	f2 e0       	ldi	r31, 0x02	; 2
 20a:	bf 2e       	mov	r11, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	6c 01       	movw	r12, r24
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 214:	88 24       	eor	r8, r8
 216:	83 94       	inc	r8
 218:	91 2c       	mov	r9, r1
				
				case 'V':
				case 'v':
				{
					adc_mV = (adc_reading/1000)*5000;
					sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 21a:	0f 2e       	mov	r0, r31
 21c:	f8 e8       	ldi	r31, 0x88	; 136
 21e:	6f 2e       	mov	r6, r31
 220:	f3 e1       	ldi	r31, 0x13	; 19
 222:	7f 2e       	mov	r7, r31
 224:	f0 2d       	mov	r31, r0
 226:	0f 2e       	mov	r0, r31
 228:	fd ef       	ldi	r31, 0xFD	; 253
 22a:	4f 2e       	mov	r4, r31
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	5f 2e       	mov	r5, r31
 230:	f0 2d       	mov	r31, r0
				break;
				
				case 'A':
				case 'a':
				{
					sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 232:	0f 2e       	mov	r0, r31
 234:	fe ee       	ldi	r31, 0xEE	; 238
 236:	2f 2e       	mov	r2, r31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	3f 2e       	mov	r3, r31
 23c:	f0 2d       	mov	r31, r0

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 23e:	d8 01       	movw	r26, r16
 240:	8c 91       	ld	r24, X
 242:	88 23       	and	r24, r24
 244:	e4 f7       	brge	.-8      	; 0x23e <main+0x78>
		{
			ch = UDR0;    /*get character sent from PC*/
 246:	d7 01       	movw	r26, r14
 248:	ec 91       	ld	r30, X
			switch (ch) { //character input
 24a:	8e 2f       	mov	r24, r30
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	e1 54       	subi	r30, 0x41	; 65
 252:	f1 09       	sbc	r31, r1
 254:	e6 33       	cpi	r30, 0x36	; 54
 256:	f1 05       	cpc	r31, r1
 258:	08 f0       	brcs	.+2      	; 0x25c <main+0x96>
 25a:	c9 c0       	rjmp	.+402    	; 0x3ee <main+0x228>
 25c:	ec 5c       	subi	r30, 0xCC	; 204
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__tablejump2__>
				
				case 'M':
				case 'm':
					input = Temp;
 264:	b2 e0       	ldi	r27, 0x02	; 2
 266:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <input>
					sendmsg(msg2);
 26a:	8e e9       	ldi	r24, 0x9E	; 158
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 272:	e5 cf       	rjmp	.-54     	; 0x23e <main+0x78>
				
				case 'N':
				case 'n':
					input = LDR;
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	e0 93 83 02 	sts	0x0283, r30	; 0x800283 <input>
					sendmsg(msg3);
 27a:	8e e8       	ldi	r24, 0x8E	; 142
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 282:	dd cf       	rjmp	.-70     	; 0x23e <main+0x78>
				
				case 'P':
				case 'p':
					input = Volt;
 284:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <input>
					sendmsg(msg4);
 288:	84 e7       	ldi	r24, 0x74	; 116
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 290:	d6 cf       	rjmp	.-84     	; 0x23e <main+0x78>
				
				case 'T':
				case 't':
					if (input == Temp) {
 292:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <input>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	19 f5       	brne	.+70     	; 0x2e0 <main+0x11a>
						temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
						sprintf(data,"LM35 Temperature = %f deg C",temp);
 29a:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <adc_reading>
 29e:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <adc_reading+0x1>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 55 02 	call	0x4aa	; 0x4aa <__floatunsisf>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	0e 94 92 02 	call	0x524	; 0x524 <__mulsf3>
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	7f 93       	push	r23
 2bc:	6f 93       	push	r22
 2be:	82 ed       	ldi	r24, 0xD2	; 210
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	df 92       	push	r13
 2c8:	cf 92       	push	r12
 2ca:	0e 94 65 03 	call	0x6ca	; 0x6ca <sprintf>
						sendmsg(data);
 2ce:	c6 01       	movw	r24, r12
 2d0:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	af cf       	rjmp	.-162    	; 0x23e <main+0x78>
					} else {
						//Give warning
						sendmsg(msg5);
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2e8:	aa cf       	rjmp	.-172    	; 0x23e <main+0x78>
					}
				break;
				
				case 'L':
				case 'l':
					if (input == LDR) {
 2ea:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <input>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	89 f4       	brne	.+34     	; 0x314 <main+0x14e>
							if(adc_reading>512)
 2f2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <adc_reading>
 2f6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <adc_reading+0x1>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	92 40       	sbci	r25, 0x02	; 2
 2fe:	28 f0       	brcs	.+10     	; 0x30a <main+0x144>
							{
								sendmsg(msg7);
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 308:	9a cf       	rjmp	.-204    	; 0x23e <main+0x78>
							}
							else
							{
								sendmsg(msg8);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 312:	95 cf       	rjmp	.-214    	; 0x23e <main+0x78>
							}
					} else {
						//Give warning
						sendmsg(msg6);
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 31c:	90 cf       	rjmp	.-224    	; 0x23e <main+0x78>
				break;
				
				case 'A':
				case 'a':
				{
					sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 31e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <adc_reading+0x1>
 322:	8f 93       	push	r24
 324:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <adc_reading>
 328:	8f 93       	push	r24
 32a:	3f 92       	push	r3
 32c:	2f 92       	push	r2
 32e:	df 92       	push	r13
 330:	cf 92       	push	r12
 332:	0e 94 65 03 	call	0x6ca	; 0x6ca <sprintf>
					sendmsg(data);
 336:	c6 01       	movw	r24, r12
 338:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	7a cf       	rjmp	.-268    	; 0x23e <main+0x78>
				
				case 'V':
				case 'v':
				{
					adc_mV = (adc_reading/1000)*5000;
					sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 34a:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <adc_reading>
 34e:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <adc_reading+0x1>
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	36 95       	lsr	r19
 358:	27 95       	ror	r18
 35a:	36 95       	lsr	r19
 35c:	27 95       	ror	r18
 35e:	a5 ec       	ldi	r26, 0xC5	; 197
 360:	b0 e2       	ldi	r27, 0x20	; 32
 362:	0e 94 56 03 	call	0x6ac	; 0x6ac <__umulhisi3>
 366:	92 95       	swap	r25
 368:	82 95       	swap	r24
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	89 27       	eor	r24, r25
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	89 27       	eor	r24, r25
 372:	86 9d       	mul	r24, r6
 374:	90 01       	movw	r18, r0
 376:	87 9d       	mul	r24, r7
 378:	30 0d       	add	r19, r0
 37a:	96 9d       	mul	r25, r6
 37c:	30 0d       	add	r19, r0
 37e:	11 24       	eor	r1, r1
 380:	3f 93       	push	r19
 382:	2f 93       	push	r18
 384:	5f 92       	push	r5
 386:	4f 92       	push	r4
 388:	df 92       	push	r13
 38a:	cf 92       	push	r12
 38c:	0e 94 65 03 	call	0x6ca	; 0x6ca <sprintf>
					sendmsg(data);
 390:	c6 01       	movw	r24, r12
 392:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				
				break;
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	4d cf       	rjmp	.-358    	; 0x23e <main+0x78>
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 3a4:	90 92 1b 02 	sts	0x021B, r9	; 0x80021b <__data_end+0x1>
 3a8:	80 92 1a 02 	sts	0x021A, r8	; 0x80021a <__data_end>
				break;
 3ac:	48 cf       	rjmp	.-368    	; 0x23e <main+0x78>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 3ae:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x1>
 3b2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
				break;
 3b6:	43 cf       	rjmp	.-378    	; 0x23e <main+0x78>
				
				case 'S':
				case 's':
				{
					OC = OCR2A;
 3b8:	a3 eb       	ldi	r26, 0xB3	; 179
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	6c 91       	ld	r22, X
					sprintf(data, "OCR2A = %f", OC);
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 55 02 	call	0x4aa	; 0x4aa <__floatunsisf>
 3c8:	9f 93       	push	r25
 3ca:	8f 93       	push	r24
 3cc:	7f 93       	push	r23
 3ce:	6f 93       	push	r22
 3d0:	bf 92       	push	r11
 3d2:	af 92       	push	r10
 3d4:	df 92       	push	r13
 3d6:	cf 92       	push	r12
 3d8:	0e 94 65 03 	call	0x6ca	; 0x6ca <sprintf>
					sendmsg(data);
 3dc:	c6 01       	movw	r24, r12
 3de:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	28 cf       	rjmp	.-432    	; 0x23e <main+0x78>
				}
				default:
				sendmsg(msg1); /*send default message*/
 3ee:	8d eb       	ldi	r24, 0xBD	; 189
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 3f6:	23 cf       	rjmp	.-442    	; 0x23e <main+0x78>

000003f8 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 408:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <sndcntr>
 40c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <qcntr>
 410:	8e 17       	cp	r24, r30
 412:	59 f0       	breq	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		UDR0 = queue[sndcntr++];
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8e 0f       	add	r24, r30
 418:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <sndcntr>
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	e2 5e       	subi	r30, 0xE2	; 226
 420:	fd 4f       	sbci	r31, 0xFD	; 253
 422:	80 81       	ld	r24, Z
 424:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 428:	03 c0       	rjmp	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	else
		UCSR0B	= (1<<RXEN0) | (1<<TXEN0) ;  /* Turn off UDRIE0 */
 42a:	88 e1       	ldi	r24, 0x18	; 24
 42c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
}
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	8f 91       	pop	r24
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
	
	//adc_reading = ADC;
	new_adc_data = 1;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <new_adc_data+0x1>
 456:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <new_adc_data>
	adc_reading = ADC;
 45a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 45e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 462:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <adc_reading+0x1>
 466:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <adc_reading>
	switch(input) {
 46a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <input>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	41 f0       	breq	.+16     	; 0x482 <__vector_21+0x42>
 472:	18 f0       	brcs	.+6      	; 0x47a <__vector_21+0x3a>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	49 f0       	breq	.+18     	; 0x48a <__vector_21+0x4a>
 478:	0c c0       	rjmp	.+24     	; 0x492 <__vector_21+0x52>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 47a:	80 e8       	ldi	r24, 0x80	; 128
 47c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 480:	0b c0       	rjmp	.+22     	; 0x498 <__vector_21+0x58>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 482:	81 e8       	ldi	r24, 0x81	; 129
 484:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 488:	07 c0       	rjmp	.+14     	; 0x498 <__vector_21+0x58>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 48a:	82 e8       	ldi	r24, 0x82	; 130
 48c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 490:	03 c0       	rjmp	.+6      	; 0x498 <__vector_21+0x58>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 492:	82 e8       	ldi	r24, 0x82	; 130
 494:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	}
	TIFR0 = (1<<0); //clears Counter0 overflow
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	85 bb       	out	0x15, r24	; 21
}
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__floatunsisf>:
 4aa:	e8 94       	clt
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <__floatsisf+0x12>

000004ae <__floatsisf>:
 4ae:	97 fb       	bst	r25, 7
 4b0:	3e f4       	brtc	.+14     	; 0x4c0 <__floatsisf+0x12>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	99 23       	and	r25, r25
 4c2:	a9 f0       	breq	.+42     	; 0x4ee <__floatsisf+0x40>
 4c4:	f9 2f       	mov	r31, r25
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	bb 27       	eor	r27, r27
 4ca:	93 95       	inc	r25
 4cc:	f6 95       	lsr	r31
 4ce:	87 95       	ror	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f1 11       	cpse	r31, r1
 4d8:	f8 cf       	rjmp	.-16     	; 0x4ca <__floatsisf+0x1c>
 4da:	fa f4       	brpl	.+62     	; 0x51a <__floatsisf+0x6c>
 4dc:	bb 0f       	add	r27, r27
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__floatsisf+0x36>
 4e0:	60 ff       	sbrs	r22, 0
 4e2:	1b c0       	rjmp	.+54     	; 0x51a <__floatsisf+0x6c>
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <__floatsisf+0x6c>
 4ee:	88 23       	and	r24, r24
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <__floatsisf+0x48>
 4f2:	96 e9       	ldi	r25, 0x96	; 150
 4f4:	11 c0       	rjmp	.+34     	; 0x518 <__floatsisf+0x6a>
 4f6:	77 23       	and	r23, r23
 4f8:	21 f0       	breq	.+8      	; 0x502 <__floatsisf+0x54>
 4fa:	9e e8       	ldi	r25, 0x8E	; 142
 4fc:	87 2f       	mov	r24, r23
 4fe:	76 2f       	mov	r23, r22
 500:	05 c0       	rjmp	.+10     	; 0x50c <__floatsisf+0x5e>
 502:	66 23       	and	r22, r22
 504:	71 f0       	breq	.+28     	; 0x522 <__floatsisf+0x74>
 506:	96 e8       	ldi	r25, 0x86	; 134
 508:	86 2f       	mov	r24, r22
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	2a f0       	brmi	.+10     	; 0x51a <__floatsisf+0x6c>
 510:	9a 95       	dec	r25
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	da f7       	brpl	.-10     	; 0x510 <__floatsisf+0x62>
 51a:	88 0f       	add	r24, r24
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	97 f9       	bld	r25, 7
 522:	08 95       	ret

00000524 <__mulsf3>:
 524:	0e 94 a5 02 	call	0x54a	; 0x54a <__mulsf3x>
 528:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_round>
 52c:	0e 94 08 03 	call	0x610	; 0x610 <__fp_pscA>
 530:	38 f0       	brcs	.+14     	; 0x540 <__mulsf3+0x1c>
 532:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_pscB>
 536:	20 f0       	brcs	.+8      	; 0x540 <__mulsf3+0x1c>
 538:	95 23       	and	r25, r21
 53a:	11 f0       	breq	.+4      	; 0x540 <__mulsf3+0x1c>
 53c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_inf>
 540:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_nan>
 544:	11 24       	eor	r1, r1
 546:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_szero>

0000054a <__mulsf3x>:
 54a:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_split3>
 54e:	70 f3       	brcs	.-36     	; 0x52c <__mulsf3+0x8>

00000550 <__mulsf3_pse>:
 550:	95 9f       	mul	r25, r21
 552:	c1 f3       	breq	.-16     	; 0x544 <__mulsf3+0x20>
 554:	95 0f       	add	r25, r21
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	55 1f       	adc	r21, r21
 55a:	62 9f       	mul	r22, r18
 55c:	f0 01       	movw	r30, r0
 55e:	72 9f       	mul	r23, r18
 560:	bb 27       	eor	r27, r27
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	63 9f       	mul	r22, r19
 568:	aa 27       	eor	r26, r26
 56a:	f0 0d       	add	r31, r0
 56c:	b1 1d       	adc	r27, r1
 56e:	aa 1f       	adc	r26, r26
 570:	64 9f       	mul	r22, r20
 572:	66 27       	eor	r22, r22
 574:	b0 0d       	add	r27, r0
 576:	a1 1d       	adc	r26, r1
 578:	66 1f       	adc	r22, r22
 57a:	82 9f       	mul	r24, r18
 57c:	22 27       	eor	r18, r18
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	73 9f       	mul	r23, r19
 586:	b0 0d       	add	r27, r0
 588:	a1 1d       	adc	r26, r1
 58a:	62 1f       	adc	r22, r18
 58c:	83 9f       	mul	r24, r19
 58e:	a0 0d       	add	r26, r0
 590:	61 1d       	adc	r22, r1
 592:	22 1f       	adc	r18, r18
 594:	74 9f       	mul	r23, r20
 596:	33 27       	eor	r19, r19
 598:	a0 0d       	add	r26, r0
 59a:	61 1d       	adc	r22, r1
 59c:	23 1f       	adc	r18, r19
 59e:	84 9f       	mul	r24, r20
 5a0:	60 0d       	add	r22, r0
 5a2:	21 1d       	adc	r18, r1
 5a4:	82 2f       	mov	r24, r18
 5a6:	76 2f       	mov	r23, r22
 5a8:	6a 2f       	mov	r22, r26
 5aa:	11 24       	eor	r1, r1
 5ac:	9f 57       	subi	r25, 0x7F	; 127
 5ae:	50 40       	sbci	r21, 0x00	; 0
 5b0:	9a f0       	brmi	.+38     	; 0x5d8 <__mulsf3_pse+0x88>
 5b2:	f1 f0       	breq	.+60     	; 0x5f0 <__mulsf3_pse+0xa0>
 5b4:	88 23       	and	r24, r24
 5b6:	4a f0       	brmi	.+18     	; 0x5ca <__mulsf3_pse+0x7a>
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	bb 1f       	adc	r27, r27
 5be:	66 1f       	adc	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__mulsf3_pse+0x64>
 5ca:	9e 3f       	cpi	r25, 0xFE	; 254
 5cc:	51 05       	cpc	r21, r1
 5ce:	80 f0       	brcs	.+32     	; 0x5f0 <__mulsf3_pse+0xa0>
 5d0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_inf>
 5d4:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_szero>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	e4 f3       	brlt	.-8      	; 0x5d4 <__mulsf3_pse+0x84>
 5dc:	98 3e       	cpi	r25, 0xE8	; 232
 5de:	d4 f3       	brlt	.-12     	; 0x5d4 <__mulsf3_pse+0x84>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	e7 95       	ror	r30
 5ec:	9f 5f       	subi	r25, 0xFF	; 255
 5ee:	c1 f7       	brne	.-16     	; 0x5e0 <__mulsf3_pse+0x90>
 5f0:	fe 2b       	or	r31, r30
 5f2:	88 0f       	add	r24, r24
 5f4:	91 1d       	adc	r25, r1
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__fp_inf>:
 5fe:	97 f9       	bld	r25, 7
 600:	9f 67       	ori	r25, 0x7F	; 127
 602:	80 e8       	ldi	r24, 0x80	; 128
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	08 95       	ret

0000060a <__fp_nan>:
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	80 ec       	ldi	r24, 0xC0	; 192
 60e:	08 95       	ret

00000610 <__fp_pscA>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	16 16       	cp	r1, r22
 616:	17 06       	cpc	r1, r23
 618:	18 06       	cpc	r1, r24
 61a:	09 06       	cpc	r0, r25
 61c:	08 95       	ret

0000061e <__fp_pscB>:
 61e:	00 24       	eor	r0, r0
 620:	0a 94       	dec	r0
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	05 06       	cpc	r0, r21
 62a:	08 95       	ret

0000062c <__fp_round>:
 62c:	09 2e       	mov	r0, r25
 62e:	03 94       	inc	r0
 630:	00 0c       	add	r0, r0
 632:	11 f4       	brne	.+4      	; 0x638 <__fp_round+0xc>
 634:	88 23       	and	r24, r24
 636:	52 f0       	brmi	.+20     	; 0x64c <__fp_round+0x20>
 638:	bb 0f       	add	r27, r27
 63a:	40 f4       	brcc	.+16     	; 0x64c <__fp_round+0x20>
 63c:	bf 2b       	or	r27, r31
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0x18>
 640:	60 ff       	sbrs	r22, 0
 642:	04 c0       	rjmp	.+8      	; 0x64c <__fp_round+0x20>
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__fp_split3>:
 64e:	57 fd       	sbrc	r21, 7
 650:	90 58       	subi	r25, 0x80	; 128
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	59 f0       	breq	.+22     	; 0x66e <__fp_splitA+0x10>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	71 f0       	breq	.+28     	; 0x678 <__fp_splitA+0x1a>
 65c:	47 95       	ror	r20

0000065e <__fp_splitA>:
 65e:	88 0f       	add	r24, r24
 660:	97 fb       	bst	r25, 7
 662:	99 1f       	adc	r25, r25
 664:	61 f0       	breq	.+24     	; 0x67e <__fp_splitA+0x20>
 666:	9f 3f       	cpi	r25, 0xFF	; 255
 668:	79 f0       	breq	.+30     	; 0x688 <__fp_splitA+0x2a>
 66a:	87 95       	ror	r24
 66c:	08 95       	ret
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	55 1f       	adc	r21, r21
 676:	f2 cf       	rjmp	.-28     	; 0x65c <__fp_split3+0xe>
 678:	46 95       	lsr	r20
 67a:	f1 df       	rcall	.-30     	; 0x65e <__fp_splitA>
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__fp_splitA+0x30>
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	99 1f       	adc	r25, r25
 686:	f1 cf       	rjmp	.-30     	; 0x66a <__fp_splitA+0xc>
 688:	86 95       	lsr	r24
 68a:	71 05       	cpc	r23, r1
 68c:	61 05       	cpc	r22, r1
 68e:	08 94       	sec
 690:	08 95       	ret

00000692 <__fp_zero>:
 692:	e8 94       	clt

00000694 <__fp_szero>:
 694:	bb 27       	eor	r27, r27
 696:	66 27       	eor	r22, r22
 698:	77 27       	eor	r23, r23
 69a:	cb 01       	movw	r24, r22
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__tablejump2__>:
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	05 90       	lpm	r0, Z+
 6a6:	f4 91       	lpm	r31, Z
 6a8:	e0 2d       	mov	r30, r0
 6aa:	09 94       	ijmp

000006ac <__umulhisi3>:
 6ac:	a2 9f       	mul	r26, r18
 6ae:	b0 01       	movw	r22, r0
 6b0:	b3 9f       	mul	r27, r19
 6b2:	c0 01       	movw	r24, r0
 6b4:	a3 9f       	mul	r26, r19
 6b6:	70 0d       	add	r23, r0
 6b8:	81 1d       	adc	r24, r1
 6ba:	11 24       	eor	r1, r1
 6bc:	91 1d       	adc	r25, r1
 6be:	b2 9f       	mul	r27, r18
 6c0:	70 0d       	add	r23, r0
 6c2:	81 1d       	adc	r24, r1
 6c4:	11 24       	eor	r1, r1
 6c6:	91 1d       	adc	r25, r1
 6c8:	08 95       	ret

000006ca <sprintf>:
 6ca:	ae e0       	ldi	r26, 0x0E	; 14
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	eb e6       	ldi	r30, 0x6B	; 107
 6d0:	f3 e0       	ldi	r31, 0x03	; 3
 6d2:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__prologue_saves__+0x1c>
 6d6:	0d 89       	ldd	r16, Y+21	; 0x15
 6d8:	1e 89       	ldd	r17, Y+22	; 0x16
 6da:	86 e0       	ldi	r24, 0x06	; 6
 6dc:	8c 83       	std	Y+4, r24	; 0x04
 6de:	1a 83       	std	Y+2, r17	; 0x02
 6e0:	09 83       	std	Y+1, r16	; 0x01
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	9f e7       	ldi	r25, 0x7F	; 127
 6e6:	9e 83       	std	Y+6, r25	; 0x06
 6e8:	8d 83       	std	Y+5, r24	; 0x05
 6ea:	ae 01       	movw	r20, r28
 6ec:	47 5e       	subi	r20, 0xE7	; 231
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	6f 89       	ldd	r22, Y+23	; 0x17
 6f2:	78 8d       	ldd	r23, Y+24	; 0x18
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	0e 94 87 03 	call	0x70e	; 0x70e <vfprintf>
 6fc:	ef 81       	ldd	r30, Y+7	; 0x07
 6fe:	f8 85       	ldd	r31, Y+8	; 0x08
 700:	e0 0f       	add	r30, r16
 702:	f1 1f       	adc	r31, r17
 704:	10 82       	st	Z, r1
 706:	2e 96       	adiw	r28, 0x0e	; 14
 708:	e4 e0       	ldi	r30, 0x04	; 4
 70a:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__epilogue_restores__+0x1c>

0000070e <vfprintf>:
 70e:	ab e0       	ldi	r26, 0x0B	; 11
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	ed e8       	ldi	r30, 0x8D	; 141
 714:	f3 e0       	ldi	r31, 0x03	; 3
 716:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__prologue_saves__>
 71a:	6c 01       	movw	r12, r24
 71c:	7b 01       	movw	r14, r22
 71e:	8a 01       	movw	r16, r20
 720:	fc 01       	movw	r30, r24
 722:	17 82       	std	Z+7, r1	; 0x07
 724:	16 82       	std	Z+6, r1	; 0x06
 726:	83 81       	ldd	r24, Z+3	; 0x03
 728:	81 ff       	sbrs	r24, 1
 72a:	cc c1       	rjmp	.+920    	; 0xac4 <__stack+0x1c5>
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	3c 01       	movw	r6, r24
 732:	f6 01       	movw	r30, r12
 734:	93 81       	ldd	r25, Z+3	; 0x03
 736:	f7 01       	movw	r30, r14
 738:	93 fd       	sbrc	r25, 3
 73a:	85 91       	lpm	r24, Z+
 73c:	93 ff       	sbrs	r25, 3
 73e:	81 91       	ld	r24, Z+
 740:	7f 01       	movw	r14, r30
 742:	88 23       	and	r24, r24
 744:	09 f4       	brne	.+2      	; 0x748 <vfprintf+0x3a>
 746:	ba c1       	rjmp	.+884    	; 0xabc <__stack+0x1bd>
 748:	85 32       	cpi	r24, 0x25	; 37
 74a:	39 f4       	brne	.+14     	; 0x75a <vfprintf+0x4c>
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	7f 01       	movw	r14, r30
 756:	85 32       	cpi	r24, 0x25	; 37
 758:	29 f4       	brne	.+10     	; 0x764 <vfprintf+0x56>
 75a:	b6 01       	movw	r22, r12
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 762:	e7 cf       	rjmp	.-50     	; 0x732 <vfprintf+0x24>
 764:	91 2c       	mov	r9, r1
 766:	21 2c       	mov	r2, r1
 768:	31 2c       	mov	r3, r1
 76a:	ff e1       	ldi	r31, 0x1F	; 31
 76c:	f3 15       	cp	r31, r3
 76e:	d8 f0       	brcs	.+54     	; 0x7a6 <vfprintf+0x98>
 770:	8b 32       	cpi	r24, 0x2B	; 43
 772:	79 f0       	breq	.+30     	; 0x792 <vfprintf+0x84>
 774:	38 f4       	brcc	.+14     	; 0x784 <vfprintf+0x76>
 776:	80 32       	cpi	r24, 0x20	; 32
 778:	79 f0       	breq	.+30     	; 0x798 <vfprintf+0x8a>
 77a:	83 32       	cpi	r24, 0x23	; 35
 77c:	a1 f4       	brne	.+40     	; 0x7a6 <vfprintf+0x98>
 77e:	23 2d       	mov	r18, r3
 780:	20 61       	ori	r18, 0x10	; 16
 782:	1d c0       	rjmp	.+58     	; 0x7be <vfprintf+0xb0>
 784:	8d 32       	cpi	r24, 0x2D	; 45
 786:	61 f0       	breq	.+24     	; 0x7a0 <vfprintf+0x92>
 788:	80 33       	cpi	r24, 0x30	; 48
 78a:	69 f4       	brne	.+26     	; 0x7a6 <vfprintf+0x98>
 78c:	23 2d       	mov	r18, r3
 78e:	21 60       	ori	r18, 0x01	; 1
 790:	16 c0       	rjmp	.+44     	; 0x7be <vfprintf+0xb0>
 792:	83 2d       	mov	r24, r3
 794:	82 60       	ori	r24, 0x02	; 2
 796:	38 2e       	mov	r3, r24
 798:	e3 2d       	mov	r30, r3
 79a:	e4 60       	ori	r30, 0x04	; 4
 79c:	3e 2e       	mov	r3, r30
 79e:	2a c0       	rjmp	.+84     	; 0x7f4 <vfprintf+0xe6>
 7a0:	f3 2d       	mov	r31, r3
 7a2:	f8 60       	ori	r31, 0x08	; 8
 7a4:	1d c0       	rjmp	.+58     	; 0x7e0 <vfprintf+0xd2>
 7a6:	37 fc       	sbrc	r3, 7
 7a8:	2d c0       	rjmp	.+90     	; 0x804 <vfprintf+0xf6>
 7aa:	20 ed       	ldi	r18, 0xD0	; 208
 7ac:	28 0f       	add	r18, r24
 7ae:	2a 30       	cpi	r18, 0x0A	; 10
 7b0:	40 f0       	brcs	.+16     	; 0x7c2 <vfprintf+0xb4>
 7b2:	8e 32       	cpi	r24, 0x2E	; 46
 7b4:	b9 f4       	brne	.+46     	; 0x7e4 <vfprintf+0xd6>
 7b6:	36 fc       	sbrc	r3, 6
 7b8:	81 c1       	rjmp	.+770    	; 0xabc <__stack+0x1bd>
 7ba:	23 2d       	mov	r18, r3
 7bc:	20 64       	ori	r18, 0x40	; 64
 7be:	32 2e       	mov	r3, r18
 7c0:	19 c0       	rjmp	.+50     	; 0x7f4 <vfprintf+0xe6>
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <vfprintf+0xc4>
 7c6:	8a e0       	ldi	r24, 0x0A	; 10
 7c8:	98 9e       	mul	r9, r24
 7ca:	20 0d       	add	r18, r0
 7cc:	11 24       	eor	r1, r1
 7ce:	92 2e       	mov	r9, r18
 7d0:	11 c0       	rjmp	.+34     	; 0x7f4 <vfprintf+0xe6>
 7d2:	ea e0       	ldi	r30, 0x0A	; 10
 7d4:	2e 9e       	mul	r2, r30
 7d6:	20 0d       	add	r18, r0
 7d8:	11 24       	eor	r1, r1
 7da:	22 2e       	mov	r2, r18
 7dc:	f3 2d       	mov	r31, r3
 7de:	f0 62       	ori	r31, 0x20	; 32
 7e0:	3f 2e       	mov	r3, r31
 7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <vfprintf+0xe6>
 7e4:	8c 36       	cpi	r24, 0x6C	; 108
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <vfprintf+0xe2>
 7e8:	83 2d       	mov	r24, r3
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	38 2e       	mov	r3, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0xe6>
 7f0:	88 36       	cpi	r24, 0x68	; 104
 7f2:	41 f4       	brne	.+16     	; 0x804 <vfprintf+0xf6>
 7f4:	f7 01       	movw	r30, r14
 7f6:	93 fd       	sbrc	r25, 3
 7f8:	85 91       	lpm	r24, Z+
 7fa:	93 ff       	sbrs	r25, 3
 7fc:	81 91       	ld	r24, Z+
 7fe:	7f 01       	movw	r14, r30
 800:	81 11       	cpse	r24, r1
 802:	b3 cf       	rjmp	.-154    	; 0x76a <vfprintf+0x5c>
 804:	98 2f       	mov	r25, r24
 806:	9f 7d       	andi	r25, 0xDF	; 223
 808:	95 54       	subi	r25, 0x45	; 69
 80a:	93 30       	cpi	r25, 0x03	; 3
 80c:	28 f4       	brcc	.+10     	; 0x818 <vfprintf+0x10a>
 80e:	0c 5f       	subi	r16, 0xFC	; 252
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	9f e3       	ldi	r25, 0x3F	; 63
 814:	99 83       	std	Y+1, r25	; 0x01
 816:	0d c0       	rjmp	.+26     	; 0x832 <vfprintf+0x124>
 818:	83 36       	cpi	r24, 0x63	; 99
 81a:	31 f0       	breq	.+12     	; 0x828 <vfprintf+0x11a>
 81c:	83 37       	cpi	r24, 0x73	; 115
 81e:	71 f0       	breq	.+28     	; 0x83c <vfprintf+0x12e>
 820:	83 35       	cpi	r24, 0x53	; 83
 822:	09 f0       	breq	.+2      	; 0x826 <vfprintf+0x118>
 824:	59 c0       	rjmp	.+178    	; 0x8d8 <vfprintf+0x1ca>
 826:	21 c0       	rjmp	.+66     	; 0x86a <vfprintf+0x15c>
 828:	f8 01       	movw	r30, r16
 82a:	80 81       	ld	r24, Z
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	0e 5f       	subi	r16, 0xFE	; 254
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	88 24       	eor	r8, r8
 834:	83 94       	inc	r8
 836:	91 2c       	mov	r9, r1
 838:	53 01       	movw	r10, r6
 83a:	13 c0       	rjmp	.+38     	; 0x862 <vfprintf+0x154>
 83c:	28 01       	movw	r4, r16
 83e:	f2 e0       	ldi	r31, 0x02	; 2
 840:	4f 0e       	add	r4, r31
 842:	51 1c       	adc	r5, r1
 844:	f8 01       	movw	r30, r16
 846:	a0 80       	ld	r10, Z
 848:	b1 80       	ldd	r11, Z+1	; 0x01
 84a:	36 fe       	sbrs	r3, 6
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x146>
 84e:	69 2d       	mov	r22, r9
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x14a>
 854:	6f ef       	ldi	r22, 0xFF	; 255
 856:	7f ef       	ldi	r23, 0xFF	; 255
 858:	c5 01       	movw	r24, r10
 85a:	0e 94 73 05 	call	0xae6	; 0xae6 <strnlen>
 85e:	4c 01       	movw	r8, r24
 860:	82 01       	movw	r16, r4
 862:	f3 2d       	mov	r31, r3
 864:	ff 77       	andi	r31, 0x7F	; 127
 866:	3f 2e       	mov	r3, r31
 868:	16 c0       	rjmp	.+44     	; 0x896 <vfprintf+0x188>
 86a:	28 01       	movw	r4, r16
 86c:	22 e0       	ldi	r18, 0x02	; 2
 86e:	42 0e       	add	r4, r18
 870:	51 1c       	adc	r5, r1
 872:	f8 01       	movw	r30, r16
 874:	a0 80       	ld	r10, Z
 876:	b1 80       	ldd	r11, Z+1	; 0x01
 878:	36 fe       	sbrs	r3, 6
 87a:	03 c0       	rjmp	.+6      	; 0x882 <vfprintf+0x174>
 87c:	69 2d       	mov	r22, r9
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x178>
 882:	6f ef       	ldi	r22, 0xFF	; 255
 884:	7f ef       	ldi	r23, 0xFF	; 255
 886:	c5 01       	movw	r24, r10
 888:	0e 94 68 05 	call	0xad0	; 0xad0 <strnlen_P>
 88c:	4c 01       	movw	r8, r24
 88e:	f3 2d       	mov	r31, r3
 890:	f0 68       	ori	r31, 0x80	; 128
 892:	3f 2e       	mov	r3, r31
 894:	82 01       	movw	r16, r4
 896:	33 fc       	sbrc	r3, 3
 898:	1b c0       	rjmp	.+54     	; 0x8d0 <vfprintf+0x1c2>
 89a:	82 2d       	mov	r24, r2
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	88 16       	cp	r8, r24
 8a0:	99 06       	cpc	r9, r25
 8a2:	b0 f4       	brcc	.+44     	; 0x8d0 <vfprintf+0x1c2>
 8a4:	b6 01       	movw	r22, r12
 8a6:	80 e2       	ldi	r24, 0x20	; 32
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 8ae:	2a 94       	dec	r2
 8b0:	f4 cf       	rjmp	.-24     	; 0x89a <vfprintf+0x18c>
 8b2:	f5 01       	movw	r30, r10
 8b4:	37 fc       	sbrc	r3, 7
 8b6:	85 91       	lpm	r24, Z+
 8b8:	37 fe       	sbrs	r3, 7
 8ba:	81 91       	ld	r24, Z+
 8bc:	5f 01       	movw	r10, r30
 8be:	b6 01       	movw	r22, r12
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 8c6:	21 10       	cpse	r2, r1
 8c8:	2a 94       	dec	r2
 8ca:	21 e0       	ldi	r18, 0x01	; 1
 8cc:	82 1a       	sub	r8, r18
 8ce:	91 08       	sbc	r9, r1
 8d0:	81 14       	cp	r8, r1
 8d2:	91 04       	cpc	r9, r1
 8d4:	71 f7       	brne	.-36     	; 0x8b2 <vfprintf+0x1a4>
 8d6:	e8 c0       	rjmp	.+464    	; 0xaa8 <__stack+0x1a9>
 8d8:	84 36       	cpi	r24, 0x64	; 100
 8da:	11 f0       	breq	.+4      	; 0x8e0 <vfprintf+0x1d2>
 8dc:	89 36       	cpi	r24, 0x69	; 105
 8de:	41 f5       	brne	.+80     	; 0x930 <__stack+0x31>
 8e0:	f8 01       	movw	r30, r16
 8e2:	37 fe       	sbrs	r3, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x1e6>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	07 2e       	mov	r0, r23
 8fa:	00 0c       	add	r0, r0
 8fc:	88 0b       	sbc	r24, r24
 8fe:	99 0b       	sbc	r25, r25
 900:	0e 5f       	subi	r16, 0xFE	; 254
 902:	1f 4f       	sbci	r17, 0xFF	; 255
 904:	f3 2d       	mov	r31, r3
 906:	ff 76       	andi	r31, 0x6F	; 111
 908:	3f 2e       	mov	r3, r31
 90a:	97 ff       	sbrs	r25, 7
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0x21>
 90e:	90 95       	com	r25
 910:	80 95       	com	r24
 912:	70 95       	com	r23
 914:	61 95       	neg	r22
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	f0 68       	ori	r31, 0x80	; 128
 91e:	3f 2e       	mov	r3, r31
 920:	2a e0       	ldi	r18, 0x0A	; 10
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	a3 01       	movw	r20, r6
 926:	0e 94 ba 05 	call	0xb74	; 0xb74 <__ultoa_invert>
 92a:	88 2e       	mov	r8, r24
 92c:	86 18       	sub	r8, r6
 92e:	45 c0       	rjmp	.+138    	; 0x9ba <__stack+0xbb>
 930:	85 37       	cpi	r24, 0x75	; 117
 932:	31 f4       	brne	.+12     	; 0x940 <__stack+0x41>
 934:	23 2d       	mov	r18, r3
 936:	2f 7e       	andi	r18, 0xEF	; 239
 938:	b2 2e       	mov	r11, r18
 93a:	2a e0       	ldi	r18, 0x0A	; 10
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	25 c0       	rjmp	.+74     	; 0x98a <__stack+0x8b>
 940:	93 2d       	mov	r25, r3
 942:	99 7f       	andi	r25, 0xF9	; 249
 944:	b9 2e       	mov	r11, r25
 946:	8f 36       	cpi	r24, 0x6F	; 111
 948:	c1 f0       	breq	.+48     	; 0x97a <__stack+0x7b>
 94a:	18 f4       	brcc	.+6      	; 0x952 <__stack+0x53>
 94c:	88 35       	cpi	r24, 0x58	; 88
 94e:	79 f0       	breq	.+30     	; 0x96e <__stack+0x6f>
 950:	b5 c0       	rjmp	.+362    	; 0xabc <__stack+0x1bd>
 952:	80 37       	cpi	r24, 0x70	; 112
 954:	19 f0       	breq	.+6      	; 0x95c <__stack+0x5d>
 956:	88 37       	cpi	r24, 0x78	; 120
 958:	21 f0       	breq	.+8      	; 0x962 <__stack+0x63>
 95a:	b0 c0       	rjmp	.+352    	; 0xabc <__stack+0x1bd>
 95c:	e9 2f       	mov	r30, r25
 95e:	e0 61       	ori	r30, 0x10	; 16
 960:	be 2e       	mov	r11, r30
 962:	b4 fe       	sbrs	r11, 4
 964:	0d c0       	rjmp	.+26     	; 0x980 <__stack+0x81>
 966:	fb 2d       	mov	r31, r11
 968:	f4 60       	ori	r31, 0x04	; 4
 96a:	bf 2e       	mov	r11, r31
 96c:	09 c0       	rjmp	.+18     	; 0x980 <__stack+0x81>
 96e:	34 fe       	sbrs	r3, 4
 970:	0a c0       	rjmp	.+20     	; 0x986 <__stack+0x87>
 972:	29 2f       	mov	r18, r25
 974:	26 60       	ori	r18, 0x06	; 6
 976:	b2 2e       	mov	r11, r18
 978:	06 c0       	rjmp	.+12     	; 0x986 <__stack+0x87>
 97a:	28 e0       	ldi	r18, 0x08	; 8
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x8b>
 980:	20 e1       	ldi	r18, 0x10	; 16
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
 986:	20 e1       	ldi	r18, 0x10	; 16
 988:	32 e0       	ldi	r19, 0x02	; 2
 98a:	f8 01       	movw	r30, r16
 98c:	b7 fe       	sbrs	r11, 7
 98e:	07 c0       	rjmp	.+14     	; 0x99e <__stack+0x9f>
 990:	60 81       	ld	r22, Z
 992:	71 81       	ldd	r23, Z+1	; 0x01
 994:	82 81       	ldd	r24, Z+2	; 0x02
 996:	93 81       	ldd	r25, Z+3	; 0x03
 998:	0c 5f       	subi	r16, 0xFC	; 252
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <__stack+0xab>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 5f       	subi	r16, 0xFE	; 254
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	a3 01       	movw	r20, r6
 9ac:	0e 94 ba 05 	call	0xb74	; 0xb74 <__ultoa_invert>
 9b0:	88 2e       	mov	r8, r24
 9b2:	86 18       	sub	r8, r6
 9b4:	fb 2d       	mov	r31, r11
 9b6:	ff 77       	andi	r31, 0x7F	; 127
 9b8:	3f 2e       	mov	r3, r31
 9ba:	36 fe       	sbrs	r3, 6
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__stack+0xd9>
 9be:	23 2d       	mov	r18, r3
 9c0:	2e 7f       	andi	r18, 0xFE	; 254
 9c2:	a2 2e       	mov	r10, r18
 9c4:	89 14       	cp	r8, r9
 9c6:	58 f4       	brcc	.+22     	; 0x9de <__stack+0xdf>
 9c8:	34 fe       	sbrs	r3, 4
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <__stack+0xe3>
 9cc:	32 fc       	sbrc	r3, 2
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0xe3>
 9d0:	83 2d       	mov	r24, r3
 9d2:	8e 7e       	andi	r24, 0xEE	; 238
 9d4:	a8 2e       	mov	r10, r24
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0xe3>
 9d8:	b8 2c       	mov	r11, r8
 9da:	a3 2c       	mov	r10, r3
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <__stack+0xe5>
 9de:	b8 2c       	mov	r11, r8
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <__stack+0xe5>
 9e2:	b9 2c       	mov	r11, r9
 9e4:	a4 fe       	sbrs	r10, 4
 9e6:	0f c0       	rjmp	.+30     	; 0xa06 <__stack+0x107>
 9e8:	fe 01       	movw	r30, r28
 9ea:	e8 0d       	add	r30, r8
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	80 33       	cpi	r24, 0x30	; 48
 9f2:	21 f4       	brne	.+8      	; 0x9fc <__stack+0xfd>
 9f4:	9a 2d       	mov	r25, r10
 9f6:	99 7e       	andi	r25, 0xE9	; 233
 9f8:	a9 2e       	mov	r10, r25
 9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__stack+0x10f>
 9fc:	a2 fe       	sbrs	r10, 2
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__stack+0x10d>
 a00:	b3 94       	inc	r11
 a02:	b3 94       	inc	r11
 a04:	04 c0       	rjmp	.+8      	; 0xa0e <__stack+0x10f>
 a06:	8a 2d       	mov	r24, r10
 a08:	86 78       	andi	r24, 0x86	; 134
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
 a0c:	b3 94       	inc	r11
 a0e:	a3 fc       	sbrc	r10, 3
 a10:	11 c0       	rjmp	.+34     	; 0xa34 <__stack+0x135>
 a12:	a0 fe       	sbrs	r10, 0
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <__stack+0x123>
 a16:	b2 14       	cp	r11, r2
 a18:	88 f4       	brcc	.+34     	; 0xa3c <__stack+0x13d>
 a1a:	28 0c       	add	r2, r8
 a1c:	92 2c       	mov	r9, r2
 a1e:	9b 18       	sub	r9, r11
 a20:	0e c0       	rjmp	.+28     	; 0xa3e <__stack+0x13f>
 a22:	b2 14       	cp	r11, r2
 a24:	60 f4       	brcc	.+24     	; 0xa3e <__stack+0x13f>
 a26:	b6 01       	movw	r22, r12
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 a30:	b3 94       	inc	r11
 a32:	f7 cf       	rjmp	.-18     	; 0xa22 <__stack+0x123>
 a34:	b2 14       	cp	r11, r2
 a36:	18 f4       	brcc	.+6      	; 0xa3e <__stack+0x13f>
 a38:	2b 18       	sub	r2, r11
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	98 2c       	mov	r9, r8
 a3e:	21 2c       	mov	r2, r1
 a40:	a4 fe       	sbrs	r10, 4
 a42:	10 c0       	rjmp	.+32     	; 0xa64 <__stack+0x165>
 a44:	b6 01       	movw	r22, r12
 a46:	80 e3       	ldi	r24, 0x30	; 48
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 a4e:	a2 fe       	sbrs	r10, 2
 a50:	17 c0       	rjmp	.+46     	; 0xa80 <__stack+0x181>
 a52:	a1 fc       	sbrc	r10, 1
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <__stack+0x15d>
 a56:	88 e7       	ldi	r24, 0x78	; 120
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__stack+0x161>
 a5c:	88 e5       	ldi	r24, 0x58	; 88
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	b6 01       	movw	r22, r12
 a62:	0c c0       	rjmp	.+24     	; 0xa7c <__stack+0x17d>
 a64:	8a 2d       	mov	r24, r10
 a66:	86 78       	andi	r24, 0x86	; 134
 a68:	59 f0       	breq	.+22     	; 0xa80 <__stack+0x181>
 a6a:	a1 fe       	sbrs	r10, 1
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x173>
 a6e:	8b e2       	ldi	r24, 0x2B	; 43
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x175>
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	a7 fc       	sbrc	r10, 7
 a76:	8d e2       	ldi	r24, 0x2D	; 45
 a78:	b6 01       	movw	r22, r12
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 a80:	89 14       	cp	r8, r9
 a82:	38 f4       	brcc	.+14     	; 0xa92 <__stack+0x193>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 a8e:	9a 94       	dec	r9
 a90:	f7 cf       	rjmp	.-18     	; 0xa80 <__stack+0x181>
 a92:	8a 94       	dec	r8
 a94:	f3 01       	movw	r30, r6
 a96:	e8 0d       	add	r30, r8
 a98:	f1 1d       	adc	r31, r1
 a9a:	80 81       	ld	r24, Z
 a9c:	b6 01       	movw	r22, r12
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 aa4:	81 10       	cpse	r8, r1
 aa6:	f5 cf       	rjmp	.-22     	; 0xa92 <__stack+0x193>
 aa8:	22 20       	and	r2, r2
 aaa:	09 f4       	brne	.+2      	; 0xaae <__stack+0x1af>
 aac:	42 ce       	rjmp	.-892    	; 0x732 <vfprintf+0x24>
 aae:	b6 01       	movw	r22, r12
 ab0:	80 e2       	ldi	r24, 0x20	; 32
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 7e 05 	call	0xafc	; 0xafc <fputc>
 ab8:	2a 94       	dec	r2
 aba:	f6 cf       	rjmp	.-20     	; 0xaa8 <__stack+0x1a9>
 abc:	f6 01       	movw	r30, r12
 abe:	86 81       	ldd	r24, Z+6	; 0x06
 ac0:	97 81       	ldd	r25, Z+7	; 0x07
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__stack+0x1c9>
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	9f ef       	ldi	r25, 0xFF	; 255
 ac8:	2b 96       	adiw	r28, 0x0b	; 11
 aca:	e2 e1       	ldi	r30, 0x12	; 18
 acc:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__epilogue_restores__>

00000ad0 <strnlen_P>:
 ad0:	fc 01       	movw	r30, r24
 ad2:	05 90       	lpm	r0, Z+
 ad4:	61 50       	subi	r22, 0x01	; 1
 ad6:	70 40       	sbci	r23, 0x00	; 0
 ad8:	01 10       	cpse	r0, r1
 ada:	d8 f7       	brcc	.-10     	; 0xad2 <strnlen_P+0x2>
 adc:	80 95       	com	r24
 ade:	90 95       	com	r25
 ae0:	8e 0f       	add	r24, r30
 ae2:	9f 1f       	adc	r25, r31
 ae4:	08 95       	ret

00000ae6 <strnlen>:
 ae6:	fc 01       	movw	r30, r24
 ae8:	61 50       	subi	r22, 0x01	; 1
 aea:	70 40       	sbci	r23, 0x00	; 0
 aec:	01 90       	ld	r0, Z+
 aee:	01 10       	cpse	r0, r1
 af0:	d8 f7       	brcc	.-10     	; 0xae8 <strnlen+0x2>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	8e 0f       	add	r24, r30
 af8:	9f 1f       	adc	r25, r31
 afa:	08 95       	ret

00000afc <fputc>:
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	fb 01       	movw	r30, r22
 b06:	23 81       	ldd	r18, Z+3	; 0x03
 b08:	21 fd       	sbrc	r18, 1
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <fputc+0x16>
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	9f ef       	ldi	r25, 0xFF	; 255
 b10:	2c c0       	rjmp	.+88     	; 0xb6a <fputc+0x6e>
 b12:	22 ff       	sbrs	r18, 2
 b14:	16 c0       	rjmp	.+44     	; 0xb42 <fputc+0x46>
 b16:	46 81       	ldd	r20, Z+6	; 0x06
 b18:	57 81       	ldd	r21, Z+7	; 0x07
 b1a:	24 81       	ldd	r18, Z+4	; 0x04
 b1c:	35 81       	ldd	r19, Z+5	; 0x05
 b1e:	42 17       	cp	r20, r18
 b20:	53 07       	cpc	r21, r19
 b22:	44 f4       	brge	.+16     	; 0xb34 <fputc+0x38>
 b24:	a0 81       	ld	r26, Z
 b26:	b1 81       	ldd	r27, Z+1	; 0x01
 b28:	9d 01       	movw	r18, r26
 b2a:	2f 5f       	subi	r18, 0xFF	; 255
 b2c:	3f 4f       	sbci	r19, 0xFF	; 255
 b2e:	31 83       	std	Z+1, r19	; 0x01
 b30:	20 83       	st	Z, r18
 b32:	8c 93       	st	X, r24
 b34:	26 81       	ldd	r18, Z+6	; 0x06
 b36:	37 81       	ldd	r19, Z+7	; 0x07
 b38:	2f 5f       	subi	r18, 0xFF	; 255
 b3a:	3f 4f       	sbci	r19, 0xFF	; 255
 b3c:	37 83       	std	Z+7, r19	; 0x07
 b3e:	26 83       	std	Z+6, r18	; 0x06
 b40:	14 c0       	rjmp	.+40     	; 0xb6a <fputc+0x6e>
 b42:	8b 01       	movw	r16, r22
 b44:	ec 01       	movw	r28, r24
 b46:	fb 01       	movw	r30, r22
 b48:	00 84       	ldd	r0, Z+8	; 0x08
 b4a:	f1 85       	ldd	r31, Z+9	; 0x09
 b4c:	e0 2d       	mov	r30, r0
 b4e:	09 95       	icall
 b50:	89 2b       	or	r24, r25
 b52:	e1 f6       	brne	.-72     	; 0xb0c <fputc+0x10>
 b54:	d8 01       	movw	r26, r16
 b56:	16 96       	adiw	r26, 0x06	; 6
 b58:	8d 91       	ld	r24, X+
 b5a:	9c 91       	ld	r25, X
 b5c:	17 97       	sbiw	r26, 0x07	; 7
 b5e:	01 96       	adiw	r24, 0x01	; 1
 b60:	17 96       	adiw	r26, 0x07	; 7
 b62:	9c 93       	st	X, r25
 b64:	8e 93       	st	-X, r24
 b66:	16 97       	sbiw	r26, 0x06	; 6
 b68:	ce 01       	movw	r24, r28
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	1f 91       	pop	r17
 b70:	0f 91       	pop	r16
 b72:	08 95       	ret

00000b74 <__ultoa_invert>:
 b74:	fa 01       	movw	r30, r20
 b76:	aa 27       	eor	r26, r26
 b78:	28 30       	cpi	r18, 0x08	; 8
 b7a:	51 f1       	breq	.+84     	; 0xbd0 <__ultoa_invert+0x5c>
 b7c:	20 31       	cpi	r18, 0x10	; 16
 b7e:	81 f1       	breq	.+96     	; 0xbe0 <__ultoa_invert+0x6c>
 b80:	e8 94       	clt
 b82:	6f 93       	push	r22
 b84:	6e 7f       	andi	r22, 0xFE	; 254
 b86:	6e 5f       	subi	r22, 0xFE	; 254
 b88:	7f 4f       	sbci	r23, 0xFF	; 255
 b8a:	8f 4f       	sbci	r24, 0xFF	; 255
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	af 4f       	sbci	r26, 0xFF	; 255
 b90:	b1 e0       	ldi	r27, 0x01	; 1
 b92:	3e d0       	rcall	.+124    	; 0xc10 <__ultoa_invert+0x9c>
 b94:	b4 e0       	ldi	r27, 0x04	; 4
 b96:	3c d0       	rcall	.+120    	; 0xc10 <__ultoa_invert+0x9c>
 b98:	67 0f       	add	r22, r23
 b9a:	78 1f       	adc	r23, r24
 b9c:	89 1f       	adc	r24, r25
 b9e:	9a 1f       	adc	r25, r26
 ba0:	a1 1d       	adc	r26, r1
 ba2:	68 0f       	add	r22, r24
 ba4:	79 1f       	adc	r23, r25
 ba6:	8a 1f       	adc	r24, r26
 ba8:	91 1d       	adc	r25, r1
 baa:	a1 1d       	adc	r26, r1
 bac:	6a 0f       	add	r22, r26
 bae:	71 1d       	adc	r23, r1
 bb0:	81 1d       	adc	r24, r1
 bb2:	91 1d       	adc	r25, r1
 bb4:	a1 1d       	adc	r26, r1
 bb6:	20 d0       	rcall	.+64     	; 0xbf8 <__ultoa_invert+0x84>
 bb8:	09 f4       	brne	.+2      	; 0xbbc <__ultoa_invert+0x48>
 bba:	68 94       	set
 bbc:	3f 91       	pop	r19
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	26 9f       	mul	r18, r22
 bc2:	11 24       	eor	r1, r1
 bc4:	30 19       	sub	r19, r0
 bc6:	30 5d       	subi	r19, 0xD0	; 208
 bc8:	31 93       	st	Z+, r19
 bca:	de f6       	brtc	.-74     	; 0xb82 <__ultoa_invert+0xe>
 bcc:	cf 01       	movw	r24, r30
 bce:	08 95       	ret
 bd0:	46 2f       	mov	r20, r22
 bd2:	47 70       	andi	r20, 0x07	; 7
 bd4:	40 5d       	subi	r20, 0xD0	; 208
 bd6:	41 93       	st	Z+, r20
 bd8:	b3 e0       	ldi	r27, 0x03	; 3
 bda:	0f d0       	rcall	.+30     	; 0xbfa <__ultoa_invert+0x86>
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__ultoa_invert+0x5c>
 bde:	f6 cf       	rjmp	.-20     	; 0xbcc <__ultoa_invert+0x58>
 be0:	46 2f       	mov	r20, r22
 be2:	4f 70       	andi	r20, 0x0F	; 15
 be4:	40 5d       	subi	r20, 0xD0	; 208
 be6:	4a 33       	cpi	r20, 0x3A	; 58
 be8:	18 f0       	brcs	.+6      	; 0xbf0 <__ultoa_invert+0x7c>
 bea:	49 5d       	subi	r20, 0xD9	; 217
 bec:	31 fd       	sbrc	r19, 1
 bee:	40 52       	subi	r20, 0x20	; 32
 bf0:	41 93       	st	Z+, r20
 bf2:	02 d0       	rcall	.+4      	; 0xbf8 <__ultoa_invert+0x84>
 bf4:	a9 f7       	brne	.-22     	; 0xbe0 <__ultoa_invert+0x6c>
 bf6:	ea cf       	rjmp	.-44     	; 0xbcc <__ultoa_invert+0x58>
 bf8:	b4 e0       	ldi	r27, 0x04	; 4
 bfa:	a6 95       	lsr	r26
 bfc:	97 95       	ror	r25
 bfe:	87 95       	ror	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	ba 95       	dec	r27
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0x86>
 c08:	00 97       	sbiw	r24, 0x00	; 0
 c0a:	61 05       	cpc	r22, r1
 c0c:	71 05       	cpc	r23, r1
 c0e:	08 95       	ret
 c10:	9b 01       	movw	r18, r22
 c12:	ac 01       	movw	r20, r24
 c14:	0a 2e       	mov	r0, r26
 c16:	06 94       	lsr	r0
 c18:	57 95       	ror	r21
 c1a:	47 95       	ror	r20
 c1c:	37 95       	ror	r19
 c1e:	27 95       	ror	r18
 c20:	ba 95       	dec	r27
 c22:	c9 f7       	brne	.-14     	; 0xc16 <__ultoa_invert+0xa2>
 c24:	62 0f       	add	r22, r18
 c26:	73 1f       	adc	r23, r19
 c28:	84 1f       	adc	r24, r20
 c2a:	95 1f       	adc	r25, r21
 c2c:	a0 1d       	adc	r26, r0
 c2e:	08 95       	ret

00000c30 <__prologue_saves__>:
 c30:	2f 92       	push	r2
 c32:	3f 92       	push	r3
 c34:	4f 92       	push	r4
 c36:	5f 92       	push	r5
 c38:	6f 92       	push	r6
 c3a:	7f 92       	push	r7
 c3c:	8f 92       	push	r8
 c3e:	9f 92       	push	r9
 c40:	af 92       	push	r10
 c42:	bf 92       	push	r11
 c44:	cf 92       	push	r12
 c46:	df 92       	push	r13
 c48:	ef 92       	push	r14
 c4a:	ff 92       	push	r15
 c4c:	0f 93       	push	r16
 c4e:	1f 93       	push	r17
 c50:	cf 93       	push	r28
 c52:	df 93       	push	r29
 c54:	cd b7       	in	r28, 0x3d	; 61
 c56:	de b7       	in	r29, 0x3e	; 62
 c58:	ca 1b       	sub	r28, r26
 c5a:	db 0b       	sbc	r29, r27
 c5c:	0f b6       	in	r0, 0x3f	; 63
 c5e:	f8 94       	cli
 c60:	de bf       	out	0x3e, r29	; 62
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	cd bf       	out	0x3d, r28	; 61
 c66:	09 94       	ijmp

00000c68 <__epilogue_restores__>:
 c68:	2a 88       	ldd	r2, Y+18	; 0x12
 c6a:	39 88       	ldd	r3, Y+17	; 0x11
 c6c:	48 88       	ldd	r4, Y+16	; 0x10
 c6e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c70:	6e 84       	ldd	r6, Y+14	; 0x0e
 c72:	7d 84       	ldd	r7, Y+13	; 0x0d
 c74:	8c 84       	ldd	r8, Y+12	; 0x0c
 c76:	9b 84       	ldd	r9, Y+11	; 0x0b
 c78:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7a:	b9 84       	ldd	r11, Y+9	; 0x09
 c7c:	c8 84       	ldd	r12, Y+8	; 0x08
 c7e:	df 80       	ldd	r13, Y+7	; 0x07
 c80:	ee 80       	ldd	r14, Y+6	; 0x06
 c82:	fd 80       	ldd	r15, Y+5	; 0x05
 c84:	0c 81       	ldd	r16, Y+4	; 0x04
 c86:	1b 81       	ldd	r17, Y+3	; 0x03
 c88:	aa 81       	ldd	r26, Y+2	; 0x02
 c8a:	b9 81       	ldd	r27, Y+1	; 0x01
 c8c:	ce 0f       	add	r28, r30
 c8e:	d1 1d       	adc	r29, r1
 c90:	0f b6       	in	r0, 0x3f	; 63
 c92:	f8 94       	cli
 c94:	de bf       	out	0x3e, r29	; 62
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	cd bf       	out	0x3d, r28	; 61
 c9a:	ed 01       	movw	r28, r26
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
