
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  0080014a  0080014a  00000344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_20>
  54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 38       	cpi	r26, 0x83	; 131
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_adc>:
		}
	}
	return 1;
}
void init_adc() {
	ADMUX = 0b01000010; //sets voltage ref to Vcc and starts ADC2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = 0b11101111; //enable adc, starts conversion, enable interrupt, sets prescalar 128
  ac:	8f ee       	ldi	r24, 0xEF	; 239
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  b8:	08 95       	ret

000000ba <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
  be:	15 b8       	out	0x05, r1	; 5
  c0:	08 95       	ret

000000c2 <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
  c8:	88 e5       	ldi	r24, 0x58	; 88
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  e0:	08 95       	ret

000000e2 <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
  e2:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
  e4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (0b00000101); // prescalar 1024
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	86 bd       	out	0x26, r24	; 38
  f0:	08 95       	ret

000000f2 <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
  f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0b00000010); // prescalar 8 
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0b00100001); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
  fc:	81 e2       	ldi	r24, 0x21	; 33
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 102:	08 95       	ret

00000104 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (0b10000001); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b00000110); // Phase Correct PWM Mode, prescalar 256
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 10c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 110:	08 95       	ret

00000112 <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_end>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 118:	ec e4       	ldi	r30, 0x4C	; 76
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	2d e0       	ldi	r18, 0x0D	; 13
 11e:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 120:	22 e0       	ldi	r18, 0x02	; 2
 122:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <qcntr>
 126:	2a e0       	ldi	r18, 0x0A	; 10
 128:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 12a:	fc 01       	movw	r30, r24
 12c:	20 81       	ld	r18, Z
 12e:	22 23       	and	r18, r18
 130:	79 f0       	breq	.+30     	; 0x150 <sendmsg+0x3e>
 132:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 134:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <qcntr>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	8e 0f       	add	r24, r30
 13c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <qcntr>
 140:	8d 91       	ld	r24, X+
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e4 5b       	subi	r30, 0xB4	; 180
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 14a:	8c 91       	ld	r24, X
 14c:	81 11       	cpse	r24, r1
 14e:	f2 cf       	rjmp	.-28     	; 0x134 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 150:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <queue>
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 158:	08 95       	ret

0000015a <main>:
enum adc{Volt,Bright,Temp} input;

int main(void)
{
	char ch;  /* character variable for received character*/
	init_ports();
 15a:	0e 94 5d 00 	call	0xba	; 0xba <init_ports>
	init_USART();
 15e:	0e 94 61 00 	call	0xc2	; 0xc2 <init_USART>
	init_adc();
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <init_adc>
	init_timer0();
 166:	0e 94 71 00 	call	0xe2	; 0xe2 <init_timer0>
	init_timer1();
 16a:	0e 94 79 00 	call	0xf2	; 0xf2 <init_timer1>
	init_timer2();
 16e:	0e 94 82 00 	call	0x104	; 0x104 <init_timer2>


	sei(); /*global interrupt enable */
 172:	78 94       	sei

	while (1)
	{
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 174:	c0 ec       	ldi	r28, 0xC0	; 192
 176:	d0 e0       	ldi	r29, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 178:	06 ec       	ldi	r16, 0xC6	; 198
 17a:	10 e0       	ldi	r17, 0x00	; 0

	sei(); /*global interrupt enable */

	while (1)
	{
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <main+0x22>
		{
			ch = UDR0;    /*get character sent from PC*/
 182:	f8 01       	movw	r30, r16
 184:	80 81       	ld	r24, Z
			switch (ch)
 186:	81 36       	cpi	r24, 0x61	; 97
 188:	21 f0       	breq	.+8      	; 0x192 <main+0x38>
 18a:	82 36       	cpi	r24, 0x62	; 98
 18c:	39 f0       	breq	.+14     	; 0x19c <main+0x42>
 18e:	81 34       	cpi	r24, 0x41	; 65
 190:	51 f4       	brne	.+20     	; 0x1a6 <main+0x4c>
			{
				case 'A':
				case 'a':
				sendmsg(msg1); /*send first message*/
 192:	82 e3       	ldi	r24, 0x32	; 50
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 89 00 	call	0x112	; 0x112 <sendmsg>
				break;
 19a:	f0 cf       	rjmp	.-32     	; 0x17c <main+0x22>
				case 'b':
				sendmsg(msg2); /*send second message*/
 19c:	8a e1       	ldi	r24, 0x1A	; 26
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 89 00 	call	0x112	; 0x112 <sendmsg>
				break;
 1a4:	eb cf       	rjmp	.-42     	; 0x17c <main+0x22>
				default:
				sendmsg(msg3); /*send default message*/
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 89 00 	call	0x112	; 0x112 <sendmsg>
 1ae:	e6 cf       	rjmp	.-52     	; 0x17c <main+0x22>

000001b0 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 1c0:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <__data_end>
 1c4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <qcntr>
 1c8:	8e 17       	cp	r24, r30
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	8e 0f       	add	r24, r30
 1d0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e4 5b       	subi	r30, 0xB4	; 180
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	
	adc_reading = ADC;
 1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 206:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <adc_reading+0x1>
 20a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <adc_reading>
	new_adc_data = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <new_adc_data+0x1>
 216:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <new_adc_data>
	switch(input) {
 21a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <input>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	51 f0       	breq	.+20     	; 0x236 <__vector_21+0x46>
 222:	18 f0       	brcs	.+6      	; 0x22a <__vector_21+0x3a>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	69 f0       	breq	.+26     	; 0x242 <__vector_21+0x52>
 228:	12 c0       	rjmp	.+36     	; 0x24e <__vector_21+0x5e>
		
		case Volt :
			ADMUX = 0b01000000; //adc0
 22a:	80 e4       	ldi	r24, 0x40	; 64
 22c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	85 bb       	out	0x15, r24	; 21
		break;
 234:	0f c0       	rjmp	.+30     	; 0x254 <__vector_21+0x64>
		
		case Bright :
			ADMUX = 0b01000001; //adc1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	85 bb       	out	0x15, r24	; 21
		break;
 240:	09 c0       	rjmp	.+18     	; 0x254 <__vector_21+0x64>
		
		case Temp :
			ADMUX = 0b01000010; //adc2
 242:	82 e4       	ldi	r24, 0x42	; 66
 244:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	85 bb       	out	0x15, r24	; 21
		break;
 24c:	03 c0       	rjmp	.+6      	; 0x254 <__vector_21+0x64>
		default:
			ADMUX = 0b01000010; //adc2
 24e:	82 e4       	ldi	r24, 0x42	; 66
 250:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
	}

 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
