
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  0080023c  0080023c  00000c0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b25  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000748  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046f  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001be  00000000  00000000  00002921  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_20>
  54:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	6a 01       	movw	r12, r20
  6a:	b9 01       	movw	r22, r18
  6c:	af 01       	movw	r20, r30
  6e:	b9 01       	movw	r22, r18
  70:	b4 01       	movw	r22, r8
  72:	b9 01       	movw	r22, r18
  74:	b9 01       	movw	r22, r18
  76:	b9 01       	movw	r22, r18
  78:	b9 01       	movw	r22, r18
  7a:	b9 01       	movw	r22, r18
  7c:	b9 01       	movw	r22, r18
  7e:	50 01       	movw	r10, r0
  80:	2f 01       	movw	r4, r30
  82:	37 01       	movw	r6, r14
  84:	b9 01       	movw	r22, r18
  86:	3f 01       	movw	r6, r30
  88:	b9 01       	movw	r22, r18
  8a:	b9 01       	movw	r22, r18
  8c:	bd 01       	movw	r22, r26
  8e:	46 01       	movw	r8, r12
  90:	b9 01       	movw	r22, r18
  92:	81 01       	movw	r16, r2
  94:	b9 01       	movw	r22, r18
  96:	b9 01       	movw	r22, r18
  98:	b9 01       	movw	r22, r18
  9a:	b9 01       	movw	r22, r18
  9c:	b9 01       	movw	r22, r18
  9e:	b9 01       	movw	r22, r18
  a0:	b9 01       	movw	r22, r18
  a2:	b9 01       	movw	r22, r18
  a4:	b9 01       	movw	r22, r18
  a6:	b9 01       	movw	r22, r18
  a8:	6a 01       	movw	r12, r20
  aa:	b9 01       	movw	r22, r18
  ac:	af 01       	movw	r20, r30
  ae:	b9 01       	movw	r22, r18
  b0:	b4 01       	movw	r22, r8
  b2:	b9 01       	movw	r22, r18
  b4:	b9 01       	movw	r22, r18
  b6:	b9 01       	movw	r22, r18
  b8:	b9 01       	movw	r22, r18
  ba:	b9 01       	movw	r22, r18
  bc:	b9 01       	movw	r22, r18
  be:	50 01       	movw	r10, r0
  c0:	2f 01       	movw	r4, r30
  c2:	37 01       	movw	r6, r14
  c4:	b9 01       	movw	r22, r18
  c6:	3f 01       	movw	r6, r30
  c8:	b9 01       	movw	r22, r18
  ca:	b9 01       	movw	r22, r18
  cc:	bd 01       	movw	r22, r26
  ce:	46 01       	movw	r8, r12
  d0:	b9 01       	movw	r22, r18
  d2:	81 01       	movw	r16, r2

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	ec e3       	ldi	r30, 0x3C	; 60
  e8:	fa e0       	ldi	r31, 0x0A	; 10
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ac 33       	cpi	r26, 0x3C	; 60
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	ac e3       	ldi	r26, 0x3C	; 60
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a7 37       	cpi	r26, 0x77	; 119
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}
	}
	return 1;
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	e0 e4       	ldi	r30, 0x40	; 64
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 3f 02 	sts	0x023F, r18	; 0x80023f <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 5c       	subi	r30, 0xC0	; 192
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
enum adc{Volt,LDR,Temp} input;
	
unsigned int enContDisplay = 0; //enable continuous display

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e2 97       	sbiw	r28, 0x32	; 50
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	char ch;  /* character variable for received character*/
	init_ports();
 1da:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1f2:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f4:	00 ec       	ldi	r16, 0xC0	; 192
 1f6:	10 e0       	ldi	r17, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f6 ec       	ldi	r31, 0xC6	; 198
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value is %d mV", adc_mV); //Report ADC value in mV
 202:	0f 2e       	mov	r0, r31
 204:	f8 e8       	ldi	r31, 0x88	; 136
 206:	8f 2e       	mov	r8, r31
 208:	f3 e1       	ldi	r31, 0x13	; 19
 20a:	9f 2e       	mov	r9, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	0f 2e       	mov	r0, r31
 210:	f8 e2       	ldi	r31, 0x28	; 40
 212:	af 2e       	mov	r10, r31
 214:	f2 e0       	ldi	r31, 0x02	; 2
 216:	bf 2e       	mov	r11, r31
 218:	f0 2d       	mov	r31, r0
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	6c 01       	movw	r12, r24
				
				case 'A':
				case 'a':
				{
				char data[50];
				sprintf(data, "ADC value is %d", adc_reading); //Report ADC value
 220:	0f 2e       	mov	r0, r31
 222:	f8 e1       	ldi	r31, 0x18	; 24
 224:	6f 2e       	mov	r6, r31
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	7f 2e       	mov	r7, r31
 22a:	f0 2d       	mov	r31, r0
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 22c:	44 24       	eor	r4, r4
 22e:	43 94       	inc	r4
 230:	51 2c       	mov	r5, r1
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value is %d mV", adc_mV); //Report ADC value in mV
 232:	28 2e       	mov	r2, r24
 234:	3d 2c       	mov	r3, r13

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 236:	d8 01       	movw	r26, r16
 238:	8c 91       	ld	r24, X
 23a:	88 23       	and	r24, r24
 23c:	0c f0       	brlt	.+2      	; 0x240 <main+0x7a>
 23e:	9d c0       	rjmp	.+314    	; 0x37a <main+0x1b4>
		{
			ch = UDR0;    /*get character sent from PC*/
 240:	d7 01       	movw	r26, r14
 242:	ec 91       	ld	r30, X
			switch (ch) { //character input
 244:	8e 2f       	mov	r24, r30
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	e1 54       	subi	r30, 0x41	; 65
 24c:	f1 09       	sbc	r31, r1
 24e:	e6 33       	cpi	r30, 0x36	; 54
 250:	f1 05       	cpc	r31, r1
 252:	08 f0       	brcs	.+2      	; 0x256 <main+0x90>
 254:	8e c0       	rjmp	.+284    	; 0x372 <main+0x1ac>
 256:	ec 5c       	subi	r30, 0xCC	; 204
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__tablejump2__>
				
				case 'M':
				case 'm':
				input = Temp;
 25e:	b2 e0       	ldi	r27, 0x02	; 2
 260:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <input>
				sendmsg(msg2);
 264:	86 ed       	ldi	r24, 0xD6	; 214
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 26c:	86 c0       	rjmp	.+268    	; 0x37a <main+0x1b4>
				
				case 'N':
				case 'n':
				input = LDR;
 26e:	e1 e0       	ldi	r30, 0x01	; 1
 270:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <input>
				sendmsg(msg3);
 274:	88 eb       	ldi	r24, 0xB8	; 184
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 27c:	7e c0       	rjmp	.+252    	; 0x37a <main+0x1b4>
				
				case 'P':
				case 'p':
				input = Volt;
 27e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <input>
				sendmsg(msg4);
 282:	80 e9       	ldi	r24, 0x90	; 144
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 28a:	77 c0       	rjmp	.+238    	; 0x37a <main+0x1b4>
				
				case 'T':
				case 't':
				if (input == Temp) {
 28c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <input>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	09 f4       	brne	.+2      	; 0x296 <main+0xd0>
 294:	72 c0       	rjmp	.+228    	; 0x37a <main+0x1b4>
					//double temp;
					//Report temp in degrees
					//sprintf('LM35 Temperature = %f deg C',temp);
				} else {
					//Give warning
					sendmsg(msg5);
 296:	8a e4       	ldi	r24, 0x4A	; 74
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 29e:	6d c0       	rjmp	.+218    	; 0x37a <main+0x1b4>
				}
				break;
				
				case 'L':
				case 'l':
				if (input == LDR) {
 2a0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <input>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	89 f4       	brne	.+34     	; 0x2ca <main+0x104>
						if(adc_reading>512)
 2a8:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <adc_reading>
 2ac:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <adc_reading+0x1>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	92 40       	sbci	r25, 0x02	; 2
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <main+0xfa>
						{
							sendmsg(msg7);
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2be:	5d c0       	rjmp	.+186    	; 0x37a <main+0x1b4>
						}
						else
						{
							sendmsg(msg8);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2c8:	58 c0       	rjmp	.+176    	; 0x37a <main+0x1b4>
						}
					} else {
					//Give warning
					sendmsg(msg6);
 2ca:	8c e0       	ldi	r24, 0x0C	; 12
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2d2:	53 c0       	rjmp	.+166    	; 0x37a <main+0x1b4>
				
				case 'A':
				case 'a':
				{
				char data[50];
				sprintf(data, "ADC value is %d", adc_reading); //Report ADC value
 2d4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <adc_reading+0x1>
 2d8:	8f 93       	push	r24
 2da:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <adc_reading>
 2de:	8f 93       	push	r24
 2e0:	7f 92       	push	r7
 2e2:	6f 92       	push	r6
 2e4:	df 92       	push	r13
 2e6:	cf 92       	push	r12
 2e8:	0e 94 32 02 	call	0x464	; 0x464 <sprintf>
				sendmsg(data);
 2ec:	82 2d       	mov	r24, r2
 2ee:	93 2d       	mov	r25, r3
 2f0:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	3c c0       	rjmp	.+120    	; 0x37a <main+0x1b4>
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value is %d mV", adc_mV); //Report ADC value in mV
 302:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <adc_reading>
 306:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <adc_reading+0x1>
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	36 95       	lsr	r19
 314:	27 95       	ror	r18
 316:	a5 ec       	ldi	r26, 0xC5	; 197
 318:	b0 e2       	ldi	r27, 0x20	; 32
 31a:	0e 94 23 02 	call	0x446	; 0x446 <__umulhisi3>
 31e:	92 95       	swap	r25
 320:	82 95       	swap	r24
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	89 27       	eor	r24, r25
 326:	9f 70       	andi	r25, 0x0F	; 15
 328:	89 27       	eor	r24, r25
 32a:	88 9d       	mul	r24, r8
 32c:	90 01       	movw	r18, r0
 32e:	89 9d       	mul	r24, r9
 330:	30 0d       	add	r19, r0
 332:	98 9d       	mul	r25, r8
 334:	30 0d       	add	r19, r0
 336:	11 24       	eor	r1, r1
 338:	3f 93       	push	r19
 33a:	2f 93       	push	r18
 33c:	bf 92       	push	r11
 33e:	af 92       	push	r10
 340:	df 92       	push	r13
 342:	cf 92       	push	r12
 344:	0e 94 32 02 	call	0x464	; 0x464 <sprintf>
				sendmsg(data);
 348:	82 2d       	mov	r24, r2
 34a:	93 2d       	mov	r25, r3
 34c:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0e c0       	rjmp	.+28     	; 0x37a <main+0x1b4>
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 35e:	50 92 3d 02 	sts	0x023D, r5	; 0x80023d <__data_end+0x1>
 362:	40 92 3c 02 	sts	0x023C, r4	; 0x80023c <__data_end>
				break;
 366:	09 c0       	rjmp	.+18     	; 0x37a <main+0x1b4>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 368:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__data_end+0x1>
 36c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
				break;
 370:	04 c0       	rjmp	.+8      	; 0x37a <main+0x1b4>
				//report current value of OCR2A register
				//sprintf();
				break;
				
				default:
				sendmsg(msg1); /*send default message*/
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
			}
		}
		
		if(new_adc_data) {
 37a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <new_adc_data>
 37e:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <new_adc_data+0x1>
 382:	89 2b       	or	r24, r25
 384:	09 f4       	brne	.+2      	; 0x388 <main+0x1c2>
 386:	57 cf       	rjmp	.-338    	; 0x236 <main+0x70>
			if(enContDisplay) {
				//send new adc data to usart
			}
			new_adc_data=0;
 388:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <new_adc_data+0x1>
 38c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <new_adc_data>
 390:	52 cf       	rjmp	.-348    	; 0x236 <main+0x70>

00000392 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 3a2:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <sndcntr>
 3a6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <qcntr>
 3aa:	8e 17       	cp	r24, r30
 3ac:	51 f0       	breq	.+20     	; 0x3c2 <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	8e 0f       	add	r24, r30
 3b2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <sndcntr>
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	e0 5c       	subi	r30, 0xC0	; 192
 3ba:	fd 4f       	sbci	r31, 0xFD	; 253
 3bc:	80 81       	ld	r24, Z
 3be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	8f 91       	pop	r24
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
	
	adc_reading = ADC;
 3e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 3e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 3e8:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <adc_reading+0x1>
 3ec:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <adc_reading>
	new_adc_data = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <new_adc_data+0x1>
 3f8:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <new_adc_data>
	switch(input) {
 3fc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <input>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	41 f0       	breq	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	18 f0       	brcs	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	49 f0       	breq	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 414:	81 e8       	ldi	r24, 0x81	; 129
 416:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 41c:	82 e8       	ldi	r24, 0x82	; 130
 41e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 422:	03 c0       	rjmp	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 424:	82 e8       	ldi	r24, 0x82	; 130
 426:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	}
	TIFR0 = TIFR0 & ~(1<<0); //clears Counter0 overflow
 42a:	a8 98       	cbi	0x15, 0	; 21
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__tablejump2__>:
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	05 90       	lpm	r0, Z+
 440:	f4 91       	lpm	r31, Z
 442:	e0 2d       	mov	r30, r0
 444:	09 94       	ijmp

00000446 <__umulhisi3>:
 446:	a2 9f       	mul	r26, r18
 448:	b0 01       	movw	r22, r0
 44a:	b3 9f       	mul	r27, r19
 44c:	c0 01       	movw	r24, r0
 44e:	a3 9f       	mul	r26, r19
 450:	70 0d       	add	r23, r0
 452:	81 1d       	adc	r24, r1
 454:	11 24       	eor	r1, r1
 456:	91 1d       	adc	r25, r1
 458:	b2 9f       	mul	r27, r18
 45a:	70 0d       	add	r23, r0
 45c:	81 1d       	adc	r24, r1
 45e:	11 24       	eor	r1, r1
 460:	91 1d       	adc	r25, r1
 462:	08 95       	ret

00000464 <sprintf>:
 464:	ae e0       	ldi	r26, 0x0E	; 14
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	e8 e3       	ldi	r30, 0x38	; 56
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__prologue_saves__+0x1c>
 470:	0d 89       	ldd	r16, Y+21	; 0x15
 472:	1e 89       	ldd	r17, Y+22	; 0x16
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	8c 83       	std	Y+4, r24	; 0x04
 478:	1a 83       	std	Y+2, r17	; 0x02
 47a:	09 83       	std	Y+1, r16	; 0x01
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	9f e7       	ldi	r25, 0x7F	; 127
 480:	9e 83       	std	Y+6, r25	; 0x06
 482:	8d 83       	std	Y+5, r24	; 0x05
 484:	ae 01       	movw	r20, r28
 486:	47 5e       	subi	r20, 0xE7	; 231
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	6f 89       	ldd	r22, Y+23	; 0x17
 48c:	78 8d       	ldd	r23, Y+24	; 0x18
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	0e 94 54 02 	call	0x4a8	; 0x4a8 <vfprintf>
 496:	ef 81       	ldd	r30, Y+7	; 0x07
 498:	f8 85       	ldd	r31, Y+8	; 0x08
 49a:	e0 0f       	add	r30, r16
 49c:	f1 1f       	adc	r31, r17
 49e:	10 82       	st	Z, r1
 4a0:	2e 96       	adiw	r28, 0x0e	; 14
 4a2:	e4 e0       	ldi	r30, 0x04	; 4
 4a4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__epilogue_restores__+0x1c>

000004a8 <vfprintf>:
 4a8:	ab e0       	ldi	r26, 0x0B	; 11
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	ea e5       	ldi	r30, 0x5A	; 90
 4ae:	f2 e0       	ldi	r31, 0x02	; 2
 4b0:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__prologue_saves__>
 4b4:	6c 01       	movw	r12, r24
 4b6:	7b 01       	movw	r14, r22
 4b8:	8a 01       	movw	r16, r20
 4ba:	fc 01       	movw	r30, r24
 4bc:	17 82       	std	Z+7, r1	; 0x07
 4be:	16 82       	std	Z+6, r1	; 0x06
 4c0:	83 81       	ldd	r24, Z+3	; 0x03
 4c2:	81 ff       	sbrs	r24, 1
 4c4:	cc c1       	rjmp	.+920    	; 0x85e <vfprintf+0x3b6>
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	3c 01       	movw	r6, r24
 4cc:	f6 01       	movw	r30, r12
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	f7 01       	movw	r30, r14
 4d2:	93 fd       	sbrc	r25, 3
 4d4:	85 91       	lpm	r24, Z+
 4d6:	93 ff       	sbrs	r25, 3
 4d8:	81 91       	ld	r24, Z+
 4da:	7f 01       	movw	r14, r30
 4dc:	88 23       	and	r24, r24
 4de:	09 f4       	brne	.+2      	; 0x4e2 <vfprintf+0x3a>
 4e0:	ba c1       	rjmp	.+884    	; 0x856 <vfprintf+0x3ae>
 4e2:	85 32       	cpi	r24, 0x25	; 37
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <vfprintf+0x4c>
 4e6:	93 fd       	sbrc	r25, 3
 4e8:	85 91       	lpm	r24, Z+
 4ea:	93 ff       	sbrs	r25, 3
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	85 32       	cpi	r24, 0x25	; 37
 4f2:	29 f4       	brne	.+10     	; 0x4fe <vfprintf+0x56>
 4f4:	b6 01       	movw	r22, r12
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 4fc:	e7 cf       	rjmp	.-50     	; 0x4cc <vfprintf+0x24>
 4fe:	91 2c       	mov	r9, r1
 500:	21 2c       	mov	r2, r1
 502:	31 2c       	mov	r3, r1
 504:	ff e1       	ldi	r31, 0x1F	; 31
 506:	f3 15       	cp	r31, r3
 508:	d8 f0       	brcs	.+54     	; 0x540 <vfprintf+0x98>
 50a:	8b 32       	cpi	r24, 0x2B	; 43
 50c:	79 f0       	breq	.+30     	; 0x52c <vfprintf+0x84>
 50e:	38 f4       	brcc	.+14     	; 0x51e <vfprintf+0x76>
 510:	80 32       	cpi	r24, 0x20	; 32
 512:	79 f0       	breq	.+30     	; 0x532 <vfprintf+0x8a>
 514:	83 32       	cpi	r24, 0x23	; 35
 516:	a1 f4       	brne	.+40     	; 0x540 <vfprintf+0x98>
 518:	23 2d       	mov	r18, r3
 51a:	20 61       	ori	r18, 0x10	; 16
 51c:	1d c0       	rjmp	.+58     	; 0x558 <vfprintf+0xb0>
 51e:	8d 32       	cpi	r24, 0x2D	; 45
 520:	61 f0       	breq	.+24     	; 0x53a <vfprintf+0x92>
 522:	80 33       	cpi	r24, 0x30	; 48
 524:	69 f4       	brne	.+26     	; 0x540 <vfprintf+0x98>
 526:	23 2d       	mov	r18, r3
 528:	21 60       	ori	r18, 0x01	; 1
 52a:	16 c0       	rjmp	.+44     	; 0x558 <vfprintf+0xb0>
 52c:	83 2d       	mov	r24, r3
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	38 2e       	mov	r3, r24
 532:	e3 2d       	mov	r30, r3
 534:	e4 60       	ori	r30, 0x04	; 4
 536:	3e 2e       	mov	r3, r30
 538:	2a c0       	rjmp	.+84     	; 0x58e <vfprintf+0xe6>
 53a:	f3 2d       	mov	r31, r3
 53c:	f8 60       	ori	r31, 0x08	; 8
 53e:	1d c0       	rjmp	.+58     	; 0x57a <vfprintf+0xd2>
 540:	37 fc       	sbrc	r3, 7
 542:	2d c0       	rjmp	.+90     	; 0x59e <vfprintf+0xf6>
 544:	20 ed       	ldi	r18, 0xD0	; 208
 546:	28 0f       	add	r18, r24
 548:	2a 30       	cpi	r18, 0x0A	; 10
 54a:	40 f0       	brcs	.+16     	; 0x55c <vfprintf+0xb4>
 54c:	8e 32       	cpi	r24, 0x2E	; 46
 54e:	b9 f4       	brne	.+46     	; 0x57e <vfprintf+0xd6>
 550:	36 fc       	sbrc	r3, 6
 552:	81 c1       	rjmp	.+770    	; 0x856 <vfprintf+0x3ae>
 554:	23 2d       	mov	r18, r3
 556:	20 64       	ori	r18, 0x40	; 64
 558:	32 2e       	mov	r3, r18
 55a:	19 c0       	rjmp	.+50     	; 0x58e <vfprintf+0xe6>
 55c:	36 fe       	sbrs	r3, 6
 55e:	06 c0       	rjmp	.+12     	; 0x56c <vfprintf+0xc4>
 560:	8a e0       	ldi	r24, 0x0A	; 10
 562:	98 9e       	mul	r9, r24
 564:	20 0d       	add	r18, r0
 566:	11 24       	eor	r1, r1
 568:	92 2e       	mov	r9, r18
 56a:	11 c0       	rjmp	.+34     	; 0x58e <vfprintf+0xe6>
 56c:	ea e0       	ldi	r30, 0x0A	; 10
 56e:	2e 9e       	mul	r2, r30
 570:	20 0d       	add	r18, r0
 572:	11 24       	eor	r1, r1
 574:	22 2e       	mov	r2, r18
 576:	f3 2d       	mov	r31, r3
 578:	f0 62       	ori	r31, 0x20	; 32
 57a:	3f 2e       	mov	r3, r31
 57c:	08 c0       	rjmp	.+16     	; 0x58e <vfprintf+0xe6>
 57e:	8c 36       	cpi	r24, 0x6C	; 108
 580:	21 f4       	brne	.+8      	; 0x58a <vfprintf+0xe2>
 582:	83 2d       	mov	r24, r3
 584:	80 68       	ori	r24, 0x80	; 128
 586:	38 2e       	mov	r3, r24
 588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0xe6>
 58a:	88 36       	cpi	r24, 0x68	; 104
 58c:	41 f4       	brne	.+16     	; 0x59e <vfprintf+0xf6>
 58e:	f7 01       	movw	r30, r14
 590:	93 fd       	sbrc	r25, 3
 592:	85 91       	lpm	r24, Z+
 594:	93 ff       	sbrs	r25, 3
 596:	81 91       	ld	r24, Z+
 598:	7f 01       	movw	r14, r30
 59a:	81 11       	cpse	r24, r1
 59c:	b3 cf       	rjmp	.-154    	; 0x504 <vfprintf+0x5c>
 59e:	98 2f       	mov	r25, r24
 5a0:	9f 7d       	andi	r25, 0xDF	; 223
 5a2:	95 54       	subi	r25, 0x45	; 69
 5a4:	93 30       	cpi	r25, 0x03	; 3
 5a6:	28 f4       	brcc	.+10     	; 0x5b2 <vfprintf+0x10a>
 5a8:	0c 5f       	subi	r16, 0xFC	; 252
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	9f e3       	ldi	r25, 0x3F	; 63
 5ae:	99 83       	std	Y+1, r25	; 0x01
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <vfprintf+0x124>
 5b2:	83 36       	cpi	r24, 0x63	; 99
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <vfprintf+0x11a>
 5b6:	83 37       	cpi	r24, 0x73	; 115
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <vfprintf+0x12e>
 5ba:	83 35       	cpi	r24, 0x53	; 83
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <vfprintf+0x118>
 5be:	59 c0       	rjmp	.+178    	; 0x672 <vfprintf+0x1ca>
 5c0:	21 c0       	rjmp	.+66     	; 0x604 <vfprintf+0x15c>
 5c2:	f8 01       	movw	r30, r16
 5c4:	80 81       	ld	r24, Z
 5c6:	89 83       	std	Y+1, r24	; 0x01
 5c8:	0e 5f       	subi	r16, 0xFE	; 254
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	88 24       	eor	r8, r8
 5ce:	83 94       	inc	r8
 5d0:	91 2c       	mov	r9, r1
 5d2:	53 01       	movw	r10, r6
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <vfprintf+0x154>
 5d6:	28 01       	movw	r4, r16
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	4f 0e       	add	r4, r31
 5dc:	51 1c       	adc	r5, r1
 5de:	f8 01       	movw	r30, r16
 5e0:	a0 80       	ld	r10, Z
 5e2:	b1 80       	ldd	r11, Z+1	; 0x01
 5e4:	36 fe       	sbrs	r3, 6
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <vfprintf+0x146>
 5e8:	69 2d       	mov	r22, r9
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <vfprintf+0x14a>
 5ee:	6f ef       	ldi	r22, 0xFF	; 255
 5f0:	7f ef       	ldi	r23, 0xFF	; 255
 5f2:	c5 01       	movw	r24, r10
 5f4:	0e 94 40 04 	call	0x880	; 0x880 <strnlen>
 5f8:	4c 01       	movw	r8, r24
 5fa:	82 01       	movw	r16, r4
 5fc:	f3 2d       	mov	r31, r3
 5fe:	ff 77       	andi	r31, 0x7F	; 127
 600:	3f 2e       	mov	r3, r31
 602:	16 c0       	rjmp	.+44     	; 0x630 <vfprintf+0x188>
 604:	28 01       	movw	r4, r16
 606:	22 e0       	ldi	r18, 0x02	; 2
 608:	42 0e       	add	r4, r18
 60a:	51 1c       	adc	r5, r1
 60c:	f8 01       	movw	r30, r16
 60e:	a0 80       	ld	r10, Z
 610:	b1 80       	ldd	r11, Z+1	; 0x01
 612:	36 fe       	sbrs	r3, 6
 614:	03 c0       	rjmp	.+6      	; 0x61c <vfprintf+0x174>
 616:	69 2d       	mov	r22, r9
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0x178>
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	7f ef       	ldi	r23, 0xFF	; 255
 620:	c5 01       	movw	r24, r10
 622:	0e 94 35 04 	call	0x86a	; 0x86a <strnlen_P>
 626:	4c 01       	movw	r8, r24
 628:	f3 2d       	mov	r31, r3
 62a:	f0 68       	ori	r31, 0x80	; 128
 62c:	3f 2e       	mov	r3, r31
 62e:	82 01       	movw	r16, r4
 630:	33 fc       	sbrc	r3, 3
 632:	1b c0       	rjmp	.+54     	; 0x66a <vfprintf+0x1c2>
 634:	82 2d       	mov	r24, r2
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	88 16       	cp	r8, r24
 63a:	99 06       	cpc	r9, r25
 63c:	b0 f4       	brcc	.+44     	; 0x66a <vfprintf+0x1c2>
 63e:	b6 01       	movw	r22, r12
 640:	80 e2       	ldi	r24, 0x20	; 32
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 648:	2a 94       	dec	r2
 64a:	f4 cf       	rjmp	.-24     	; 0x634 <vfprintf+0x18c>
 64c:	f5 01       	movw	r30, r10
 64e:	37 fc       	sbrc	r3, 7
 650:	85 91       	lpm	r24, Z+
 652:	37 fe       	sbrs	r3, 7
 654:	81 91       	ld	r24, Z+
 656:	5f 01       	movw	r10, r30
 658:	b6 01       	movw	r22, r12
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 660:	21 10       	cpse	r2, r1
 662:	2a 94       	dec	r2
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	82 1a       	sub	r8, r18
 668:	91 08       	sbc	r9, r1
 66a:	81 14       	cp	r8, r1
 66c:	91 04       	cpc	r9, r1
 66e:	71 f7       	brne	.-36     	; 0x64c <vfprintf+0x1a4>
 670:	e8 c0       	rjmp	.+464    	; 0x842 <vfprintf+0x39a>
 672:	84 36       	cpi	r24, 0x64	; 100
 674:	11 f0       	breq	.+4      	; 0x67a <vfprintf+0x1d2>
 676:	89 36       	cpi	r24, 0x69	; 105
 678:	41 f5       	brne	.+80     	; 0x6ca <vfprintf+0x222>
 67a:	f8 01       	movw	r30, r16
 67c:	37 fe       	sbrs	r3, 7
 67e:	07 c0       	rjmp	.+14     	; 0x68e <vfprintf+0x1e6>
 680:	60 81       	ld	r22, Z
 682:	71 81       	ldd	r23, Z+1	; 0x01
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	0c 5f       	subi	r16, 0xFC	; 252
 68a:	1f 4f       	sbci	r17, 0xFF	; 255
 68c:	08 c0       	rjmp	.+16     	; 0x69e <vfprintf+0x1f6>
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	07 2e       	mov	r0, r23
 694:	00 0c       	add	r0, r0
 696:	88 0b       	sbc	r24, r24
 698:	99 0b       	sbc	r25, r25
 69a:	0e 5f       	subi	r16, 0xFE	; 254
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	f3 2d       	mov	r31, r3
 6a0:	ff 76       	andi	r31, 0x6F	; 111
 6a2:	3f 2e       	mov	r3, r31
 6a4:	97 ff       	sbrs	r25, 7
 6a6:	09 c0       	rjmp	.+18     	; 0x6ba <vfprintf+0x212>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	f0 68       	ori	r31, 0x80	; 128
 6b8:	3f 2e       	mov	r3, r31
 6ba:	2a e0       	ldi	r18, 0x0A	; 10
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	a3 01       	movw	r20, r6
 6c0:	0e 94 87 04 	call	0x90e	; 0x90e <__ultoa_invert>
 6c4:	88 2e       	mov	r8, r24
 6c6:	86 18       	sub	r8, r6
 6c8:	45 c0       	rjmp	.+138    	; 0x754 <vfprintf+0x2ac>
 6ca:	85 37       	cpi	r24, 0x75	; 117
 6cc:	31 f4       	brne	.+12     	; 0x6da <vfprintf+0x232>
 6ce:	23 2d       	mov	r18, r3
 6d0:	2f 7e       	andi	r18, 0xEF	; 239
 6d2:	b2 2e       	mov	r11, r18
 6d4:	2a e0       	ldi	r18, 0x0A	; 10
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	25 c0       	rjmp	.+74     	; 0x724 <vfprintf+0x27c>
 6da:	93 2d       	mov	r25, r3
 6dc:	99 7f       	andi	r25, 0xF9	; 249
 6de:	b9 2e       	mov	r11, r25
 6e0:	8f 36       	cpi	r24, 0x6F	; 111
 6e2:	c1 f0       	breq	.+48     	; 0x714 <vfprintf+0x26c>
 6e4:	18 f4       	brcc	.+6      	; 0x6ec <vfprintf+0x244>
 6e6:	88 35       	cpi	r24, 0x58	; 88
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x260>
 6ea:	b5 c0       	rjmp	.+362    	; 0x856 <vfprintf+0x3ae>
 6ec:	80 37       	cpi	r24, 0x70	; 112
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <vfprintf+0x24e>
 6f0:	88 37       	cpi	r24, 0x78	; 120
 6f2:	21 f0       	breq	.+8      	; 0x6fc <vfprintf+0x254>
 6f4:	b0 c0       	rjmp	.+352    	; 0x856 <vfprintf+0x3ae>
 6f6:	e9 2f       	mov	r30, r25
 6f8:	e0 61       	ori	r30, 0x10	; 16
 6fa:	be 2e       	mov	r11, r30
 6fc:	b4 fe       	sbrs	r11, 4
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x272>
 700:	fb 2d       	mov	r31, r11
 702:	f4 60       	ori	r31, 0x04	; 4
 704:	bf 2e       	mov	r11, r31
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x272>
 708:	34 fe       	sbrs	r3, 4
 70a:	0a c0       	rjmp	.+20     	; 0x720 <vfprintf+0x278>
 70c:	29 2f       	mov	r18, r25
 70e:	26 60       	ori	r18, 0x06	; 6
 710:	b2 2e       	mov	r11, r18
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0x278>
 714:	28 e0       	ldi	r18, 0x08	; 8
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	05 c0       	rjmp	.+10     	; 0x724 <vfprintf+0x27c>
 71a:	20 e1       	ldi	r18, 0x10	; 16
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x27c>
 720:	20 e1       	ldi	r18, 0x10	; 16
 722:	32 e0       	ldi	r19, 0x02	; 2
 724:	f8 01       	movw	r30, r16
 726:	b7 fe       	sbrs	r11, 7
 728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x290>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	82 81       	ldd	r24, Z+2	; 0x02
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	0c 5f       	subi	r16, 0xFC	; 252
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x29c>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	a3 01       	movw	r20, r6
 746:	0e 94 87 04 	call	0x90e	; 0x90e <__ultoa_invert>
 74a:	88 2e       	mov	r8, r24
 74c:	86 18       	sub	r8, r6
 74e:	fb 2d       	mov	r31, r11
 750:	ff 77       	andi	r31, 0x7F	; 127
 752:	3f 2e       	mov	r3, r31
 754:	36 fe       	sbrs	r3, 6
 756:	0d c0       	rjmp	.+26     	; 0x772 <vfprintf+0x2ca>
 758:	23 2d       	mov	r18, r3
 75a:	2e 7f       	andi	r18, 0xFE	; 254
 75c:	a2 2e       	mov	r10, r18
 75e:	89 14       	cp	r8, r9
 760:	58 f4       	brcc	.+22     	; 0x778 <vfprintf+0x2d0>
 762:	34 fe       	sbrs	r3, 4
 764:	0b c0       	rjmp	.+22     	; 0x77c <vfprintf+0x2d4>
 766:	32 fc       	sbrc	r3, 2
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x2d4>
 76a:	83 2d       	mov	r24, r3
 76c:	8e 7e       	andi	r24, 0xEE	; 238
 76e:	a8 2e       	mov	r10, r24
 770:	05 c0       	rjmp	.+10     	; 0x77c <vfprintf+0x2d4>
 772:	b8 2c       	mov	r11, r8
 774:	a3 2c       	mov	r10, r3
 776:	03 c0       	rjmp	.+6      	; 0x77e <vfprintf+0x2d6>
 778:	b8 2c       	mov	r11, r8
 77a:	01 c0       	rjmp	.+2      	; 0x77e <vfprintf+0x2d6>
 77c:	b9 2c       	mov	r11, r9
 77e:	a4 fe       	sbrs	r10, 4
 780:	0f c0       	rjmp	.+30     	; 0x7a0 <vfprintf+0x2f8>
 782:	fe 01       	movw	r30, r28
 784:	e8 0d       	add	r30, r8
 786:	f1 1d       	adc	r31, r1
 788:	80 81       	ld	r24, Z
 78a:	80 33       	cpi	r24, 0x30	; 48
 78c:	21 f4       	brne	.+8      	; 0x796 <vfprintf+0x2ee>
 78e:	9a 2d       	mov	r25, r10
 790:	99 7e       	andi	r25, 0xE9	; 233
 792:	a9 2e       	mov	r10, r25
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <vfprintf+0x300>
 796:	a2 fe       	sbrs	r10, 2
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x2fe>
 79a:	b3 94       	inc	r11
 79c:	b3 94       	inc	r11
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <vfprintf+0x300>
 7a0:	8a 2d       	mov	r24, r10
 7a2:	86 78       	andi	r24, 0x86	; 134
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <vfprintf+0x300>
 7a6:	b3 94       	inc	r11
 7a8:	a3 fc       	sbrc	r10, 3
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <vfprintf+0x326>
 7ac:	a0 fe       	sbrs	r10, 0
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x314>
 7b0:	b2 14       	cp	r11, r2
 7b2:	88 f4       	brcc	.+34     	; 0x7d6 <vfprintf+0x32e>
 7b4:	28 0c       	add	r2, r8
 7b6:	92 2c       	mov	r9, r2
 7b8:	9b 18       	sub	r9, r11
 7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <vfprintf+0x330>
 7bc:	b2 14       	cp	r11, r2
 7be:	60 f4       	brcc	.+24     	; 0x7d8 <vfprintf+0x330>
 7c0:	b6 01       	movw	r22, r12
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 7ca:	b3 94       	inc	r11
 7cc:	f7 cf       	rjmp	.-18     	; 0x7bc <vfprintf+0x314>
 7ce:	b2 14       	cp	r11, r2
 7d0:	18 f4       	brcc	.+6      	; 0x7d8 <vfprintf+0x330>
 7d2:	2b 18       	sub	r2, r11
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0x332>
 7d6:	98 2c       	mov	r9, r8
 7d8:	21 2c       	mov	r2, r1
 7da:	a4 fe       	sbrs	r10, 4
 7dc:	10 c0       	rjmp	.+32     	; 0x7fe <vfprintf+0x356>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e3       	ldi	r24, 0x30	; 48
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 7e8:	a2 fe       	sbrs	r10, 2
 7ea:	17 c0       	rjmp	.+46     	; 0x81a <vfprintf+0x372>
 7ec:	a1 fc       	sbrc	r10, 1
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x34e>
 7f0:	88 e7       	ldi	r24, 0x78	; 120
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x352>
 7f6:	88 e5       	ldi	r24, 0x58	; 88
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b6 01       	movw	r22, r12
 7fc:	0c c0       	rjmp	.+24     	; 0x816 <vfprintf+0x36e>
 7fe:	8a 2d       	mov	r24, r10
 800:	86 78       	andi	r24, 0x86	; 134
 802:	59 f0       	breq	.+22     	; 0x81a <vfprintf+0x372>
 804:	a1 fe       	sbrs	r10, 1
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0x364>
 808:	8b e2       	ldi	r24, 0x2B	; 43
 80a:	01 c0       	rjmp	.+2      	; 0x80e <vfprintf+0x366>
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	a7 fc       	sbrc	r10, 7
 810:	8d e2       	ldi	r24, 0x2D	; 45
 812:	b6 01       	movw	r22, r12
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 81a:	89 14       	cp	r8, r9
 81c:	38 f4       	brcc	.+14     	; 0x82c <vfprintf+0x384>
 81e:	b6 01       	movw	r22, r12
 820:	80 e3       	ldi	r24, 0x30	; 48
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 828:	9a 94       	dec	r9
 82a:	f7 cf       	rjmp	.-18     	; 0x81a <vfprintf+0x372>
 82c:	8a 94       	dec	r8
 82e:	f3 01       	movw	r30, r6
 830:	e8 0d       	add	r30, r8
 832:	f1 1d       	adc	r31, r1
 834:	80 81       	ld	r24, Z
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 83e:	81 10       	cpse	r8, r1
 840:	f5 cf       	rjmp	.-22     	; 0x82c <vfprintf+0x384>
 842:	22 20       	and	r2, r2
 844:	09 f4       	brne	.+2      	; 0x848 <vfprintf+0x3a0>
 846:	42 ce       	rjmp	.-892    	; 0x4cc <vfprintf+0x24>
 848:	b6 01       	movw	r22, r12
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 852:	2a 94       	dec	r2
 854:	f6 cf       	rjmp	.-20     	; 0x842 <vfprintf+0x39a>
 856:	f6 01       	movw	r30, r12
 858:	86 81       	ldd	r24, Z+6	; 0x06
 85a:	97 81       	ldd	r25, Z+7	; 0x07
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x3ba>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	9f ef       	ldi	r25, 0xFF	; 255
 862:	2b 96       	adiw	r28, 0x0b	; 11
 864:	e2 e1       	ldi	r30, 0x12	; 18
 866:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__epilogue_restores__>

0000086a <strnlen_P>:
 86a:	fc 01       	movw	r30, r24
 86c:	05 90       	lpm	r0, Z+
 86e:	61 50       	subi	r22, 0x01	; 1
 870:	70 40       	sbci	r23, 0x00	; 0
 872:	01 10       	cpse	r0, r1
 874:	d8 f7       	brcc	.-10     	; 0x86c <strnlen_P+0x2>
 876:	80 95       	com	r24
 878:	90 95       	com	r25
 87a:	8e 0f       	add	r24, r30
 87c:	9f 1f       	adc	r25, r31
 87e:	08 95       	ret

00000880 <strnlen>:
 880:	fc 01       	movw	r30, r24
 882:	61 50       	subi	r22, 0x01	; 1
 884:	70 40       	sbci	r23, 0x00	; 0
 886:	01 90       	ld	r0, Z+
 888:	01 10       	cpse	r0, r1
 88a:	d8 f7       	brcc	.-10     	; 0x882 <strnlen+0x2>
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	8e 0f       	add	r24, r30
 892:	9f 1f       	adc	r25, r31
 894:	08 95       	ret

00000896 <fputc>:
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	fb 01       	movw	r30, r22
 8a0:	23 81       	ldd	r18, Z+3	; 0x03
 8a2:	21 fd       	sbrc	r18, 1
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <fputc+0x16>
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	9f ef       	ldi	r25, 0xFF	; 255
 8aa:	2c c0       	rjmp	.+88     	; 0x904 <__stack+0x5>
 8ac:	22 ff       	sbrs	r18, 2
 8ae:	16 c0       	rjmp	.+44     	; 0x8dc <fputc+0x46>
 8b0:	46 81       	ldd	r20, Z+6	; 0x06
 8b2:	57 81       	ldd	r21, Z+7	; 0x07
 8b4:	24 81       	ldd	r18, Z+4	; 0x04
 8b6:	35 81       	ldd	r19, Z+5	; 0x05
 8b8:	42 17       	cp	r20, r18
 8ba:	53 07       	cpc	r21, r19
 8bc:	44 f4       	brge	.+16     	; 0x8ce <fputc+0x38>
 8be:	a0 81       	ld	r26, Z
 8c0:	b1 81       	ldd	r27, Z+1	; 0x01
 8c2:	9d 01       	movw	r18, r26
 8c4:	2f 5f       	subi	r18, 0xFF	; 255
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	31 83       	std	Z+1, r19	; 0x01
 8ca:	20 83       	st	Z, r18
 8cc:	8c 93       	st	X, r24
 8ce:	26 81       	ldd	r18, Z+6	; 0x06
 8d0:	37 81       	ldd	r19, Z+7	; 0x07
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	37 83       	std	Z+7, r19	; 0x07
 8d8:	26 83       	std	Z+6, r18	; 0x06
 8da:	14 c0       	rjmp	.+40     	; 0x904 <__stack+0x5>
 8dc:	8b 01       	movw	r16, r22
 8de:	ec 01       	movw	r28, r24
 8e0:	fb 01       	movw	r30, r22
 8e2:	00 84       	ldd	r0, Z+8	; 0x08
 8e4:	f1 85       	ldd	r31, Z+9	; 0x09
 8e6:	e0 2d       	mov	r30, r0
 8e8:	09 95       	icall
 8ea:	89 2b       	or	r24, r25
 8ec:	e1 f6       	brne	.-72     	; 0x8a6 <fputc+0x10>
 8ee:	d8 01       	movw	r26, r16
 8f0:	16 96       	adiw	r26, 0x06	; 6
 8f2:	8d 91       	ld	r24, X+
 8f4:	9c 91       	ld	r25, X
 8f6:	17 97       	sbiw	r26, 0x07	; 7
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	17 96       	adiw	r26, 0x07	; 7
 8fc:	9c 93       	st	X, r25
 8fe:	8e 93       	st	-X, r24
 900:	16 97       	sbiw	r26, 0x06	; 6
 902:	ce 01       	movw	r24, r28
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <__ultoa_invert>:
 90e:	fa 01       	movw	r30, r20
 910:	aa 27       	eor	r26, r26
 912:	28 30       	cpi	r18, 0x08	; 8
 914:	51 f1       	breq	.+84     	; 0x96a <__ultoa_invert+0x5c>
 916:	20 31       	cpi	r18, 0x10	; 16
 918:	81 f1       	breq	.+96     	; 0x97a <__ultoa_invert+0x6c>
 91a:	e8 94       	clt
 91c:	6f 93       	push	r22
 91e:	6e 7f       	andi	r22, 0xFE	; 254
 920:	6e 5f       	subi	r22, 0xFE	; 254
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	af 4f       	sbci	r26, 0xFF	; 255
 92a:	b1 e0       	ldi	r27, 0x01	; 1
 92c:	3e d0       	rcall	.+124    	; 0x9aa <__ultoa_invert+0x9c>
 92e:	b4 e0       	ldi	r27, 0x04	; 4
 930:	3c d0       	rcall	.+120    	; 0x9aa <__ultoa_invert+0x9c>
 932:	67 0f       	add	r22, r23
 934:	78 1f       	adc	r23, r24
 936:	89 1f       	adc	r24, r25
 938:	9a 1f       	adc	r25, r26
 93a:	a1 1d       	adc	r26, r1
 93c:	68 0f       	add	r22, r24
 93e:	79 1f       	adc	r23, r25
 940:	8a 1f       	adc	r24, r26
 942:	91 1d       	adc	r25, r1
 944:	a1 1d       	adc	r26, r1
 946:	6a 0f       	add	r22, r26
 948:	71 1d       	adc	r23, r1
 94a:	81 1d       	adc	r24, r1
 94c:	91 1d       	adc	r25, r1
 94e:	a1 1d       	adc	r26, r1
 950:	20 d0       	rcall	.+64     	; 0x992 <__ultoa_invert+0x84>
 952:	09 f4       	brne	.+2      	; 0x956 <__ultoa_invert+0x48>
 954:	68 94       	set
 956:	3f 91       	pop	r19
 958:	2a e0       	ldi	r18, 0x0A	; 10
 95a:	26 9f       	mul	r18, r22
 95c:	11 24       	eor	r1, r1
 95e:	30 19       	sub	r19, r0
 960:	30 5d       	subi	r19, 0xD0	; 208
 962:	31 93       	st	Z+, r19
 964:	de f6       	brtc	.-74     	; 0x91c <__ultoa_invert+0xe>
 966:	cf 01       	movw	r24, r30
 968:	08 95       	ret
 96a:	46 2f       	mov	r20, r22
 96c:	47 70       	andi	r20, 0x07	; 7
 96e:	40 5d       	subi	r20, 0xD0	; 208
 970:	41 93       	st	Z+, r20
 972:	b3 e0       	ldi	r27, 0x03	; 3
 974:	0f d0       	rcall	.+30     	; 0x994 <__ultoa_invert+0x86>
 976:	c9 f7       	brne	.-14     	; 0x96a <__ultoa_invert+0x5c>
 978:	f6 cf       	rjmp	.-20     	; 0x966 <__ultoa_invert+0x58>
 97a:	46 2f       	mov	r20, r22
 97c:	4f 70       	andi	r20, 0x0F	; 15
 97e:	40 5d       	subi	r20, 0xD0	; 208
 980:	4a 33       	cpi	r20, 0x3A	; 58
 982:	18 f0       	brcs	.+6      	; 0x98a <__ultoa_invert+0x7c>
 984:	49 5d       	subi	r20, 0xD9	; 217
 986:	31 fd       	sbrc	r19, 1
 988:	40 52       	subi	r20, 0x20	; 32
 98a:	41 93       	st	Z+, r20
 98c:	02 d0       	rcall	.+4      	; 0x992 <__ultoa_invert+0x84>
 98e:	a9 f7       	brne	.-22     	; 0x97a <__ultoa_invert+0x6c>
 990:	ea cf       	rjmp	.-44     	; 0x966 <__ultoa_invert+0x58>
 992:	b4 e0       	ldi	r27, 0x04	; 4
 994:	a6 95       	lsr	r26
 996:	97 95       	ror	r25
 998:	87 95       	ror	r24
 99a:	77 95       	ror	r23
 99c:	67 95       	ror	r22
 99e:	ba 95       	dec	r27
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__ultoa_invert+0x86>
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	61 05       	cpc	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	08 95       	ret
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	0a 2e       	mov	r0, r26
 9b0:	06 94       	lsr	r0
 9b2:	57 95       	ror	r21
 9b4:	47 95       	ror	r20
 9b6:	37 95       	ror	r19
 9b8:	27 95       	ror	r18
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0xa2>
 9be:	62 0f       	add	r22, r18
 9c0:	73 1f       	adc	r23, r19
 9c2:	84 1f       	adc	r24, r20
 9c4:	95 1f       	adc	r25, r21
 9c6:	a0 1d       	adc	r26, r0
 9c8:	08 95       	ret

000009ca <__prologue_saves__>:
 9ca:	2f 92       	push	r2
 9cc:	3f 92       	push	r3
 9ce:	4f 92       	push	r4
 9d0:	5f 92       	push	r5
 9d2:	6f 92       	push	r6
 9d4:	7f 92       	push	r7
 9d6:	8f 92       	push	r8
 9d8:	9f 92       	push	r9
 9da:	af 92       	push	r10
 9dc:	bf 92       	push	r11
 9de:	cf 92       	push	r12
 9e0:	df 92       	push	r13
 9e2:	ef 92       	push	r14
 9e4:	ff 92       	push	r15
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	cd b7       	in	r28, 0x3d	; 61
 9f0:	de b7       	in	r29, 0x3e	; 62
 9f2:	ca 1b       	sub	r28, r26
 9f4:	db 0b       	sbc	r29, r27
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
 a00:	09 94       	ijmp

00000a02 <__epilogue_restores__>:
 a02:	2a 88       	ldd	r2, Y+18	; 0x12
 a04:	39 88       	ldd	r3, Y+17	; 0x11
 a06:	48 88       	ldd	r4, Y+16	; 0x10
 a08:	5f 84       	ldd	r5, Y+15	; 0x0f
 a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a10:	9b 84       	ldd	r9, Y+11	; 0x0b
 a12:	aa 84       	ldd	r10, Y+10	; 0x0a
 a14:	b9 84       	ldd	r11, Y+9	; 0x09
 a16:	c8 84       	ldd	r12, Y+8	; 0x08
 a18:	df 80       	ldd	r13, Y+7	; 0x07
 a1a:	ee 80       	ldd	r14, Y+6	; 0x06
 a1c:	fd 80       	ldd	r15, Y+5	; 0x05
 a1e:	0c 81       	ldd	r16, Y+4	; 0x04
 a20:	1b 81       	ldd	r17, Y+3	; 0x03
 a22:	aa 81       	ldd	r26, Y+2	; 0x02
 a24:	b9 81       	ldd	r27, Y+1	; 0x01
 a26:	ce 0f       	add	r28, r30
 a28:	d1 1d       	adc	r29, r1
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	ed 01       	movw	r28, r26
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
