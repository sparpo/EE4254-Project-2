
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00000afa  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800250  00800250  00000cde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b89  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000748  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048c  00000000  00000000  000020b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e2  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_20>
  54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	70 01       	movw	r14, r0
  6a:	db 01       	movw	r26, r22
  6c:	b5 01       	movw	r22, r10
  6e:	db 01       	movw	r26, r22
  70:	ba 01       	movw	r22, r20
  72:	db 01       	movw	r26, r22
  74:	db 01       	movw	r26, r22
  76:	db 01       	movw	r26, r22
  78:	db 01       	movw	r26, r22
  7a:	db 01       	movw	r26, r22
  7c:	db 01       	movw	r26, r22
  7e:	56 01       	movw	r10, r12
  80:	35 01       	movw	r6, r10
  82:	3d 01       	movw	r6, r26
  84:	db 01       	movw	r26, r22
  86:	45 01       	movw	r8, r10
  88:	db 01       	movw	r26, r22
  8a:	db 01       	movw	r26, r22
  8c:	bf 01       	movw	r22, r30
  8e:	4c 01       	movw	r8, r24
  90:	db 01       	movw	r26, r22
  92:	87 01       	movw	r16, r14
  94:	db 01       	movw	r26, r22
  96:	db 01       	movw	r26, r22
  98:	db 01       	movw	r26, r22
  9a:	db 01       	movw	r26, r22
  9c:	db 01       	movw	r26, r22
  9e:	db 01       	movw	r26, r22
  a0:	db 01       	movw	r26, r22
  a2:	db 01       	movw	r26, r22
  a4:	db 01       	movw	r26, r22
  a6:	db 01       	movw	r26, r22
  a8:	70 01       	movw	r14, r0
  aa:	db 01       	movw	r26, r22
  ac:	b5 01       	movw	r22, r10
  ae:	db 01       	movw	r26, r22
  b0:	ba 01       	movw	r22, r20
  b2:	db 01       	movw	r26, r22
  b4:	db 01       	movw	r26, r22
  b6:	db 01       	movw	r26, r22
  b8:	db 01       	movw	r26, r22
  ba:	db 01       	movw	r26, r22
  bc:	db 01       	movw	r26, r22
  be:	56 01       	movw	r10, r12
  c0:	35 01       	movw	r6, r10
  c2:	3d 01       	movw	r6, r26
  c4:	db 01       	movw	r26, r22
  c6:	45 01       	movw	r8, r10
  c8:	db 01       	movw	r26, r22
  ca:	db 01       	movw	r26, r22
  cc:	bf 01       	movw	r22, r30
  ce:	4c 01       	movw	r8, r24
  d0:	db 01       	movw	r26, r22
  d2:	87 01       	movw	r16, r14

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	ea ef       	ldi	r30, 0xFA	; 250
  e8:	fa e0       	ldi	r31, 0x0A	; 10
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a0 35       	cpi	r26, 0x50	; 80
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	a0 e5       	ldi	r26, 0x50	; 80
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	ab 38       	cpi	r26, 0x8B	; 139
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}
	}
	return 1;
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	e4 e5       	ldi	r30, 0x54	; 84
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 5a       	subi	r30, 0xAC	; 172
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
enum adc{Volt,LDR,Temp} input;
	
unsigned int enContDisplay = 0; //enable continuous display

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e4 97       	sbiw	r28, 0x34	; 52
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	char ch;  /* character variable for received character*/
	init_ports();
 1da:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1f2:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f4:	00 ec       	ldi	r16, 0xC0	; 192
 1f6:	10 e0       	ldi	r17, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f6 ec       	ldi	r31, 0xC6	; 198
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
				case 's':
				{
				char data[50];
				double OC;
				OC = OCR2A;
				sprintf(data, "OCR2A = %f", OC);
 202:	0f 2e       	mov	r0, r31
 204:	f5 e4       	ldi	r31, 0x45	; 69
 206:	6f 2e       	mov	r6, r31
 208:	f2 e0       	ldi	r31, 0x02	; 2
 20a:	7f 2e       	mov	r7, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	4c 01       	movw	r8, r24
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 214:	0f 2e       	mov	r0, r31
 216:	f8 e8       	ldi	r31, 0x88	; 136
 218:	4f 2e       	mov	r4, r31
 21a:	f3 e1       	ldi	r31, 0x13	; 19
 21c:	5f 2e       	mov	r5, r31
 21e:	f0 2d       	mov	r31, r0
				case 's':
				{
				char data[50];
				double OC;
				OC = OCR2A;
				sprintf(data, "OCR2A = %f", OC);
 220:	8b ab       	std	Y+51, r24	; 0x33
 222:	9c aa       	std	Y+52, r9	; 0x34
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 224:	22 24       	eor	r2, r2
 226:	23 94       	inc	r2
 228:	31 2c       	mov	r3, r1
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 22a:	0f 2e       	mov	r0, r31
 22c:	f3 e3       	ldi	r31, 0x33	; 51
 22e:	af 2e       	mov	r10, r31
 230:	f2 e0       	ldi	r31, 0x02	; 2
 232:	bf 2e       	mov	r11, r31
 234:	f0 2d       	mov	r31, r0
				
				case 'A':
				case 'a':
				{
				char data[50];
				sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 236:	0f 2e       	mov	r0, r31
 238:	f4 e2       	ldi	r31, 0x24	; 36
 23a:	cf 2e       	mov	r12, r31
 23c:	f2 e0       	ldi	r31, 0x02	; 2
 23e:	df 2e       	mov	r13, r31
 240:	f0 2d       	mov	r31, r0

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 242:	d8 01       	movw	r26, r16
 244:	8c 91       	ld	r24, X
 246:	88 23       	and	r24, r24
 248:	0c f0       	brlt	.+2      	; 0x24c <main+0x86>
 24a:	b9 c0       	rjmp	.+370    	; 0x3be <main+0x1f8>
		{
			ch = UDR0;    /*get character sent from PC*/
 24c:	d7 01       	movw	r26, r14
 24e:	ec 91       	ld	r30, X
			switch (ch) { //character input
 250:	8e 2f       	mov	r24, r30
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	e1 54       	subi	r30, 0x41	; 65
 258:	f1 09       	sbc	r31, r1
 25a:	e6 33       	cpi	r30, 0x36	; 54
 25c:	f1 05       	cpc	r31, r1
 25e:	08 f0       	brcs	.+2      	; 0x262 <main+0x9c>
 260:	aa c0       	rjmp	.+340    	; 0x3b6 <main+0x1f0>
 262:	ec 5c       	subi	r30, 0xCC	; 204
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__tablejump2__>
				
				case 'M':
				case 'm':
				input = Temp;
 26a:	b2 e0       	ldi	r27, 0x02	; 2
 26c:	b0 93 86 02 	sts	0x0286, r27	; 0x800286 <input>
				sendmsg(msg2);
 270:	82 ee       	ldi	r24, 0xE2	; 226
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 278:	a2 c0       	rjmp	.+324    	; 0x3be <main+0x1f8>
				
				case 'N':
				case 'n':
				input = LDR;
 27a:	e1 e0       	ldi	r30, 0x01	; 1
 27c:	e0 93 86 02 	sts	0x0286, r30	; 0x800286 <input>
				sendmsg(msg3);
 280:	84 ec       	ldi	r24, 0xC4	; 196
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 288:	9a c0       	rjmp	.+308    	; 0x3be <main+0x1f8>
				
				case 'P':
				case 'p':
				input = Volt;
 28a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <input>
				sendmsg(msg4);
 28e:	8c e9       	ldi	r24, 0x9C	; 156
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 296:	93 c0       	rjmp	.+294    	; 0x3be <main+0x1f8>
				
				case 'T':
				case 't':
				if (input == Temp) {
 298:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <input>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xdc>
 2a0:	8e c0       	rjmp	.+284    	; 0x3be <main+0x1f8>
					//double temp;
					//Report temp in degrees
					//sprintf('LM35 Temperature = %f deg C',temp);
				} else {
					//Give warning
					sendmsg(msg5);
 2a2:	86 e5       	ldi	r24, 0x56	; 86
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2aa:	89 c0       	rjmp	.+274    	; 0x3be <main+0x1f8>
				}
				break;
				
				case 'L':
				case 'l':
				if (input == LDR) {
 2ac:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <input>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	89 f4       	brne	.+34     	; 0x2d6 <main+0x110>
						if(adc_reading>512)
 2b4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <adc_reading>
 2b8:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <adc_reading+0x1>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	92 40       	sbci	r25, 0x02	; 2
 2c0:	28 f0       	brcs	.+10     	; 0x2cc <main+0x106>
						{
							sendmsg(msg7);
 2c2:	8b e0       	ldi	r24, 0x0B	; 11
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2ca:	79 c0       	rjmp	.+242    	; 0x3be <main+0x1f8>
						}
						else
						{
							sendmsg(msg8);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2d4:	74 c0       	rjmp	.+232    	; 0x3be <main+0x1f8>
						}
					} else {
					//Give warning
					sendmsg(msg6);
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2de:	6f c0       	rjmp	.+222    	; 0x3be <main+0x1f8>
				
				case 'A':
				case 'a':
				{
				char data[50];
				sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 2e0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <adc_reading+0x1>
 2e4:	8f 93       	push	r24
 2e6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <adc_reading>
 2ea:	8f 93       	push	r24
 2ec:	df 92       	push	r13
 2ee:	cf 92       	push	r12
 2f0:	9f 92       	push	r9
 2f2:	8f 92       	push	r8
 2f4:	0e 94 91 02 	call	0x522	; 0x522 <sprintf>
				sendmsg(data);
 2f8:	8b a9       	ldd	r24, Y+51	; 0x33
 2fa:	9c a9       	ldd	r25, Y+52	; 0x34
 2fc:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	58 c0       	rjmp	.+176    	; 0x3be <main+0x1f8>
				case 'v':
				{
				char data[50];
				int adc_mV;
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 30e:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <adc_reading>
 312:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <adc_reading+0x1>
 316:	36 95       	lsr	r19
 318:	27 95       	ror	r18
 31a:	36 95       	lsr	r19
 31c:	27 95       	ror	r18
 31e:	36 95       	lsr	r19
 320:	27 95       	ror	r18
 322:	a5 ec       	ldi	r26, 0xC5	; 197
 324:	b0 e2       	ldi	r27, 0x20	; 32
 326:	0e 94 82 02 	call	0x504	; 0x504 <__umulhisi3>
 32a:	92 95       	swap	r25
 32c:	82 95       	swap	r24
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	89 27       	eor	r24, r25
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	89 27       	eor	r24, r25
 336:	84 9d       	mul	r24, r4
 338:	90 01       	movw	r18, r0
 33a:	85 9d       	mul	r24, r5
 33c:	30 0d       	add	r19, r0
 33e:	94 9d       	mul	r25, r4
 340:	30 0d       	add	r19, r0
 342:	11 24       	eor	r1, r1
 344:	3f 93       	push	r19
 346:	2f 93       	push	r18
 348:	bf 92       	push	r11
 34a:	af 92       	push	r10
 34c:	9f 92       	push	r9
 34e:	8f 92       	push	r8
 350:	0e 94 91 02 	call	0x522	; 0x522 <sprintf>
				sendmsg(data);
 354:	8b a9       	ldd	r24, Y+51	; 0x33
 356:	9c a9       	ldd	r25, Y+52	; 0x34
 358:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	2a c0       	rjmp	.+84     	; 0x3be <main+0x1f8>
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 36a:	30 92 51 02 	sts	0x0251, r3	; 0x800251 <__data_end+0x1>
 36e:	20 92 50 02 	sts	0x0250, r2	; 0x800250 <__data_end>
				break;
 372:	25 c0       	rjmp	.+74     	; 0x3be <main+0x1f8>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 374:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <__data_end+0x1>
 378:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <__data_end>
				break;
 37c:	20 c0       	rjmp	.+64     	; 0x3be <main+0x1f8>
				case 'S':
				case 's':
				{
				char data[50];
				double OC;
				OC = OCR2A;
 37e:	a3 eb       	ldi	r26, 0xB3	; 179
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	6c 91       	ld	r22, X
				sprintf(data, "OCR2A = %f", OC);
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 3f 02 	call	0x47e	; 0x47e <__floatunsisf>
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	7f 93       	push	r23
 394:	6f 93       	push	r22
 396:	7f 92       	push	r7
 398:	6f 92       	push	r6
 39a:	9f 92       	push	r9
 39c:	8f 92       	push	r8
 39e:	0e 94 91 02 	call	0x522	; 0x522 <sprintf>
				sendmsg(data);
 3a2:	8b a9       	ldd	r24, Y+51	; 0x33
 3a4:	9c a9       	ldd	r25, Y+52	; 0x34
 3a6:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <main+0x1f8>
				break;
				}
				default:
				sendmsg(msg1); /*send default message*/
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	92 e0       	ldi	r25, 0x02	; 2
 3ba:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
			}
		}
		
		if(new_adc_data) {
 3be:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <new_adc_data>
 3c2:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <new_adc_data+0x1>
 3c6:	89 2b       	or	r24, r25
 3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0x206>
 3ca:	3b cf       	rjmp	.-394    	; 0x242 <main+0x7c>
			if(enContDisplay) {
				//send new adc data to usart
			}
			new_adc_data=0;
 3cc:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <new_adc_data+0x1>
 3d0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <new_adc_data>
 3d4:	2a cf       	rjmp	.-428    	; 0x22a <main+0x64>

000003d6 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	8f 93       	push	r24
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 3e6:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <sndcntr>
 3ea:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <qcntr>
 3ee:	8e 17       	cp	r24, r30
 3f0:	51 f0       	breq	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	UDR0 = queue[sndcntr++];
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	8e 0f       	add	r24, r30
 3f6:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <sndcntr>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ec 5a       	subi	r30, 0xAC	; 172
 3fe:	fd 4f       	sbci	r31, 0xFD	; 253
 400:	80 81       	ld	r24, Z
 402:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	8f 91       	pop	r24
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
	
	adc_reading = ADC;
 424:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 428:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 42c:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <adc_reading+0x1>
 430:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <adc_reading>
	new_adc_data = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <new_adc_data+0x1>
 43c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <new_adc_data>
	switch(input) {
 440:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <input>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	41 f0       	breq	.+16     	; 0x458 <__vector_21+0x42>
 448:	18 f0       	brcs	.+6      	; 0x450 <__vector_21+0x3a>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	49 f0       	breq	.+18     	; 0x460 <__vector_21+0x4a>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <__vector_21+0x52>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 456:	0b c0       	rjmp	.+22     	; 0x46e <__vector_21+0x58>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 458:	81 e8       	ldi	r24, 0x81	; 129
 45a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 45e:	07 c0       	rjmp	.+14     	; 0x46e <__vector_21+0x58>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 460:	82 e8       	ldi	r24, 0x82	; 130
 462:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
 466:	03 c0       	rjmp	.+6      	; 0x46e <__vector_21+0x58>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 468:	82 e8       	ldi	r24, 0x82	; 130
 46a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	}
	TIFR0 = TIFR0 & ~(1<<0); //clears Counter0 overflow
 46e:	a8 98       	cbi	0x15, 0	; 21
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__floatunsisf>:
 47e:	e8 94       	clt
 480:	09 c0       	rjmp	.+18     	; 0x494 <__floatsisf+0x12>

00000482 <__floatsisf>:
 482:	97 fb       	bst	r25, 7
 484:	3e f4       	brtc	.+14     	; 0x494 <__floatsisf+0x12>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	99 23       	and	r25, r25
 496:	a9 f0       	breq	.+42     	; 0x4c2 <__floatsisf+0x40>
 498:	f9 2f       	mov	r31, r25
 49a:	96 e9       	ldi	r25, 0x96	; 150
 49c:	bb 27       	eor	r27, r27
 49e:	93 95       	inc	r25
 4a0:	f6 95       	lsr	r31
 4a2:	87 95       	ror	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f1 11       	cpse	r31, r1
 4ac:	f8 cf       	rjmp	.-16     	; 0x49e <__floatsisf+0x1c>
 4ae:	fa f4       	brpl	.+62     	; 0x4ee <__floatsisf+0x6c>
 4b0:	bb 0f       	add	r27, r27
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__floatsisf+0x36>
 4b4:	60 ff       	sbrs	r22, 0
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <__floatsisf+0x6c>
 4b8:	6f 5f       	subi	r22, 0xFF	; 255
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <__floatsisf+0x6c>
 4c2:	88 23       	and	r24, r24
 4c4:	11 f0       	breq	.+4      	; 0x4ca <__floatsisf+0x48>
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__floatsisf+0x6a>
 4ca:	77 23       	and	r23, r23
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <__floatsisf+0x54>
 4ce:	9e e8       	ldi	r25, 0x8E	; 142
 4d0:	87 2f       	mov	r24, r23
 4d2:	76 2f       	mov	r23, r22
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__floatsisf+0x5e>
 4d6:	66 23       	and	r22, r22
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__floatsisf+0x74>
 4da:	96 e8       	ldi	r25, 0x86	; 134
 4dc:	86 2f       	mov	r24, r22
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	2a f0       	brmi	.+10     	; 0x4ee <__floatsisf+0x6c>
 4e4:	9a 95       	dec	r25
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	da f7       	brpl	.-10     	; 0x4e4 <__floatsisf+0x62>
 4ee:	88 0f       	add	r24, r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__tablejump2__>:
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	05 90       	lpm	r0, Z+
 4fe:	f4 91       	lpm	r31, Z
 500:	e0 2d       	mov	r30, r0
 502:	09 94       	ijmp

00000504 <__umulhisi3>:
 504:	a2 9f       	mul	r26, r18
 506:	b0 01       	movw	r22, r0
 508:	b3 9f       	mul	r27, r19
 50a:	c0 01       	movw	r24, r0
 50c:	a3 9f       	mul	r26, r19
 50e:	70 0d       	add	r23, r0
 510:	81 1d       	adc	r24, r1
 512:	11 24       	eor	r1, r1
 514:	91 1d       	adc	r25, r1
 516:	b2 9f       	mul	r27, r18
 518:	70 0d       	add	r23, r0
 51a:	81 1d       	adc	r24, r1
 51c:	11 24       	eor	r1, r1
 51e:	91 1d       	adc	r25, r1
 520:	08 95       	ret

00000522 <sprintf>:
 522:	ae e0       	ldi	r26, 0x0E	; 14
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e7 e9       	ldi	r30, 0x97	; 151
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__prologue_saves__+0x1c>
 52e:	0d 89       	ldd	r16, Y+21	; 0x15
 530:	1e 89       	ldd	r17, Y+22	; 0x16
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	8c 83       	std	Y+4, r24	; 0x04
 536:	1a 83       	std	Y+2, r17	; 0x02
 538:	09 83       	std	Y+1, r16	; 0x01
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	9f e7       	ldi	r25, 0x7F	; 127
 53e:	9e 83       	std	Y+6, r25	; 0x06
 540:	8d 83       	std	Y+5, r24	; 0x05
 542:	ae 01       	movw	r20, r28
 544:	47 5e       	subi	r20, 0xE7	; 231
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	6f 89       	ldd	r22, Y+23	; 0x17
 54a:	78 8d       	ldd	r23, Y+24	; 0x18
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 b3 02 	call	0x566	; 0x566 <vfprintf>
 554:	ef 81       	ldd	r30, Y+7	; 0x07
 556:	f8 85       	ldd	r31, Y+8	; 0x08
 558:	e0 0f       	add	r30, r16
 55a:	f1 1f       	adc	r31, r17
 55c:	10 82       	st	Z, r1
 55e:	2e 96       	adiw	r28, 0x0e	; 14
 560:	e4 e0       	ldi	r30, 0x04	; 4
 562:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__epilogue_restores__+0x1c>

00000566 <vfprintf>:
 566:	ab e0       	ldi	r26, 0x0B	; 11
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	e9 eb       	ldi	r30, 0xB9	; 185
 56c:	f2 e0       	ldi	r31, 0x02	; 2
 56e:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__prologue_saves__>
 572:	6c 01       	movw	r12, r24
 574:	7b 01       	movw	r14, r22
 576:	8a 01       	movw	r16, r20
 578:	fc 01       	movw	r30, r24
 57a:	17 82       	std	Z+7, r1	; 0x07
 57c:	16 82       	std	Z+6, r1	; 0x06
 57e:	83 81       	ldd	r24, Z+3	; 0x03
 580:	81 ff       	sbrs	r24, 1
 582:	cc c1       	rjmp	.+920    	; 0x91c <__stack+0x1d>
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	3c 01       	movw	r6, r24
 58a:	f6 01       	movw	r30, r12
 58c:	93 81       	ldd	r25, Z+3	; 0x03
 58e:	f7 01       	movw	r30, r14
 590:	93 fd       	sbrc	r25, 3
 592:	85 91       	lpm	r24, Z+
 594:	93 ff       	sbrs	r25, 3
 596:	81 91       	ld	r24, Z+
 598:	7f 01       	movw	r14, r30
 59a:	88 23       	and	r24, r24
 59c:	09 f4       	brne	.+2      	; 0x5a0 <vfprintf+0x3a>
 59e:	ba c1       	rjmp	.+884    	; 0x914 <__stack+0x15>
 5a0:	85 32       	cpi	r24, 0x25	; 37
 5a2:	39 f4       	brne	.+14     	; 0x5b2 <vfprintf+0x4c>
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	7f 01       	movw	r14, r30
 5ae:	85 32       	cpi	r24, 0x25	; 37
 5b0:	29 f4       	brne	.+10     	; 0x5bc <vfprintf+0x56>
 5b2:	b6 01       	movw	r22, r12
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 5ba:	e7 cf       	rjmp	.-50     	; 0x58a <vfprintf+0x24>
 5bc:	91 2c       	mov	r9, r1
 5be:	21 2c       	mov	r2, r1
 5c0:	31 2c       	mov	r3, r1
 5c2:	ff e1       	ldi	r31, 0x1F	; 31
 5c4:	f3 15       	cp	r31, r3
 5c6:	d8 f0       	brcs	.+54     	; 0x5fe <vfprintf+0x98>
 5c8:	8b 32       	cpi	r24, 0x2B	; 43
 5ca:	79 f0       	breq	.+30     	; 0x5ea <vfprintf+0x84>
 5cc:	38 f4       	brcc	.+14     	; 0x5dc <vfprintf+0x76>
 5ce:	80 32       	cpi	r24, 0x20	; 32
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <vfprintf+0x8a>
 5d2:	83 32       	cpi	r24, 0x23	; 35
 5d4:	a1 f4       	brne	.+40     	; 0x5fe <vfprintf+0x98>
 5d6:	23 2d       	mov	r18, r3
 5d8:	20 61       	ori	r18, 0x10	; 16
 5da:	1d c0       	rjmp	.+58     	; 0x616 <vfprintf+0xb0>
 5dc:	8d 32       	cpi	r24, 0x2D	; 45
 5de:	61 f0       	breq	.+24     	; 0x5f8 <vfprintf+0x92>
 5e0:	80 33       	cpi	r24, 0x30	; 48
 5e2:	69 f4       	brne	.+26     	; 0x5fe <vfprintf+0x98>
 5e4:	23 2d       	mov	r18, r3
 5e6:	21 60       	ori	r18, 0x01	; 1
 5e8:	16 c0       	rjmp	.+44     	; 0x616 <vfprintf+0xb0>
 5ea:	83 2d       	mov	r24, r3
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	38 2e       	mov	r3, r24
 5f0:	e3 2d       	mov	r30, r3
 5f2:	e4 60       	ori	r30, 0x04	; 4
 5f4:	3e 2e       	mov	r3, r30
 5f6:	2a c0       	rjmp	.+84     	; 0x64c <vfprintf+0xe6>
 5f8:	f3 2d       	mov	r31, r3
 5fa:	f8 60       	ori	r31, 0x08	; 8
 5fc:	1d c0       	rjmp	.+58     	; 0x638 <vfprintf+0xd2>
 5fe:	37 fc       	sbrc	r3, 7
 600:	2d c0       	rjmp	.+90     	; 0x65c <vfprintf+0xf6>
 602:	20 ed       	ldi	r18, 0xD0	; 208
 604:	28 0f       	add	r18, r24
 606:	2a 30       	cpi	r18, 0x0A	; 10
 608:	40 f0       	brcs	.+16     	; 0x61a <vfprintf+0xb4>
 60a:	8e 32       	cpi	r24, 0x2E	; 46
 60c:	b9 f4       	brne	.+46     	; 0x63c <vfprintf+0xd6>
 60e:	36 fc       	sbrc	r3, 6
 610:	81 c1       	rjmp	.+770    	; 0x914 <__stack+0x15>
 612:	23 2d       	mov	r18, r3
 614:	20 64       	ori	r18, 0x40	; 64
 616:	32 2e       	mov	r3, r18
 618:	19 c0       	rjmp	.+50     	; 0x64c <vfprintf+0xe6>
 61a:	36 fe       	sbrs	r3, 6
 61c:	06 c0       	rjmp	.+12     	; 0x62a <vfprintf+0xc4>
 61e:	8a e0       	ldi	r24, 0x0A	; 10
 620:	98 9e       	mul	r9, r24
 622:	20 0d       	add	r18, r0
 624:	11 24       	eor	r1, r1
 626:	92 2e       	mov	r9, r18
 628:	11 c0       	rjmp	.+34     	; 0x64c <vfprintf+0xe6>
 62a:	ea e0       	ldi	r30, 0x0A	; 10
 62c:	2e 9e       	mul	r2, r30
 62e:	20 0d       	add	r18, r0
 630:	11 24       	eor	r1, r1
 632:	22 2e       	mov	r2, r18
 634:	f3 2d       	mov	r31, r3
 636:	f0 62       	ori	r31, 0x20	; 32
 638:	3f 2e       	mov	r3, r31
 63a:	08 c0       	rjmp	.+16     	; 0x64c <vfprintf+0xe6>
 63c:	8c 36       	cpi	r24, 0x6C	; 108
 63e:	21 f4       	brne	.+8      	; 0x648 <vfprintf+0xe2>
 640:	83 2d       	mov	r24, r3
 642:	80 68       	ori	r24, 0x80	; 128
 644:	38 2e       	mov	r3, r24
 646:	02 c0       	rjmp	.+4      	; 0x64c <vfprintf+0xe6>
 648:	88 36       	cpi	r24, 0x68	; 104
 64a:	41 f4       	brne	.+16     	; 0x65c <vfprintf+0xf6>
 64c:	f7 01       	movw	r30, r14
 64e:	93 fd       	sbrc	r25, 3
 650:	85 91       	lpm	r24, Z+
 652:	93 ff       	sbrs	r25, 3
 654:	81 91       	ld	r24, Z+
 656:	7f 01       	movw	r14, r30
 658:	81 11       	cpse	r24, r1
 65a:	b3 cf       	rjmp	.-154    	; 0x5c2 <vfprintf+0x5c>
 65c:	98 2f       	mov	r25, r24
 65e:	9f 7d       	andi	r25, 0xDF	; 223
 660:	95 54       	subi	r25, 0x45	; 69
 662:	93 30       	cpi	r25, 0x03	; 3
 664:	28 f4       	brcc	.+10     	; 0x670 <vfprintf+0x10a>
 666:	0c 5f       	subi	r16, 0xFC	; 252
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	9f e3       	ldi	r25, 0x3F	; 63
 66c:	99 83       	std	Y+1, r25	; 0x01
 66e:	0d c0       	rjmp	.+26     	; 0x68a <vfprintf+0x124>
 670:	83 36       	cpi	r24, 0x63	; 99
 672:	31 f0       	breq	.+12     	; 0x680 <vfprintf+0x11a>
 674:	83 37       	cpi	r24, 0x73	; 115
 676:	71 f0       	breq	.+28     	; 0x694 <vfprintf+0x12e>
 678:	83 35       	cpi	r24, 0x53	; 83
 67a:	09 f0       	breq	.+2      	; 0x67e <vfprintf+0x118>
 67c:	59 c0       	rjmp	.+178    	; 0x730 <vfprintf+0x1ca>
 67e:	21 c0       	rjmp	.+66     	; 0x6c2 <vfprintf+0x15c>
 680:	f8 01       	movw	r30, r16
 682:	80 81       	ld	r24, Z
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	0e 5f       	subi	r16, 0xFE	; 254
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	88 24       	eor	r8, r8
 68c:	83 94       	inc	r8
 68e:	91 2c       	mov	r9, r1
 690:	53 01       	movw	r10, r6
 692:	13 c0       	rjmp	.+38     	; 0x6ba <vfprintf+0x154>
 694:	28 01       	movw	r4, r16
 696:	f2 e0       	ldi	r31, 0x02	; 2
 698:	4f 0e       	add	r4, r31
 69a:	51 1c       	adc	r5, r1
 69c:	f8 01       	movw	r30, r16
 69e:	a0 80       	ld	r10, Z
 6a0:	b1 80       	ldd	r11, Z+1	; 0x01
 6a2:	36 fe       	sbrs	r3, 6
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <vfprintf+0x146>
 6a6:	69 2d       	mov	r22, r9
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <vfprintf+0x14a>
 6ac:	6f ef       	ldi	r22, 0xFF	; 255
 6ae:	7f ef       	ldi	r23, 0xFF	; 255
 6b0:	c5 01       	movw	r24, r10
 6b2:	0e 94 9f 04 	call	0x93e	; 0x93e <strnlen>
 6b6:	4c 01       	movw	r8, r24
 6b8:	82 01       	movw	r16, r4
 6ba:	f3 2d       	mov	r31, r3
 6bc:	ff 77       	andi	r31, 0x7F	; 127
 6be:	3f 2e       	mov	r3, r31
 6c0:	16 c0       	rjmp	.+44     	; 0x6ee <vfprintf+0x188>
 6c2:	28 01       	movw	r4, r16
 6c4:	22 e0       	ldi	r18, 0x02	; 2
 6c6:	42 0e       	add	r4, r18
 6c8:	51 1c       	adc	r5, r1
 6ca:	f8 01       	movw	r30, r16
 6cc:	a0 80       	ld	r10, Z
 6ce:	b1 80       	ldd	r11, Z+1	; 0x01
 6d0:	36 fe       	sbrs	r3, 6
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <vfprintf+0x174>
 6d4:	69 2d       	mov	r22, r9
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x178>
 6da:	6f ef       	ldi	r22, 0xFF	; 255
 6dc:	7f ef       	ldi	r23, 0xFF	; 255
 6de:	c5 01       	movw	r24, r10
 6e0:	0e 94 94 04 	call	0x928	; 0x928 <strnlen_P>
 6e4:	4c 01       	movw	r8, r24
 6e6:	f3 2d       	mov	r31, r3
 6e8:	f0 68       	ori	r31, 0x80	; 128
 6ea:	3f 2e       	mov	r3, r31
 6ec:	82 01       	movw	r16, r4
 6ee:	33 fc       	sbrc	r3, 3
 6f0:	1b c0       	rjmp	.+54     	; 0x728 <vfprintf+0x1c2>
 6f2:	82 2d       	mov	r24, r2
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	88 16       	cp	r8, r24
 6f8:	99 06       	cpc	r9, r25
 6fa:	b0 f4       	brcc	.+44     	; 0x728 <vfprintf+0x1c2>
 6fc:	b6 01       	movw	r22, r12
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 706:	2a 94       	dec	r2
 708:	f4 cf       	rjmp	.-24     	; 0x6f2 <vfprintf+0x18c>
 70a:	f5 01       	movw	r30, r10
 70c:	37 fc       	sbrc	r3, 7
 70e:	85 91       	lpm	r24, Z+
 710:	37 fe       	sbrs	r3, 7
 712:	81 91       	ld	r24, Z+
 714:	5f 01       	movw	r10, r30
 716:	b6 01       	movw	r22, r12
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 71e:	21 10       	cpse	r2, r1
 720:	2a 94       	dec	r2
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	82 1a       	sub	r8, r18
 726:	91 08       	sbc	r9, r1
 728:	81 14       	cp	r8, r1
 72a:	91 04       	cpc	r9, r1
 72c:	71 f7       	brne	.-36     	; 0x70a <vfprintf+0x1a4>
 72e:	e8 c0       	rjmp	.+464    	; 0x900 <__stack+0x1>
 730:	84 36       	cpi	r24, 0x64	; 100
 732:	11 f0       	breq	.+4      	; 0x738 <vfprintf+0x1d2>
 734:	89 36       	cpi	r24, 0x69	; 105
 736:	41 f5       	brne	.+80     	; 0x788 <vfprintf+0x222>
 738:	f8 01       	movw	r30, r16
 73a:	37 fe       	sbrs	r3, 7
 73c:	07 c0       	rjmp	.+14     	; 0x74c <vfprintf+0x1e6>
 73e:	60 81       	ld	r22, Z
 740:	71 81       	ldd	r23, Z+1	; 0x01
 742:	82 81       	ldd	r24, Z+2	; 0x02
 744:	93 81       	ldd	r25, Z+3	; 0x03
 746:	0c 5f       	subi	r16, 0xFC	; 252
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	08 c0       	rjmp	.+16     	; 0x75c <vfprintf+0x1f6>
 74c:	60 81       	ld	r22, Z
 74e:	71 81       	ldd	r23, Z+1	; 0x01
 750:	07 2e       	mov	r0, r23
 752:	00 0c       	add	r0, r0
 754:	88 0b       	sbc	r24, r24
 756:	99 0b       	sbc	r25, r25
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	f3 2d       	mov	r31, r3
 75e:	ff 76       	andi	r31, 0x6F	; 111
 760:	3f 2e       	mov	r3, r31
 762:	97 ff       	sbrs	r25, 7
 764:	09 c0       	rjmp	.+18     	; 0x778 <vfprintf+0x212>
 766:	90 95       	com	r25
 768:	80 95       	com	r24
 76a:	70 95       	com	r23
 76c:	61 95       	neg	r22
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	f0 68       	ori	r31, 0x80	; 128
 776:	3f 2e       	mov	r3, r31
 778:	2a e0       	ldi	r18, 0x0A	; 10
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	a3 01       	movw	r20, r6
 77e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__ultoa_invert>
 782:	88 2e       	mov	r8, r24
 784:	86 18       	sub	r8, r6
 786:	45 c0       	rjmp	.+138    	; 0x812 <vfprintf+0x2ac>
 788:	85 37       	cpi	r24, 0x75	; 117
 78a:	31 f4       	brne	.+12     	; 0x798 <vfprintf+0x232>
 78c:	23 2d       	mov	r18, r3
 78e:	2f 7e       	andi	r18, 0xEF	; 239
 790:	b2 2e       	mov	r11, r18
 792:	2a e0       	ldi	r18, 0x0A	; 10
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	25 c0       	rjmp	.+74     	; 0x7e2 <vfprintf+0x27c>
 798:	93 2d       	mov	r25, r3
 79a:	99 7f       	andi	r25, 0xF9	; 249
 79c:	b9 2e       	mov	r11, r25
 79e:	8f 36       	cpi	r24, 0x6F	; 111
 7a0:	c1 f0       	breq	.+48     	; 0x7d2 <vfprintf+0x26c>
 7a2:	18 f4       	brcc	.+6      	; 0x7aa <vfprintf+0x244>
 7a4:	88 35       	cpi	r24, 0x58	; 88
 7a6:	79 f0       	breq	.+30     	; 0x7c6 <vfprintf+0x260>
 7a8:	b5 c0       	rjmp	.+362    	; 0x914 <__stack+0x15>
 7aa:	80 37       	cpi	r24, 0x70	; 112
 7ac:	19 f0       	breq	.+6      	; 0x7b4 <vfprintf+0x24e>
 7ae:	88 37       	cpi	r24, 0x78	; 120
 7b0:	21 f0       	breq	.+8      	; 0x7ba <vfprintf+0x254>
 7b2:	b0 c0       	rjmp	.+352    	; 0x914 <__stack+0x15>
 7b4:	e9 2f       	mov	r30, r25
 7b6:	e0 61       	ori	r30, 0x10	; 16
 7b8:	be 2e       	mov	r11, r30
 7ba:	b4 fe       	sbrs	r11, 4
 7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <vfprintf+0x272>
 7be:	fb 2d       	mov	r31, r11
 7c0:	f4 60       	ori	r31, 0x04	; 4
 7c2:	bf 2e       	mov	r11, r31
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x272>
 7c6:	34 fe       	sbrs	r3, 4
 7c8:	0a c0       	rjmp	.+20     	; 0x7de <vfprintf+0x278>
 7ca:	29 2f       	mov	r18, r25
 7cc:	26 60       	ori	r18, 0x06	; 6
 7ce:	b2 2e       	mov	r11, r18
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x278>
 7d2:	28 e0       	ldi	r18, 0x08	; 8
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <vfprintf+0x27c>
 7d8:	20 e1       	ldi	r18, 0x10	; 16
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x27c>
 7de:	20 e1       	ldi	r18, 0x10	; 16
 7e0:	32 e0       	ldi	r19, 0x02	; 2
 7e2:	f8 01       	movw	r30, r16
 7e4:	b7 fe       	sbrs	r11, 7
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <vfprintf+0x290>
 7e8:	60 81       	ld	r22, Z
 7ea:	71 81       	ldd	r23, Z+1	; 0x01
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
 7f0:	0c 5f       	subi	r16, 0xFC	; 252
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x29c>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 5f       	subi	r16, 0xFE	; 254
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	a3 01       	movw	r20, r6
 804:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__ultoa_invert>
 808:	88 2e       	mov	r8, r24
 80a:	86 18       	sub	r8, r6
 80c:	fb 2d       	mov	r31, r11
 80e:	ff 77       	andi	r31, 0x7F	; 127
 810:	3f 2e       	mov	r3, r31
 812:	36 fe       	sbrs	r3, 6
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x2ca>
 816:	23 2d       	mov	r18, r3
 818:	2e 7f       	andi	r18, 0xFE	; 254
 81a:	a2 2e       	mov	r10, r18
 81c:	89 14       	cp	r8, r9
 81e:	58 f4       	brcc	.+22     	; 0x836 <vfprintf+0x2d0>
 820:	34 fe       	sbrs	r3, 4
 822:	0b c0       	rjmp	.+22     	; 0x83a <vfprintf+0x2d4>
 824:	32 fc       	sbrc	r3, 2
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x2d4>
 828:	83 2d       	mov	r24, r3
 82a:	8e 7e       	andi	r24, 0xEE	; 238
 82c:	a8 2e       	mov	r10, r24
 82e:	05 c0       	rjmp	.+10     	; 0x83a <vfprintf+0x2d4>
 830:	b8 2c       	mov	r11, r8
 832:	a3 2c       	mov	r10, r3
 834:	03 c0       	rjmp	.+6      	; 0x83c <vfprintf+0x2d6>
 836:	b8 2c       	mov	r11, r8
 838:	01 c0       	rjmp	.+2      	; 0x83c <vfprintf+0x2d6>
 83a:	b9 2c       	mov	r11, r9
 83c:	a4 fe       	sbrs	r10, 4
 83e:	0f c0       	rjmp	.+30     	; 0x85e <vfprintf+0x2f8>
 840:	fe 01       	movw	r30, r28
 842:	e8 0d       	add	r30, r8
 844:	f1 1d       	adc	r31, r1
 846:	80 81       	ld	r24, Z
 848:	80 33       	cpi	r24, 0x30	; 48
 84a:	21 f4       	brne	.+8      	; 0x854 <vfprintf+0x2ee>
 84c:	9a 2d       	mov	r25, r10
 84e:	99 7e       	andi	r25, 0xE9	; 233
 850:	a9 2e       	mov	r10, r25
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x300>
 854:	a2 fe       	sbrs	r10, 2
 856:	06 c0       	rjmp	.+12     	; 0x864 <vfprintf+0x2fe>
 858:	b3 94       	inc	r11
 85a:	b3 94       	inc	r11
 85c:	04 c0       	rjmp	.+8      	; 0x866 <vfprintf+0x300>
 85e:	8a 2d       	mov	r24, r10
 860:	86 78       	andi	r24, 0x86	; 134
 862:	09 f0       	breq	.+2      	; 0x866 <vfprintf+0x300>
 864:	b3 94       	inc	r11
 866:	a3 fc       	sbrc	r10, 3
 868:	11 c0       	rjmp	.+34     	; 0x88c <vfprintf+0x326>
 86a:	a0 fe       	sbrs	r10, 0
 86c:	06 c0       	rjmp	.+12     	; 0x87a <vfprintf+0x314>
 86e:	b2 14       	cp	r11, r2
 870:	88 f4       	brcc	.+34     	; 0x894 <vfprintf+0x32e>
 872:	28 0c       	add	r2, r8
 874:	92 2c       	mov	r9, r2
 876:	9b 18       	sub	r9, r11
 878:	0e c0       	rjmp	.+28     	; 0x896 <vfprintf+0x330>
 87a:	b2 14       	cp	r11, r2
 87c:	60 f4       	brcc	.+24     	; 0x896 <vfprintf+0x330>
 87e:	b6 01       	movw	r22, r12
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 888:	b3 94       	inc	r11
 88a:	f7 cf       	rjmp	.-18     	; 0x87a <vfprintf+0x314>
 88c:	b2 14       	cp	r11, r2
 88e:	18 f4       	brcc	.+6      	; 0x896 <vfprintf+0x330>
 890:	2b 18       	sub	r2, r11
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x332>
 894:	98 2c       	mov	r9, r8
 896:	21 2c       	mov	r2, r1
 898:	a4 fe       	sbrs	r10, 4
 89a:	10 c0       	rjmp	.+32     	; 0x8bc <vfprintf+0x356>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e3       	ldi	r24, 0x30	; 48
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 8a6:	a2 fe       	sbrs	r10, 2
 8a8:	17 c0       	rjmp	.+46     	; 0x8d8 <vfprintf+0x372>
 8aa:	a1 fc       	sbrc	r10, 1
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <vfprintf+0x34e>
 8ae:	88 e7       	ldi	r24, 0x78	; 120
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x352>
 8b4:	88 e5       	ldi	r24, 0x58	; 88
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	b6 01       	movw	r22, r12
 8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <vfprintf+0x36e>
 8bc:	8a 2d       	mov	r24, r10
 8be:	86 78       	andi	r24, 0x86	; 134
 8c0:	59 f0       	breq	.+22     	; 0x8d8 <vfprintf+0x372>
 8c2:	a1 fe       	sbrs	r10, 1
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <vfprintf+0x364>
 8c6:	8b e2       	ldi	r24, 0x2B	; 43
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <vfprintf+0x366>
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	a7 fc       	sbrc	r10, 7
 8ce:	8d e2       	ldi	r24, 0x2D	; 45
 8d0:	b6 01       	movw	r22, r12
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 8d8:	89 14       	cp	r8, r9
 8da:	38 f4       	brcc	.+14     	; 0x8ea <vfprintf+0x384>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 8e6:	9a 94       	dec	r9
 8e8:	f7 cf       	rjmp	.-18     	; 0x8d8 <vfprintf+0x372>
 8ea:	8a 94       	dec	r8
 8ec:	f3 01       	movw	r30, r6
 8ee:	e8 0d       	add	r30, r8
 8f0:	f1 1d       	adc	r31, r1
 8f2:	80 81       	ld	r24, Z
 8f4:	b6 01       	movw	r22, r12
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 8fc:	81 10       	cpse	r8, r1
 8fe:	f5 cf       	rjmp	.-22     	; 0x8ea <vfprintf+0x384>
 900:	22 20       	and	r2, r2
 902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
 904:	42 ce       	rjmp	.-892    	; 0x58a <vfprintf+0x24>
 906:	b6 01       	movw	r22, r12
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 aa 04 	call	0x954	; 0x954 <fputc>
 910:	2a 94       	dec	r2
 912:	f6 cf       	rjmp	.-20     	; 0x900 <__stack+0x1>
 914:	f6 01       	movw	r30, r12
 916:	86 81       	ldd	r24, Z+6	; 0x06
 918:	97 81       	ldd	r25, Z+7	; 0x07
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
 91c:	8f ef       	ldi	r24, 0xFF	; 255
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	2b 96       	adiw	r28, 0x0b	; 11
 922:	e2 e1       	ldi	r30, 0x12	; 18
 924:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__epilogue_restores__>

00000928 <strnlen_P>:
 928:	fc 01       	movw	r30, r24
 92a:	05 90       	lpm	r0, Z+
 92c:	61 50       	subi	r22, 0x01	; 1
 92e:	70 40       	sbci	r23, 0x00	; 0
 930:	01 10       	cpse	r0, r1
 932:	d8 f7       	brcc	.-10     	; 0x92a <strnlen_P+0x2>
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	8e 0f       	add	r24, r30
 93a:	9f 1f       	adc	r25, r31
 93c:	08 95       	ret

0000093e <strnlen>:
 93e:	fc 01       	movw	r30, r24
 940:	61 50       	subi	r22, 0x01	; 1
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	01 90       	ld	r0, Z+
 946:	01 10       	cpse	r0, r1
 948:	d8 f7       	brcc	.-10     	; 0x940 <strnlen+0x2>
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	8e 0f       	add	r24, r30
 950:	9f 1f       	adc	r25, r31
 952:	08 95       	ret

00000954 <fputc>:
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	fb 01       	movw	r30, r22
 95e:	23 81       	ldd	r18, Z+3	; 0x03
 960:	21 fd       	sbrc	r18, 1
 962:	03 c0       	rjmp	.+6      	; 0x96a <fputc+0x16>
 964:	8f ef       	ldi	r24, 0xFF	; 255
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	2c c0       	rjmp	.+88     	; 0x9c2 <fputc+0x6e>
 96a:	22 ff       	sbrs	r18, 2
 96c:	16 c0       	rjmp	.+44     	; 0x99a <fputc+0x46>
 96e:	46 81       	ldd	r20, Z+6	; 0x06
 970:	57 81       	ldd	r21, Z+7	; 0x07
 972:	24 81       	ldd	r18, Z+4	; 0x04
 974:	35 81       	ldd	r19, Z+5	; 0x05
 976:	42 17       	cp	r20, r18
 978:	53 07       	cpc	r21, r19
 97a:	44 f4       	brge	.+16     	; 0x98c <fputc+0x38>
 97c:	a0 81       	ld	r26, Z
 97e:	b1 81       	ldd	r27, Z+1	; 0x01
 980:	9d 01       	movw	r18, r26
 982:	2f 5f       	subi	r18, 0xFF	; 255
 984:	3f 4f       	sbci	r19, 0xFF	; 255
 986:	31 83       	std	Z+1, r19	; 0x01
 988:	20 83       	st	Z, r18
 98a:	8c 93       	st	X, r24
 98c:	26 81       	ldd	r18, Z+6	; 0x06
 98e:	37 81       	ldd	r19, Z+7	; 0x07
 990:	2f 5f       	subi	r18, 0xFF	; 255
 992:	3f 4f       	sbci	r19, 0xFF	; 255
 994:	37 83       	std	Z+7, r19	; 0x07
 996:	26 83       	std	Z+6, r18	; 0x06
 998:	14 c0       	rjmp	.+40     	; 0x9c2 <fputc+0x6e>
 99a:	8b 01       	movw	r16, r22
 99c:	ec 01       	movw	r28, r24
 99e:	fb 01       	movw	r30, r22
 9a0:	00 84       	ldd	r0, Z+8	; 0x08
 9a2:	f1 85       	ldd	r31, Z+9	; 0x09
 9a4:	e0 2d       	mov	r30, r0
 9a6:	09 95       	icall
 9a8:	89 2b       	or	r24, r25
 9aa:	e1 f6       	brne	.-72     	; 0x964 <fputc+0x10>
 9ac:	d8 01       	movw	r26, r16
 9ae:	16 96       	adiw	r26, 0x06	; 6
 9b0:	8d 91       	ld	r24, X+
 9b2:	9c 91       	ld	r25, X
 9b4:	17 97       	sbiw	r26, 0x07	; 7
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	17 96       	adiw	r26, 0x07	; 7
 9ba:	9c 93       	st	X, r25
 9bc:	8e 93       	st	-X, r24
 9be:	16 97       	sbiw	r26, 0x06	; 6
 9c0:	ce 01       	movw	r24, r28
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	08 95       	ret

000009cc <__ultoa_invert>:
 9cc:	fa 01       	movw	r30, r20
 9ce:	aa 27       	eor	r26, r26
 9d0:	28 30       	cpi	r18, 0x08	; 8
 9d2:	51 f1       	breq	.+84     	; 0xa28 <__ultoa_invert+0x5c>
 9d4:	20 31       	cpi	r18, 0x10	; 16
 9d6:	81 f1       	breq	.+96     	; 0xa38 <__ultoa_invert+0x6c>
 9d8:	e8 94       	clt
 9da:	6f 93       	push	r22
 9dc:	6e 7f       	andi	r22, 0xFE	; 254
 9de:	6e 5f       	subi	r22, 0xFE	; 254
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	af 4f       	sbci	r26, 0xFF	; 255
 9e8:	b1 e0       	ldi	r27, 0x01	; 1
 9ea:	3e d0       	rcall	.+124    	; 0xa68 <__ultoa_invert+0x9c>
 9ec:	b4 e0       	ldi	r27, 0x04	; 4
 9ee:	3c d0       	rcall	.+120    	; 0xa68 <__ultoa_invert+0x9c>
 9f0:	67 0f       	add	r22, r23
 9f2:	78 1f       	adc	r23, r24
 9f4:	89 1f       	adc	r24, r25
 9f6:	9a 1f       	adc	r25, r26
 9f8:	a1 1d       	adc	r26, r1
 9fa:	68 0f       	add	r22, r24
 9fc:	79 1f       	adc	r23, r25
 9fe:	8a 1f       	adc	r24, r26
 a00:	91 1d       	adc	r25, r1
 a02:	a1 1d       	adc	r26, r1
 a04:	6a 0f       	add	r22, r26
 a06:	71 1d       	adc	r23, r1
 a08:	81 1d       	adc	r24, r1
 a0a:	91 1d       	adc	r25, r1
 a0c:	a1 1d       	adc	r26, r1
 a0e:	20 d0       	rcall	.+64     	; 0xa50 <__ultoa_invert+0x84>
 a10:	09 f4       	brne	.+2      	; 0xa14 <__ultoa_invert+0x48>
 a12:	68 94       	set
 a14:	3f 91       	pop	r19
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	26 9f       	mul	r18, r22
 a1a:	11 24       	eor	r1, r1
 a1c:	30 19       	sub	r19, r0
 a1e:	30 5d       	subi	r19, 0xD0	; 208
 a20:	31 93       	st	Z+, r19
 a22:	de f6       	brtc	.-74     	; 0x9da <__ultoa_invert+0xe>
 a24:	cf 01       	movw	r24, r30
 a26:	08 95       	ret
 a28:	46 2f       	mov	r20, r22
 a2a:	47 70       	andi	r20, 0x07	; 7
 a2c:	40 5d       	subi	r20, 0xD0	; 208
 a2e:	41 93       	st	Z+, r20
 a30:	b3 e0       	ldi	r27, 0x03	; 3
 a32:	0f d0       	rcall	.+30     	; 0xa52 <__ultoa_invert+0x86>
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__ultoa_invert+0x5c>
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <__ultoa_invert+0x58>
 a38:	46 2f       	mov	r20, r22
 a3a:	4f 70       	andi	r20, 0x0F	; 15
 a3c:	40 5d       	subi	r20, 0xD0	; 208
 a3e:	4a 33       	cpi	r20, 0x3A	; 58
 a40:	18 f0       	brcs	.+6      	; 0xa48 <__ultoa_invert+0x7c>
 a42:	49 5d       	subi	r20, 0xD9	; 217
 a44:	31 fd       	sbrc	r19, 1
 a46:	40 52       	subi	r20, 0x20	; 32
 a48:	41 93       	st	Z+, r20
 a4a:	02 d0       	rcall	.+4      	; 0xa50 <__ultoa_invert+0x84>
 a4c:	a9 f7       	brne	.-22     	; 0xa38 <__ultoa_invert+0x6c>
 a4e:	ea cf       	rjmp	.-44     	; 0xa24 <__ultoa_invert+0x58>
 a50:	b4 e0       	ldi	r27, 0x04	; 4
 a52:	a6 95       	lsr	r26
 a54:	97 95       	ror	r25
 a56:	87 95       	ror	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	ba 95       	dec	r27
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__ultoa_invert+0x86>
 a60:	00 97       	sbiw	r24, 0x00	; 0
 a62:	61 05       	cpc	r22, r1
 a64:	71 05       	cpc	r23, r1
 a66:	08 95       	ret
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	0a 2e       	mov	r0, r26
 a6e:	06 94       	lsr	r0
 a70:	57 95       	ror	r21
 a72:	47 95       	ror	r20
 a74:	37 95       	ror	r19
 a76:	27 95       	ror	r18
 a78:	ba 95       	dec	r27
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__ultoa_invert+0xa2>
 a7c:	62 0f       	add	r22, r18
 a7e:	73 1f       	adc	r23, r19
 a80:	84 1f       	adc	r24, r20
 a82:	95 1f       	adc	r25, r21
 a84:	a0 1d       	adc	r26, r0
 a86:	08 95       	ret

00000a88 <__prologue_saves__>:
 a88:	2f 92       	push	r2
 a8a:	3f 92       	push	r3
 a8c:	4f 92       	push	r4
 a8e:	5f 92       	push	r5
 a90:	6f 92       	push	r6
 a92:	7f 92       	push	r7
 a94:	8f 92       	push	r8
 a96:	9f 92       	push	r9
 a98:	af 92       	push	r10
 a9a:	bf 92       	push	r11
 a9c:	cf 92       	push	r12
 a9e:	df 92       	push	r13
 aa0:	ef 92       	push	r14
 aa2:	ff 92       	push	r15
 aa4:	0f 93       	push	r16
 aa6:	1f 93       	push	r17
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
 ab0:	ca 1b       	sub	r28, r26
 ab2:	db 0b       	sbc	r29, r27
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	de bf       	out	0x3e, r29	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	cd bf       	out	0x3d, r28	; 61
 abe:	09 94       	ijmp

00000ac0 <__epilogue_restores__>:
 ac0:	2a 88       	ldd	r2, Y+18	; 0x12
 ac2:	39 88       	ldd	r3, Y+17	; 0x11
 ac4:	48 88       	ldd	r4, Y+16	; 0x10
 ac6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac8:	6e 84       	ldd	r6, Y+14	; 0x0e
 aca:	7d 84       	ldd	r7, Y+13	; 0x0d
 acc:	8c 84       	ldd	r8, Y+12	; 0x0c
 ace:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad2:	b9 84       	ldd	r11, Y+9	; 0x09
 ad4:	c8 84       	ldd	r12, Y+8	; 0x08
 ad6:	df 80       	ldd	r13, Y+7	; 0x07
 ad8:	ee 80       	ldd	r14, Y+6	; 0x06
 ada:	fd 80       	ldd	r15, Y+5	; 0x05
 adc:	0c 81       	ldd	r16, Y+4	; 0x04
 ade:	1b 81       	ldd	r17, Y+3	; 0x03
 ae0:	aa 81       	ldd	r26, Y+2	; 0x02
 ae2:	b9 81       	ldd	r27, Y+1	; 0x01
 ae4:	ce 0f       	add	r28, r30
 ae6:	d1 1d       	adc	r29, r1
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	ed 01       	movw	r28, r26
 af4:	08 95       	ret

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
