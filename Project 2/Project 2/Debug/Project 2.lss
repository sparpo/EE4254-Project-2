
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00000e8e  00000f22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080026c  0080026c  0000108e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb6  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_20>
  54:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	93 01       	movw	r18, r6
  6a:	00 02       	muls	r16, r16
  6c:	d8 01       	movw	r26, r16
  6e:	00 02       	muls	r16, r16
  70:	df 01       	movw	r26, r30
  72:	00 02       	muls	r16, r16
  74:	00 02       	muls	r16, r16
  76:	00 02       	muls	r16, r16
  78:	00 02       	muls	r16, r16
  7a:	00 02       	muls	r16, r16
  7c:	00 02       	muls	r16, r16
  7e:	79 01       	movw	r14, r18
  80:	37 01       	movw	r6, r14
  82:	3f 01       	movw	r6, r30
  84:	00 02       	muls	r16, r16
  86:	47 01       	movw	r8, r14
  88:	00 02       	muls	r16, r16
  8a:	00 02       	muls	r16, r16
  8c:	e4 01       	movw	r28, r8
  8e:	4e 01       	movw	r8, r28
  90:	00 02       	muls	r16, r16
  92:	aa 01       	movw	r20, r20
  94:	00 02       	muls	r16, r16
  96:	00 02       	muls	r16, r16
  98:	00 02       	muls	r16, r16
  9a:	00 02       	muls	r16, r16
  9c:	00 02       	muls	r16, r16
  9e:	00 02       	muls	r16, r16
  a0:	00 02       	muls	r16, r16
  a2:	00 02       	muls	r16, r16
  a4:	00 02       	muls	r16, r16
  a6:	00 02       	muls	r16, r16
  a8:	93 01       	movw	r18, r6
  aa:	00 02       	muls	r16, r16
  ac:	d8 01       	movw	r26, r16
  ae:	00 02       	muls	r16, r16
  b0:	df 01       	movw	r26, r30
  b2:	00 02       	muls	r16, r16
  b4:	00 02       	muls	r16, r16
  b6:	00 02       	muls	r16, r16
  b8:	00 02       	muls	r16, r16
  ba:	00 02       	muls	r16, r16
  bc:	00 02       	muls	r16, r16
  be:	79 01       	movw	r14, r18
  c0:	37 01       	movw	r6, r14
  c2:	3f 01       	movw	r6, r30
  c4:	00 02       	muls	r16, r16
  c6:	47 01       	movw	r8, r14
  c8:	00 02       	muls	r16, r16
  ca:	00 02       	muls	r16, r16
  cc:	e4 01       	movw	r28, r8
  ce:	4e 01       	movw	r8, r28
  d0:	00 02       	muls	r16, r16
  d2:	aa 01       	movw	r20, r20

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	ee e8       	ldi	r30, 0x8E	; 142
  e8:	fe e0       	ldi	r31, 0x0E	; 14
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ac 36       	cpi	r26, 0x6C	; 108
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	ac e6       	ldi	r26, 0x6C	; 108
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a8 3a       	cpi	r26, 0xA8	; 168
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}
	}
	return 1;
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 6e 02 	sts	0x026E, r18	; 0x80026e <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	e0 e7       	ldi	r30, 0x70	; 112
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 59       	subi	r30, 0x90	; 144
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
enum active{pot,lit,temper,OCR,ADC_val} on; // potentiometer measuring active,LDR measuring active,LM35 sensor active, OC2RA, ADC value

unsigned int enContDisplay = 0; //enable continuous display

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e2 97       	sbiw	r28, 0x32	; 50
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	int adc_mV;
	double temp;
	double OC;
	char ch;  /* character variable for received character*/
	char data[50];
	init_ports();
 1da:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1f2:	78 94       	sei
				case 'S':
				case 's':
				{
				//char data[50];
				OC = OCR2A;
				sprintf(data, "OCR2A = %f", OC);
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f1 e6       	ldi	r31, 0x61	; 97
 1f8:	6f 2e       	mov	r6, r31
 1fa:	f2 e0       	ldi	r31, 0x02	; 2
 1fc:	7f 2e       	mov	r7, r31
 1fe:	f0 2d       	mov	r31, r0
 200:	8e 01       	movw	r16, r28
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
				case 'V':
				case 'v':
				{
				//char data[50];
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 206:	0f 2e       	mov	r0, r31
 208:	f8 e8       	ldi	r31, 0x88	; 136
 20a:	af 2e       	mov	r10, r31
 20c:	f3 e1       	ldi	r31, 0x13	; 19
 20e:	bf 2e       	mov	r11, r31
 210:	f0 2d       	mov	r31, r0
 212:	0f 2e       	mov	r0, r31
 214:	ff e4       	ldi	r31, 0x4F	; 79
 216:	8f 2e       	mov	r8, r31
 218:	f2 e0       	ldi	r31, 0x02	; 2
 21a:	9f 2e       	mov	r9, r31
 21c:	f0 2d       	mov	r31, r0
				
				case 'A':
				case 'a':
				{
				//char data[50];
				sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 21e:	0f 2e       	mov	r0, r31
 220:	f0 e4       	ldi	r31, 0x40	; 64
 222:	2f 2e       	mov	r2, r31
 224:	f2 e0       	ldi	r31, 0x02	; 2
 226:	3f 2e       	mov	r3, r31
 228:	f0 2d       	mov	r31, r0
				case 'T':
				case 't':
				if (input == Temp) {
					//char data[50];
					temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					sprintf(data,"LM35 Temperature = %f deg C",temp);
 22a:	0f 2e       	mov	r0, r31
 22c:	f4 e2       	ldi	r31, 0x24	; 36
 22e:	ef 2e       	mov	r14, r31
 230:	f2 e0       	ldi	r31, 0x02	; 2
 232:	ff 2e       	mov	r15, r31
 234:	f0 2d       	mov	r31, r0
				case 'S':
				case 's':
				{
				//char data[50];
				OC = OCR2A;
				sprintf(data, "OCR2A = %f", OC);
 236:	50 2e       	mov	r5, r16
 238:	41 2e       	mov	r4, r17

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 23a:	0f 2e       	mov	r0, r31
 23c:	f0 ec       	ldi	r31, 0xC0	; 192
 23e:	cf 2e       	mov	r12, r31
 240:	d1 2c       	mov	r13, r1
 242:	f0 2d       	mov	r31, r0
 244:	d6 01       	movw	r26, r12
 246:	8c 91       	ld	r24, X
 248:	88 23       	and	r24, r24
 24a:	0c f0       	brlt	.+2      	; 0x24e <main+0x88>
 24c:	dd c0       	rjmp	.+442    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			ch = UDR0;    /*get character sent from PC*/
 24e:	a6 ec       	ldi	r26, 0xC6	; 198
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	ec 91       	ld	r30, X
			switch (ch) { //character input
 254:	8e 2f       	mov	r24, r30
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	e1 54       	subi	r30, 0x41	; 65
 25c:	f1 09       	sbc	r31, r1
 25e:	e6 33       	cpi	r30, 0x36	; 54
 260:	f1 05       	cpc	r31, r1
 262:	08 f0       	brcs	.+2      	; 0x266 <main+0xa0>
 264:	cd c0       	rjmp	.+410    	; 0x400 <__LOCK_REGION_LENGTH__>
 266:	ec 5c       	subi	r30, 0xCC	; 204
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	0c 94 46 04 	jmp	0x88c	; 0x88c <__tablejump2__>
				
				case 'M':
				case 'm':
				input = Temp;
 26e:	b2 e0       	ldi	r27, 0x02	; 2
 270:	b0 93 a3 02 	sts	0x02A3, r27	; 0x8002a3 <input>
				sendmsg(msg2);
 274:	82 ee       	ldi	r24, 0xE2	; 226
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 27c:	c5 c0       	rjmp	.+394    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'N':
				case 'n':
				input = LDR;
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	e0 93 a3 02 	sts	0x02A3, r30	; 0x8002a3 <input>
				sendmsg(msg3);
 284:	84 ec       	ldi	r24, 0xC4	; 196
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 28c:	bd c0       	rjmp	.+378    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'P':
				case 'p':
				input = Volt;
 28e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <input>
				sendmsg(msg4);
 292:	8c e9       	ldi	r24, 0x9C	; 156
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 29a:	b6 c0       	rjmp	.+364    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'T':
				case 't':
				if (input == Temp) {
 29c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <input>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	11 f5       	brne	.+68     	; 0x2e8 <main+0x122>
					//char data[50];
					temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					sprintf(data,"LM35 Temperature = %f deg C",temp);
 2a4:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <adc_reading>
 2a8:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 4b 03 	call	0x696	; 0x696 <__floatunsisf>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	5f e3       	ldi	r21, 0x3F	; 63
 2bc:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3>
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	7f 93       	push	r23
 2c6:	6f 93       	push	r22
 2c8:	ff 92       	push	r15
 2ca:	ef 92       	push	r14
 2cc:	1f 93       	push	r17
 2ce:	0f 93       	push	r16
 2d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 2d4:	85 2d       	mov	r24, r5
 2d6:	94 2d       	mov	r25, r4
 2d8:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	90 c0       	rjmp	.+288    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				} else {
					//Give warning
					sendmsg(msg5);
 2e8:	86 e5       	ldi	r24, 0x56	; 86
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2f0:	8b c0       	rjmp	.+278    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				break;
				
				case 'L':
				case 'l':
				if (input == LDR) {
 2f2:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <input>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	89 f4       	brne	.+34     	; 0x31c <main+0x156>
						if(adc_reading>512)
 2fa:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <adc_reading>
 2fe:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	92 40       	sbci	r25, 0x02	; 2
 306:	28 f0       	brcs	.+10     	; 0x312 <main+0x14c>
						{
							sendmsg(msg7);
 308:	8b e0       	ldi	r24, 0x0B	; 11
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 310:	7b c0       	rjmp	.+246    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
						}
						else
						{
							sendmsg(msg8);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 31a:	76 c0       	rjmp	.+236    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
						}
					} else {
					//Give warning
					sendmsg(msg6);
 31c:	88 e1       	ldi	r24, 0x18	; 24
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 324:	71 c0       	rjmp	.+226    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'A':
				case 'a':
				{
				//char data[50];
				sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 326:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 32a:	8f 93       	push	r24
 32c:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <adc_reading>
 330:	8f 93       	push	r24
 332:	3f 92       	push	r3
 334:	2f 92       	push	r2
 336:	1f 93       	push	r17
 338:	0f 93       	push	r16
 33a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
				sendmsg(data);
 33e:	85 2d       	mov	r24, r5
 340:	94 2d       	mov	r25, r4
 342:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	5a c0       	rjmp	.+180    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				case 'V':
				case 'v':
				{
				//char data[50];
				adc_mV = (adc_reading/1000)*5000;
				sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 354:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <adc_reading>
 358:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 35c:	36 95       	lsr	r19
 35e:	27 95       	ror	r18
 360:	36 95       	lsr	r19
 362:	27 95       	ror	r18
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	a5 ec       	ldi	r26, 0xC5	; 197
 36a:	b0 e2       	ldi	r27, 0x20	; 32
 36c:	0e 94 4c 04 	call	0x898	; 0x898 <__umulhisi3>
 370:	92 95       	swap	r25
 372:	82 95       	swap	r24
 374:	8f 70       	andi	r24, 0x0F	; 15
 376:	89 27       	eor	r24, r25
 378:	9f 70       	andi	r25, 0x0F	; 15
 37a:	89 27       	eor	r24, r25
 37c:	8a 9d       	mul	r24, r10
 37e:	90 01       	movw	r18, r0
 380:	8b 9d       	mul	r24, r11
 382:	30 0d       	add	r19, r0
 384:	9a 9d       	mul	r25, r10
 386:	30 0d       	add	r19, r0
 388:	11 24       	eor	r1, r1
 38a:	3f 93       	push	r19
 38c:	2f 93       	push	r18
 38e:	9f 92       	push	r9
 390:	8f 92       	push	r8
 392:	1f 93       	push	r17
 394:	0f 93       	push	r16
 396:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
				sendmsg(data);
 39a:	85 2d       	mov	r24, r5
 39c:	94 2d       	mov	r25, r4
 39e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				
				break;
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	2c c0       	rjmp	.+88     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__data_end+0x1>
 3b8:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__data_end>
				break;
 3bc:	25 c0       	rjmp	.+74     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 3be:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
 3c2:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
				break;
 3c6:	20 c0       	rjmp	.+64     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 'S':
				case 's':
				{
				//char data[50];
				OC = OCR2A;
 3c8:	a3 eb       	ldi	r26, 0xB3	; 179
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	6c 91       	ld	r22, X
				sprintf(data, "OCR2A = %f", OC);
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 4b 03 	call	0x696	; 0x696 <__floatunsisf>
 3d8:	9f 93       	push	r25
 3da:	8f 93       	push	r24
 3dc:	7f 93       	push	r23
 3de:	6f 93       	push	r22
 3e0:	7f 92       	push	r7
 3e2:	6f 92       	push	r6
 3e4:	1f 93       	push	r17
 3e6:	0f 93       	push	r16
 3e8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
				sendmsg(data);
 3ec:	85 2d       	mov	r24, r5
 3ee:	94 2d       	mov	r25, r4
 3f0:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				default:
				sendmsg(msg1); /*send default message*/
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
			}
		}
		
		if(new_adc_data) {
 408:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <new_adc_data>
 40c:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <new_adc_data+0x1>
 410:	89 2b       	or	r24, r25
 412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	17 cf       	rjmp	.-466    	; 0x244 <main+0x7e>
 416:	c7 c0       	rjmp	.+398    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
			while(enContDisplay) {
				switch(on){
 418:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <on>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	4c c0       	rjmp	.+152    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 422:	28 f4       	brcc	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	88 23       	and	r24, r24
 426:	51 f0       	breq	.+20     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	b1 f1       	breq	.+108    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 42c:	9b c0       	rjmp	.+310    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	65 c0       	rjmp	.+202    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	7e c0       	rjmp	.+252    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 43a:	94 c0       	rjmp	.+296    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
					case pot:
					adc_mV = (adc_reading/1000)*5000;
					sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 43c:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <adc_reading>
 440:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 444:	36 95       	lsr	r19
 446:	27 95       	ror	r18
 448:	36 95       	lsr	r19
 44a:	27 95       	ror	r18
 44c:	36 95       	lsr	r19
 44e:	27 95       	ror	r18
 450:	a5 ec       	ldi	r26, 0xC5	; 197
 452:	b0 e2       	ldi	r27, 0x20	; 32
 454:	0e 94 4c 04 	call	0x898	; 0x898 <__umulhisi3>
 458:	92 95       	swap	r25
 45a:	82 95       	swap	r24
 45c:	8f 70       	andi	r24, 0x0F	; 15
 45e:	89 27       	eor	r24, r25
 460:	9f 70       	andi	r25, 0x0F	; 15
 462:	89 27       	eor	r24, r25
 464:	8a 9d       	mul	r24, r10
 466:	90 01       	movw	r18, r0
 468:	8b 9d       	mul	r24, r11
 46a:	30 0d       	add	r19, r0
 46c:	9a 9d       	mul	r25, r10
 46e:	30 0d       	add	r19, r0
 470:	11 24       	eor	r1, r1
 472:	3f 93       	push	r19
 474:	2f 93       	push	r18
 476:	9f 92       	push	r9
 478:	8f 92       	push	r8
 47a:	1f 93       	push	r17
 47c:	0f 93       	push	r16
 47e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 482:	85 2d       	mov	r24, r5
 484:	94 2d       	mov	r25, r4
 486:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
					break;
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	87 c0       	rjmp	.+270    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					
					case lit:
					if(adc_reading>512)
 498:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <adc_reading>
 49c:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	92 40       	sbci	r25, 0x02	; 2
 4a4:	28 f0       	brcs	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					{
						sendmsg(msg7);
 4a6:	8b e0       	ldi	r24, 0x0B	; 11
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 4ae:	7b c0       	rjmp	.+246    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					}
					else
					{
						sendmsg(msg8);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 4b8:	76 c0       	rjmp	.+236    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					}
					break;
					
					case temper:
					temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					sprintf(data,"LM35 Temperature = %f deg C",temp);
 4ba:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <adc_reading>
 4be:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 4b 03 	call	0x696	; 0x696 <__floatunsisf>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	5f e3       	ldi	r21, 0x3F	; 63
 4d2:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3>
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	7f 93       	push	r23
 4dc:	6f 93       	push	r22
 4de:	ff 92       	push	r15
 4e0:	ef 92       	push	r14
 4e2:	1f 93       	push	r17
 4e4:	0f 93       	push	r16
 4e6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 4ea:	85 2d       	mov	r24, r5
 4ec:	94 2d       	mov	r25, r4
 4ee:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
					break;
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	54 c0       	rjmp	.+168    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					
					case OCR:
					OC = OCR2A;
 4fe:	a3 eb       	ldi	r26, 0xB3	; 179
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	6c 91       	ld	r22, X
					sprintf(data, "OCR2A = %f", OC);
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 4b 03 	call	0x696	; 0x696 <__floatunsisf>
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	7f 93       	push	r23
 514:	6f 93       	push	r22
 516:	7f 92       	push	r7
 518:	6f 92       	push	r6
 51a:	1f 93       	push	r17
 51c:	0f 93       	push	r16
 51e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 522:	85 2d       	mov	r24, r5
 524:	94 2d       	mov	r25, r4
 526:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
					break;
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	38 c0       	rjmp	.+112    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					
					case ADC_val:
					sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 536:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 53a:	8f 93       	push	r24
 53c:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <adc_reading>
 540:	8f 93       	push	r24
 542:	3f 92       	push	r3
 544:	2f 92       	push	r2
 546:	1f 93       	push	r17
 548:	0f 93       	push	r16
 54a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 54e:	85 2d       	mov	r24, r5
 550:	94 2d       	mov	r25, r4
 552:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
					break;
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	21 c0       	rjmp	.+66     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					
					default:
					temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					sprintf(data,"LM35 Temperature = %f deg C",temp);
 564:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <adc_reading>
 568:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <adc_reading+0x1>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 4b 03 	call	0x696	; 0x696 <__floatunsisf>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	5f e3       	ldi	r21, 0x3F	; 63
 57c:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3>
 580:	9f 93       	push	r25
 582:	8f 93       	push	r24
 584:	7f 93       	push	r23
 586:	6f 93       	push	r22
 588:	ff 92       	push	r15
 58a:	ef 92       	push	r14
 58c:	1f 93       	push	r17
 58e:	0f 93       	push	r16
 590:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
					sendmsg(data);
 594:	85 2d       	mov	r24, r5
 596:	94 2d       	mov	r25, r4
 598:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
				sendmsg(msg1); /*send default message*/
			}
		}
		
		if(new_adc_data) {
			while(enContDisplay) {
 5a6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
 5aa:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
 5ae:	89 2b       	or	r24, r25
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5b2:	32 cf       	rjmp	.-412    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
					temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
					sprintf(data,"LM35 Temperature = %f deg C",temp);
					sendmsg(data);
				}
			}
			new_adc_data=0;
 5b4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <new_adc_data+0x1>
 5b8:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <new_adc_data>
 5bc:	3e ce       	rjmp	.-900    	; 0x23a <main+0x74>

000005be <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	8f 93       	push	r24
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 5ce:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <sndcntr>
 5d2:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <qcntr>
 5d6:	8e 17       	cp	r24, r30
 5d8:	51 f0       	breq	.+20     	; 0x5ee <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	8e 0f       	add	r24, r30
 5de:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <sndcntr>
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	e0 59       	subi	r30, 0x90	; 144
 5e6:	fd 4f       	sbci	r31, 0xFD	; 253
 5e8:	80 81       	ld	r24, Z
 5ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	8f 91       	pop	r24
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
	
	//adc_reading = ADC;
	new_adc_data = 1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <new_adc_data+0x1>
 614:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <new_adc_data>
	switch(input) {
 618:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <input>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	81 f0       	breq	.+32     	; 0x640 <__vector_21+0x42>
 620:	18 f0       	brcs	.+6      	; 0x628 <__vector_21+0x2a>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	c9 f0       	breq	.+50     	; 0x658 <__vector_21+0x5a>
 626:	24 c0       	rjmp	.+72     	; 0x670 <__vector_21+0x72>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 628:	80 e8       	ldi	r24, 0x80	; 128
 62a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 62e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 632:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 636:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <adc_reading+0x1>
 63a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <adc_reading>
		break;
 63e:	23 c0       	rjmp	.+70     	; 0x686 <__vector_21+0x88>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 640:	81 e8       	ldi	r24, 0x81	; 129
 642:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 646:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 64a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 64e:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <adc_reading+0x1>
 652:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <adc_reading>
		break;
 656:	17 c0       	rjmp	.+46     	; 0x686 <__vector_21+0x88>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 658:	82 e8       	ldi	r24, 0x82	; 130
 65a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 65e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 662:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 666:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <adc_reading+0x1>
 66a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <adc_reading>
		break;
 66e:	0b c0       	rjmp	.+22     	; 0x686 <__vector_21+0x88>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 670:	82 e8       	ldi	r24, 0x82	; 130
 672:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 676:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 67a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 67e:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <adc_reading+0x1>
 682:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <adc_reading>
	}
	TIFR0 = TIFR0 & ~(1<<0); //clears Counter0 overflow
 686:	a8 98       	cbi	0x15, 0	; 21
}
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__floatunsisf>:
 696:	e8 94       	clt
 698:	09 c0       	rjmp	.+18     	; 0x6ac <__floatsisf+0x12>

0000069a <__floatsisf>:
 69a:	97 fb       	bst	r25, 7
 69c:	3e f4       	brtc	.+14     	; 0x6ac <__floatsisf+0x12>
 69e:	90 95       	com	r25
 6a0:	80 95       	com	r24
 6a2:	70 95       	com	r23
 6a4:	61 95       	neg	r22
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	99 23       	and	r25, r25
 6ae:	a9 f0       	breq	.+42     	; 0x6da <__floatsisf+0x40>
 6b0:	f9 2f       	mov	r31, r25
 6b2:	96 e9       	ldi	r25, 0x96	; 150
 6b4:	bb 27       	eor	r27, r27
 6b6:	93 95       	inc	r25
 6b8:	f6 95       	lsr	r31
 6ba:	87 95       	ror	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f1 11       	cpse	r31, r1
 6c4:	f8 cf       	rjmp	.-16     	; 0x6b6 <__floatsisf+0x1c>
 6c6:	fa f4       	brpl	.+62     	; 0x706 <__floatsisf+0x6c>
 6c8:	bb 0f       	add	r27, r27
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__floatsisf+0x36>
 6cc:	60 ff       	sbrs	r22, 0
 6ce:	1b c0       	rjmp	.+54     	; 0x706 <__floatsisf+0x6c>
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <__floatsisf+0x6c>
 6da:	88 23       	and	r24, r24
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <__floatsisf+0x48>
 6de:	96 e9       	ldi	r25, 0x96	; 150
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <__floatsisf+0x6a>
 6e2:	77 23       	and	r23, r23
 6e4:	21 f0       	breq	.+8      	; 0x6ee <__floatsisf+0x54>
 6e6:	9e e8       	ldi	r25, 0x8E	; 142
 6e8:	87 2f       	mov	r24, r23
 6ea:	76 2f       	mov	r23, r22
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <__floatsisf+0x5e>
 6ee:	66 23       	and	r22, r22
 6f0:	71 f0       	breq	.+28     	; 0x70e <__floatsisf+0x74>
 6f2:	96 e8       	ldi	r25, 0x86	; 134
 6f4:	86 2f       	mov	r24, r22
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	2a f0       	brmi	.+10     	; 0x706 <__floatsisf+0x6c>
 6fc:	9a 95       	dec	r25
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	da f7       	brpl	.-10     	; 0x6fc <__floatsisf+0x62>
 706:	88 0f       	add	r24, r24
 708:	96 95       	lsr	r25
 70a:	87 95       	ror	r24
 70c:	97 f9       	bld	r25, 7
 70e:	08 95       	ret

00000710 <__mulsf3>:
 710:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3x>
 714:	0c 94 0c 04 	jmp	0x818	; 0x818 <__fp_round>
 718:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_pscA>
 71c:	38 f0       	brcs	.+14     	; 0x72c <__mulsf3+0x1c>
 71e:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_pscB>
 722:	20 f0       	brcs	.+8      	; 0x72c <__mulsf3+0x1c>
 724:	95 23       	and	r25, r21
 726:	11 f0       	breq	.+4      	; 0x72c <__mulsf3+0x1c>
 728:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_inf>
 72c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_nan>
 730:	11 24       	eor	r1, r1
 732:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_szero>

00000736 <__mulsf3x>:
 736:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_split3>
 73a:	70 f3       	brcs	.-36     	; 0x718 <__mulsf3+0x8>

0000073c <__mulsf3_pse>:
 73c:	95 9f       	mul	r25, r21
 73e:	c1 f3       	breq	.-16     	; 0x730 <__mulsf3+0x20>
 740:	95 0f       	add	r25, r21
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	55 1f       	adc	r21, r21
 746:	62 9f       	mul	r22, r18
 748:	f0 01       	movw	r30, r0
 74a:	72 9f       	mul	r23, r18
 74c:	bb 27       	eor	r27, r27
 74e:	f0 0d       	add	r31, r0
 750:	b1 1d       	adc	r27, r1
 752:	63 9f       	mul	r22, r19
 754:	aa 27       	eor	r26, r26
 756:	f0 0d       	add	r31, r0
 758:	b1 1d       	adc	r27, r1
 75a:	aa 1f       	adc	r26, r26
 75c:	64 9f       	mul	r22, r20
 75e:	66 27       	eor	r22, r22
 760:	b0 0d       	add	r27, r0
 762:	a1 1d       	adc	r26, r1
 764:	66 1f       	adc	r22, r22
 766:	82 9f       	mul	r24, r18
 768:	22 27       	eor	r18, r18
 76a:	b0 0d       	add	r27, r0
 76c:	a1 1d       	adc	r26, r1
 76e:	62 1f       	adc	r22, r18
 770:	73 9f       	mul	r23, r19
 772:	b0 0d       	add	r27, r0
 774:	a1 1d       	adc	r26, r1
 776:	62 1f       	adc	r22, r18
 778:	83 9f       	mul	r24, r19
 77a:	a0 0d       	add	r26, r0
 77c:	61 1d       	adc	r22, r1
 77e:	22 1f       	adc	r18, r18
 780:	74 9f       	mul	r23, r20
 782:	33 27       	eor	r19, r19
 784:	a0 0d       	add	r26, r0
 786:	61 1d       	adc	r22, r1
 788:	23 1f       	adc	r18, r19
 78a:	84 9f       	mul	r24, r20
 78c:	60 0d       	add	r22, r0
 78e:	21 1d       	adc	r18, r1
 790:	82 2f       	mov	r24, r18
 792:	76 2f       	mov	r23, r22
 794:	6a 2f       	mov	r22, r26
 796:	11 24       	eor	r1, r1
 798:	9f 57       	subi	r25, 0x7F	; 127
 79a:	50 40       	sbci	r21, 0x00	; 0
 79c:	9a f0       	brmi	.+38     	; 0x7c4 <__mulsf3_pse+0x88>
 79e:	f1 f0       	breq	.+60     	; 0x7dc <__mulsf3_pse+0xa0>
 7a0:	88 23       	and	r24, r24
 7a2:	4a f0       	brmi	.+18     	; 0x7b6 <__mulsf3_pse+0x7a>
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	bb 1f       	adc	r27, r27
 7aa:	66 1f       	adc	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	91 50       	subi	r25, 0x01	; 1
 7b2:	50 40       	sbci	r21, 0x00	; 0
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <__mulsf3_pse+0x64>
 7b6:	9e 3f       	cpi	r25, 0xFE	; 254
 7b8:	51 05       	cpc	r21, r1
 7ba:	80 f0       	brcs	.+32     	; 0x7dc <__mulsf3_pse+0xa0>
 7bc:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_inf>
 7c0:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_szero>
 7c4:	5f 3f       	cpi	r21, 0xFF	; 255
 7c6:	e4 f3       	brlt	.-8      	; 0x7c0 <__mulsf3_pse+0x84>
 7c8:	98 3e       	cpi	r25, 0xE8	; 232
 7ca:	d4 f3       	brlt	.-12     	; 0x7c0 <__mulsf3_pse+0x84>
 7cc:	86 95       	lsr	r24
 7ce:	77 95       	ror	r23
 7d0:	67 95       	ror	r22
 7d2:	b7 95       	ror	r27
 7d4:	f7 95       	ror	r31
 7d6:	e7 95       	ror	r30
 7d8:	9f 5f       	subi	r25, 0xFF	; 255
 7da:	c1 f7       	brne	.-16     	; 0x7cc <__mulsf3_pse+0x90>
 7dc:	fe 2b       	or	r31, r30
 7de:	88 0f       	add	r24, r24
 7e0:	91 1d       	adc	r25, r1
 7e2:	96 95       	lsr	r25
 7e4:	87 95       	ror	r24
 7e6:	97 f9       	bld	r25, 7
 7e8:	08 95       	ret

000007ea <__fp_inf>:
 7ea:	97 f9       	bld	r25, 7
 7ec:	9f 67       	ori	r25, 0x7F	; 127
 7ee:	80 e8       	ldi	r24, 0x80	; 128
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	08 95       	ret

000007f6 <__fp_nan>:
 7f6:	9f ef       	ldi	r25, 0xFF	; 255
 7f8:	80 ec       	ldi	r24, 0xC0	; 192
 7fa:	08 95       	ret

000007fc <__fp_pscA>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	16 16       	cp	r1, r22
 802:	17 06       	cpc	r1, r23
 804:	18 06       	cpc	r1, r24
 806:	09 06       	cpc	r0, r25
 808:	08 95       	ret

0000080a <__fp_pscB>:
 80a:	00 24       	eor	r0, r0
 80c:	0a 94       	dec	r0
 80e:	12 16       	cp	r1, r18
 810:	13 06       	cpc	r1, r19
 812:	14 06       	cpc	r1, r20
 814:	05 06       	cpc	r0, r21
 816:	08 95       	ret

00000818 <__fp_round>:
 818:	09 2e       	mov	r0, r25
 81a:	03 94       	inc	r0
 81c:	00 0c       	add	r0, r0
 81e:	11 f4       	brne	.+4      	; 0x824 <__fp_round+0xc>
 820:	88 23       	and	r24, r24
 822:	52 f0       	brmi	.+20     	; 0x838 <__fp_round+0x20>
 824:	bb 0f       	add	r27, r27
 826:	40 f4       	brcc	.+16     	; 0x838 <__fp_round+0x20>
 828:	bf 2b       	or	r27, r31
 82a:	11 f4       	brne	.+4      	; 0x830 <__fp_round+0x18>
 82c:	60 ff       	sbrs	r22, 0
 82e:	04 c0       	rjmp	.+8      	; 0x838 <__fp_round+0x20>
 830:	6f 5f       	subi	r22, 0xFF	; 255
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	8f 4f       	sbci	r24, 0xFF	; 255
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	08 95       	ret

0000083a <__fp_split3>:
 83a:	57 fd       	sbrc	r21, 7
 83c:	90 58       	subi	r25, 0x80	; 128
 83e:	44 0f       	add	r20, r20
 840:	55 1f       	adc	r21, r21
 842:	59 f0       	breq	.+22     	; 0x85a <__fp_splitA+0x10>
 844:	5f 3f       	cpi	r21, 0xFF	; 255
 846:	71 f0       	breq	.+28     	; 0x864 <__fp_splitA+0x1a>
 848:	47 95       	ror	r20

0000084a <__fp_splitA>:
 84a:	88 0f       	add	r24, r24
 84c:	97 fb       	bst	r25, 7
 84e:	99 1f       	adc	r25, r25
 850:	61 f0       	breq	.+24     	; 0x86a <__fp_splitA+0x20>
 852:	9f 3f       	cpi	r25, 0xFF	; 255
 854:	79 f0       	breq	.+30     	; 0x874 <__fp_splitA+0x2a>
 856:	87 95       	ror	r24
 858:	08 95       	ret
 85a:	12 16       	cp	r1, r18
 85c:	13 06       	cpc	r1, r19
 85e:	14 06       	cpc	r1, r20
 860:	55 1f       	adc	r21, r21
 862:	f2 cf       	rjmp	.-28     	; 0x848 <__fp_split3+0xe>
 864:	46 95       	lsr	r20
 866:	f1 df       	rcall	.-30     	; 0x84a <__fp_splitA>
 868:	08 c0       	rjmp	.+16     	; 0x87a <__fp_splitA+0x30>
 86a:	16 16       	cp	r1, r22
 86c:	17 06       	cpc	r1, r23
 86e:	18 06       	cpc	r1, r24
 870:	99 1f       	adc	r25, r25
 872:	f1 cf       	rjmp	.-30     	; 0x856 <__fp_splitA+0xc>
 874:	86 95       	lsr	r24
 876:	71 05       	cpc	r23, r1
 878:	61 05       	cpc	r22, r1
 87a:	08 94       	sec
 87c:	08 95       	ret

0000087e <__fp_zero>:
 87e:	e8 94       	clt

00000880 <__fp_szero>:
 880:	bb 27       	eor	r27, r27
 882:	66 27       	eor	r22, r22
 884:	77 27       	eor	r23, r23
 886:	cb 01       	movw	r24, r22
 888:	97 f9       	bld	r25, 7
 88a:	08 95       	ret

0000088c <__tablejump2__>:
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	05 90       	lpm	r0, Z+
 892:	f4 91       	lpm	r31, Z
 894:	e0 2d       	mov	r30, r0
 896:	09 94       	ijmp

00000898 <__umulhisi3>:
 898:	a2 9f       	mul	r26, r18
 89a:	b0 01       	movw	r22, r0
 89c:	b3 9f       	mul	r27, r19
 89e:	c0 01       	movw	r24, r0
 8a0:	a3 9f       	mul	r26, r19
 8a2:	70 0d       	add	r23, r0
 8a4:	81 1d       	adc	r24, r1
 8a6:	11 24       	eor	r1, r1
 8a8:	91 1d       	adc	r25, r1
 8aa:	b2 9f       	mul	r27, r18
 8ac:	70 0d       	add	r23, r0
 8ae:	81 1d       	adc	r24, r1
 8b0:	11 24       	eor	r1, r1
 8b2:	91 1d       	adc	r25, r1
 8b4:	08 95       	ret

000008b6 <sprintf>:
 8b6:	ae e0       	ldi	r26, 0x0E	; 14
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e1 e6       	ldi	r30, 0x61	; 97
 8bc:	f4 e0       	ldi	r31, 0x04	; 4
 8be:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__prologue_saves__+0x1c>
 8c2:	0d 89       	ldd	r16, Y+21	; 0x15
 8c4:	1e 89       	ldd	r17, Y+22	; 0x16
 8c6:	86 e0       	ldi	r24, 0x06	; 6
 8c8:	8c 83       	std	Y+4, r24	; 0x04
 8ca:	1a 83       	std	Y+2, r17	; 0x02
 8cc:	09 83       	std	Y+1, r16	; 0x01
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	9f e7       	ldi	r25, 0x7F	; 127
 8d2:	9e 83       	std	Y+6, r25	; 0x06
 8d4:	8d 83       	std	Y+5, r24	; 0x05
 8d6:	ae 01       	movw	r20, r28
 8d8:	47 5e       	subi	r20, 0xE7	; 231
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	6f 89       	ldd	r22, Y+23	; 0x17
 8de:	78 8d       	ldd	r23, Y+24	; 0x18
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <vfprintf>
 8e8:	ef 81       	ldd	r30, Y+7	; 0x07
 8ea:	f8 85       	ldd	r31, Y+8	; 0x08
 8ec:	e0 0f       	add	r30, r16
 8ee:	f1 1f       	adc	r31, r17
 8f0:	10 82       	st	Z, r1
 8f2:	2e 96       	adiw	r28, 0x0e	; 14
 8f4:	e4 e0       	ldi	r30, 0x04	; 4
 8f6:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__epilogue_restores__+0x1c>

000008fa <vfprintf>:
 8fa:	ab e0       	ldi	r26, 0x0B	; 11
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	e3 e8       	ldi	r30, 0x83	; 131
 900:	f4 e0       	ldi	r31, 0x04	; 4
 902:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__prologue_saves__>
 906:	6c 01       	movw	r12, r24
 908:	7b 01       	movw	r14, r22
 90a:	8a 01       	movw	r16, r20
 90c:	fc 01       	movw	r30, r24
 90e:	17 82       	std	Z+7, r1	; 0x07
 910:	16 82       	std	Z+6, r1	; 0x06
 912:	83 81       	ldd	r24, Z+3	; 0x03
 914:	81 ff       	sbrs	r24, 1
 916:	cc c1       	rjmp	.+920    	; 0xcb0 <__stack+0x3b1>
 918:	ce 01       	movw	r24, r28
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	3c 01       	movw	r6, r24
 91e:	f6 01       	movw	r30, r12
 920:	93 81       	ldd	r25, Z+3	; 0x03
 922:	f7 01       	movw	r30, r14
 924:	93 fd       	sbrc	r25, 3
 926:	85 91       	lpm	r24, Z+
 928:	93 ff       	sbrs	r25, 3
 92a:	81 91       	ld	r24, Z+
 92c:	7f 01       	movw	r14, r30
 92e:	88 23       	and	r24, r24
 930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
 932:	ba c1       	rjmp	.+884    	; 0xca8 <__stack+0x3a9>
 934:	85 32       	cpi	r24, 0x25	; 37
 936:	39 f4       	brne	.+14     	; 0x946 <__stack+0x47>
 938:	93 fd       	sbrc	r25, 3
 93a:	85 91       	lpm	r24, Z+
 93c:	93 ff       	sbrs	r25, 3
 93e:	81 91       	ld	r24, Z+
 940:	7f 01       	movw	r14, r30
 942:	85 32       	cpi	r24, 0x25	; 37
 944:	29 f4       	brne	.+10     	; 0x950 <__stack+0x51>
 946:	b6 01       	movw	r22, r12
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 94e:	e7 cf       	rjmp	.-50     	; 0x91e <__stack+0x1f>
 950:	91 2c       	mov	r9, r1
 952:	21 2c       	mov	r2, r1
 954:	31 2c       	mov	r3, r1
 956:	ff e1       	ldi	r31, 0x1F	; 31
 958:	f3 15       	cp	r31, r3
 95a:	d8 f0       	brcs	.+54     	; 0x992 <__stack+0x93>
 95c:	8b 32       	cpi	r24, 0x2B	; 43
 95e:	79 f0       	breq	.+30     	; 0x97e <__stack+0x7f>
 960:	38 f4       	brcc	.+14     	; 0x970 <__stack+0x71>
 962:	80 32       	cpi	r24, 0x20	; 32
 964:	79 f0       	breq	.+30     	; 0x984 <__stack+0x85>
 966:	83 32       	cpi	r24, 0x23	; 35
 968:	a1 f4       	brne	.+40     	; 0x992 <__stack+0x93>
 96a:	23 2d       	mov	r18, r3
 96c:	20 61       	ori	r18, 0x10	; 16
 96e:	1d c0       	rjmp	.+58     	; 0x9aa <__stack+0xab>
 970:	8d 32       	cpi	r24, 0x2D	; 45
 972:	61 f0       	breq	.+24     	; 0x98c <__stack+0x8d>
 974:	80 33       	cpi	r24, 0x30	; 48
 976:	69 f4       	brne	.+26     	; 0x992 <__stack+0x93>
 978:	23 2d       	mov	r18, r3
 97a:	21 60       	ori	r18, 0x01	; 1
 97c:	16 c0       	rjmp	.+44     	; 0x9aa <__stack+0xab>
 97e:	83 2d       	mov	r24, r3
 980:	82 60       	ori	r24, 0x02	; 2
 982:	38 2e       	mov	r3, r24
 984:	e3 2d       	mov	r30, r3
 986:	e4 60       	ori	r30, 0x04	; 4
 988:	3e 2e       	mov	r3, r30
 98a:	2a c0       	rjmp	.+84     	; 0x9e0 <__stack+0xe1>
 98c:	f3 2d       	mov	r31, r3
 98e:	f8 60       	ori	r31, 0x08	; 8
 990:	1d c0       	rjmp	.+58     	; 0x9cc <__stack+0xcd>
 992:	37 fc       	sbrc	r3, 7
 994:	2d c0       	rjmp	.+90     	; 0x9f0 <__stack+0xf1>
 996:	20 ed       	ldi	r18, 0xD0	; 208
 998:	28 0f       	add	r18, r24
 99a:	2a 30       	cpi	r18, 0x0A	; 10
 99c:	40 f0       	brcs	.+16     	; 0x9ae <__stack+0xaf>
 99e:	8e 32       	cpi	r24, 0x2E	; 46
 9a0:	b9 f4       	brne	.+46     	; 0x9d0 <__stack+0xd1>
 9a2:	36 fc       	sbrc	r3, 6
 9a4:	81 c1       	rjmp	.+770    	; 0xca8 <__stack+0x3a9>
 9a6:	23 2d       	mov	r18, r3
 9a8:	20 64       	ori	r18, 0x40	; 64
 9aa:	32 2e       	mov	r3, r18
 9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <__stack+0xe1>
 9ae:	36 fe       	sbrs	r3, 6
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <__stack+0xbf>
 9b2:	8a e0       	ldi	r24, 0x0A	; 10
 9b4:	98 9e       	mul	r9, r24
 9b6:	20 0d       	add	r18, r0
 9b8:	11 24       	eor	r1, r1
 9ba:	92 2e       	mov	r9, r18
 9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <__stack+0xe1>
 9be:	ea e0       	ldi	r30, 0x0A	; 10
 9c0:	2e 9e       	mul	r2, r30
 9c2:	20 0d       	add	r18, r0
 9c4:	11 24       	eor	r1, r1
 9c6:	22 2e       	mov	r2, r18
 9c8:	f3 2d       	mov	r31, r3
 9ca:	f0 62       	ori	r31, 0x20	; 32
 9cc:	3f 2e       	mov	r3, r31
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <__stack+0xe1>
 9d0:	8c 36       	cpi	r24, 0x6C	; 108
 9d2:	21 f4       	brne	.+8      	; 0x9dc <__stack+0xdd>
 9d4:	83 2d       	mov	r24, r3
 9d6:	80 68       	ori	r24, 0x80	; 128
 9d8:	38 2e       	mov	r3, r24
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	88 36       	cpi	r24, 0x68	; 104
 9de:	41 f4       	brne	.+16     	; 0x9f0 <__stack+0xf1>
 9e0:	f7 01       	movw	r30, r14
 9e2:	93 fd       	sbrc	r25, 3
 9e4:	85 91       	lpm	r24, Z+
 9e6:	93 ff       	sbrs	r25, 3
 9e8:	81 91       	ld	r24, Z+
 9ea:	7f 01       	movw	r14, r30
 9ec:	81 11       	cpse	r24, r1
 9ee:	b3 cf       	rjmp	.-154    	; 0x956 <__stack+0x57>
 9f0:	98 2f       	mov	r25, r24
 9f2:	9f 7d       	andi	r25, 0xDF	; 223
 9f4:	95 54       	subi	r25, 0x45	; 69
 9f6:	93 30       	cpi	r25, 0x03	; 3
 9f8:	28 f4       	brcc	.+10     	; 0xa04 <__stack+0x105>
 9fa:	0c 5f       	subi	r16, 0xFC	; 252
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	9f e3       	ldi	r25, 0x3F	; 63
 a00:	99 83       	std	Y+1, r25	; 0x01
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <__stack+0x11f>
 a04:	83 36       	cpi	r24, 0x63	; 99
 a06:	31 f0       	breq	.+12     	; 0xa14 <__stack+0x115>
 a08:	83 37       	cpi	r24, 0x73	; 115
 a0a:	71 f0       	breq	.+28     	; 0xa28 <__stack+0x129>
 a0c:	83 35       	cpi	r24, 0x53	; 83
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__stack+0x113>
 a10:	59 c0       	rjmp	.+178    	; 0xac4 <__stack+0x1c5>
 a12:	21 c0       	rjmp	.+66     	; 0xa56 <__stack+0x157>
 a14:	f8 01       	movw	r30, r16
 a16:	80 81       	ld	r24, Z
 a18:	89 83       	std	Y+1, r24	; 0x01
 a1a:	0e 5f       	subi	r16, 0xFE	; 254
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	88 24       	eor	r8, r8
 a20:	83 94       	inc	r8
 a22:	91 2c       	mov	r9, r1
 a24:	53 01       	movw	r10, r6
 a26:	13 c0       	rjmp	.+38     	; 0xa4e <__stack+0x14f>
 a28:	28 01       	movw	r4, r16
 a2a:	f2 e0       	ldi	r31, 0x02	; 2
 a2c:	4f 0e       	add	r4, r31
 a2e:	51 1c       	adc	r5, r1
 a30:	f8 01       	movw	r30, r16
 a32:	a0 80       	ld	r10, Z
 a34:	b1 80       	ldd	r11, Z+1	; 0x01
 a36:	36 fe       	sbrs	r3, 6
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
 a3a:	69 2d       	mov	r22, r9
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	6f ef       	ldi	r22, 0xFF	; 255
 a42:	7f ef       	ldi	r23, 0xFF	; 255
 a44:	c5 01       	movw	r24, r10
 a46:	0e 94 69 06 	call	0xcd2	; 0xcd2 <strnlen>
 a4a:	4c 01       	movw	r8, r24
 a4c:	82 01       	movw	r16, r4
 a4e:	f3 2d       	mov	r31, r3
 a50:	ff 77       	andi	r31, 0x7F	; 127
 a52:	3f 2e       	mov	r3, r31
 a54:	16 c0       	rjmp	.+44     	; 0xa82 <__stack+0x183>
 a56:	28 01       	movw	r4, r16
 a58:	22 e0       	ldi	r18, 0x02	; 2
 a5a:	42 0e       	add	r4, r18
 a5c:	51 1c       	adc	r5, r1
 a5e:	f8 01       	movw	r30, r16
 a60:	a0 80       	ld	r10, Z
 a62:	b1 80       	ldd	r11, Z+1	; 0x01
 a64:	36 fe       	sbrs	r3, 6
 a66:	03 c0       	rjmp	.+6      	; 0xa6e <__stack+0x16f>
 a68:	69 2d       	mov	r22, r9
 a6a:	70 e0       	ldi	r23, 0x00	; 0
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x173>
 a6e:	6f ef       	ldi	r22, 0xFF	; 255
 a70:	7f ef       	ldi	r23, 0xFF	; 255
 a72:	c5 01       	movw	r24, r10
 a74:	0e 94 5e 06 	call	0xcbc	; 0xcbc <strnlen_P>
 a78:	4c 01       	movw	r8, r24
 a7a:	f3 2d       	mov	r31, r3
 a7c:	f0 68       	ori	r31, 0x80	; 128
 a7e:	3f 2e       	mov	r3, r31
 a80:	82 01       	movw	r16, r4
 a82:	33 fc       	sbrc	r3, 3
 a84:	1b c0       	rjmp	.+54     	; 0xabc <__stack+0x1bd>
 a86:	82 2d       	mov	r24, r2
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	88 16       	cp	r8, r24
 a8c:	99 06       	cpc	r9, r25
 a8e:	b0 f4       	brcc	.+44     	; 0xabc <__stack+0x1bd>
 a90:	b6 01       	movw	r22, r12
 a92:	80 e2       	ldi	r24, 0x20	; 32
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 a9a:	2a 94       	dec	r2
 a9c:	f4 cf       	rjmp	.-24     	; 0xa86 <__stack+0x187>
 a9e:	f5 01       	movw	r30, r10
 aa0:	37 fc       	sbrc	r3, 7
 aa2:	85 91       	lpm	r24, Z+
 aa4:	37 fe       	sbrs	r3, 7
 aa6:	81 91       	ld	r24, Z+
 aa8:	5f 01       	movw	r10, r30
 aaa:	b6 01       	movw	r22, r12
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 ab2:	21 10       	cpse	r2, r1
 ab4:	2a 94       	dec	r2
 ab6:	21 e0       	ldi	r18, 0x01	; 1
 ab8:	82 1a       	sub	r8, r18
 aba:	91 08       	sbc	r9, r1
 abc:	81 14       	cp	r8, r1
 abe:	91 04       	cpc	r9, r1
 ac0:	71 f7       	brne	.-36     	; 0xa9e <__stack+0x19f>
 ac2:	e8 c0       	rjmp	.+464    	; 0xc94 <__stack+0x395>
 ac4:	84 36       	cpi	r24, 0x64	; 100
 ac6:	11 f0       	breq	.+4      	; 0xacc <__stack+0x1cd>
 ac8:	89 36       	cpi	r24, 0x69	; 105
 aca:	41 f5       	brne	.+80     	; 0xb1c <__stack+0x21d>
 acc:	f8 01       	movw	r30, r16
 ace:	37 fe       	sbrs	r3, 7
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__stack+0x1e1>
 ad2:	60 81       	ld	r22, Z
 ad4:	71 81       	ldd	r23, Z+1	; 0x01
 ad6:	82 81       	ldd	r24, Z+2	; 0x02
 ad8:	93 81       	ldd	r25, Z+3	; 0x03
 ada:	0c 5f       	subi	r16, 0xFC	; 252
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__stack+0x1f1>
 ae0:	60 81       	ld	r22, Z
 ae2:	71 81       	ldd	r23, Z+1	; 0x01
 ae4:	07 2e       	mov	r0, r23
 ae6:	00 0c       	add	r0, r0
 ae8:	88 0b       	sbc	r24, r24
 aea:	99 0b       	sbc	r25, r25
 aec:	0e 5f       	subi	r16, 0xFE	; 254
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	f3 2d       	mov	r31, r3
 af2:	ff 76       	andi	r31, 0x6F	; 111
 af4:	3f 2e       	mov	r3, r31
 af6:	97 ff       	sbrs	r25, 7
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <__stack+0x20d>
 afa:	90 95       	com	r25
 afc:	80 95       	com	r24
 afe:	70 95       	com	r23
 b00:	61 95       	neg	r22
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	f0 68       	ori	r31, 0x80	; 128
 b0a:	3f 2e       	mov	r3, r31
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	a3 01       	movw	r20, r6
 b12:	0e 94 b0 06 	call	0xd60	; 0xd60 <__ultoa_invert>
 b16:	88 2e       	mov	r8, r24
 b18:	86 18       	sub	r8, r6
 b1a:	45 c0       	rjmp	.+138    	; 0xba6 <__stack+0x2a7>
 b1c:	85 37       	cpi	r24, 0x75	; 117
 b1e:	31 f4       	brne	.+12     	; 0xb2c <__stack+0x22d>
 b20:	23 2d       	mov	r18, r3
 b22:	2f 7e       	andi	r18, 0xEF	; 239
 b24:	b2 2e       	mov	r11, r18
 b26:	2a e0       	ldi	r18, 0x0A	; 10
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	25 c0       	rjmp	.+74     	; 0xb76 <__stack+0x277>
 b2c:	93 2d       	mov	r25, r3
 b2e:	99 7f       	andi	r25, 0xF9	; 249
 b30:	b9 2e       	mov	r11, r25
 b32:	8f 36       	cpi	r24, 0x6F	; 111
 b34:	c1 f0       	breq	.+48     	; 0xb66 <__stack+0x267>
 b36:	18 f4       	brcc	.+6      	; 0xb3e <__stack+0x23f>
 b38:	88 35       	cpi	r24, 0x58	; 88
 b3a:	79 f0       	breq	.+30     	; 0xb5a <__stack+0x25b>
 b3c:	b5 c0       	rjmp	.+362    	; 0xca8 <__stack+0x3a9>
 b3e:	80 37       	cpi	r24, 0x70	; 112
 b40:	19 f0       	breq	.+6      	; 0xb48 <__stack+0x249>
 b42:	88 37       	cpi	r24, 0x78	; 120
 b44:	21 f0       	breq	.+8      	; 0xb4e <__stack+0x24f>
 b46:	b0 c0       	rjmp	.+352    	; 0xca8 <__stack+0x3a9>
 b48:	e9 2f       	mov	r30, r25
 b4a:	e0 61       	ori	r30, 0x10	; 16
 b4c:	be 2e       	mov	r11, r30
 b4e:	b4 fe       	sbrs	r11, 4
 b50:	0d c0       	rjmp	.+26     	; 0xb6c <__stack+0x26d>
 b52:	fb 2d       	mov	r31, r11
 b54:	f4 60       	ori	r31, 0x04	; 4
 b56:	bf 2e       	mov	r11, r31
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__stack+0x26d>
 b5a:	34 fe       	sbrs	r3, 4
 b5c:	0a c0       	rjmp	.+20     	; 0xb72 <__stack+0x273>
 b5e:	29 2f       	mov	r18, r25
 b60:	26 60       	ori	r18, 0x06	; 6
 b62:	b2 2e       	mov	r11, r18
 b64:	06 c0       	rjmp	.+12     	; 0xb72 <__stack+0x273>
 b66:	28 e0       	ldi	r18, 0x08	; 8
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <__stack+0x277>
 b6c:	20 e1       	ldi	r18, 0x10	; 16
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <__stack+0x277>
 b72:	20 e1       	ldi	r18, 0x10	; 16
 b74:	32 e0       	ldi	r19, 0x02	; 2
 b76:	f8 01       	movw	r30, r16
 b78:	b7 fe       	sbrs	r11, 7
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <__stack+0x28b>
 b7c:	60 81       	ld	r22, Z
 b7e:	71 81       	ldd	r23, Z+1	; 0x01
 b80:	82 81       	ldd	r24, Z+2	; 0x02
 b82:	93 81       	ldd	r25, Z+3	; 0x03
 b84:	0c 5f       	subi	r16, 0xFC	; 252
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <__stack+0x297>
 b8a:	60 81       	ld	r22, Z
 b8c:	71 81       	ldd	r23, Z+1	; 0x01
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	a3 01       	movw	r20, r6
 b98:	0e 94 b0 06 	call	0xd60	; 0xd60 <__ultoa_invert>
 b9c:	88 2e       	mov	r8, r24
 b9e:	86 18       	sub	r8, r6
 ba0:	fb 2d       	mov	r31, r11
 ba2:	ff 77       	andi	r31, 0x7F	; 127
 ba4:	3f 2e       	mov	r3, r31
 ba6:	36 fe       	sbrs	r3, 6
 ba8:	0d c0       	rjmp	.+26     	; 0xbc4 <__stack+0x2c5>
 baa:	23 2d       	mov	r18, r3
 bac:	2e 7f       	andi	r18, 0xFE	; 254
 bae:	a2 2e       	mov	r10, r18
 bb0:	89 14       	cp	r8, r9
 bb2:	58 f4       	brcc	.+22     	; 0xbca <__stack+0x2cb>
 bb4:	34 fe       	sbrs	r3, 4
 bb6:	0b c0       	rjmp	.+22     	; 0xbce <__stack+0x2cf>
 bb8:	32 fc       	sbrc	r3, 2
 bba:	09 c0       	rjmp	.+18     	; 0xbce <__stack+0x2cf>
 bbc:	83 2d       	mov	r24, r3
 bbe:	8e 7e       	andi	r24, 0xEE	; 238
 bc0:	a8 2e       	mov	r10, r24
 bc2:	05 c0       	rjmp	.+10     	; 0xbce <__stack+0x2cf>
 bc4:	b8 2c       	mov	r11, r8
 bc6:	a3 2c       	mov	r10, r3
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <__stack+0x2d1>
 bca:	b8 2c       	mov	r11, r8
 bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <__stack+0x2d1>
 bce:	b9 2c       	mov	r11, r9
 bd0:	a4 fe       	sbrs	r10, 4
 bd2:	0f c0       	rjmp	.+30     	; 0xbf2 <__stack+0x2f3>
 bd4:	fe 01       	movw	r30, r28
 bd6:	e8 0d       	add	r30, r8
 bd8:	f1 1d       	adc	r31, r1
 bda:	80 81       	ld	r24, Z
 bdc:	80 33       	cpi	r24, 0x30	; 48
 bde:	21 f4       	brne	.+8      	; 0xbe8 <__stack+0x2e9>
 be0:	9a 2d       	mov	r25, r10
 be2:	99 7e       	andi	r25, 0xE9	; 233
 be4:	a9 2e       	mov	r10, r25
 be6:	09 c0       	rjmp	.+18     	; 0xbfa <__stack+0x2fb>
 be8:	a2 fe       	sbrs	r10, 2
 bea:	06 c0       	rjmp	.+12     	; 0xbf8 <__stack+0x2f9>
 bec:	b3 94       	inc	r11
 bee:	b3 94       	inc	r11
 bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__stack+0x2fb>
 bf2:	8a 2d       	mov	r24, r10
 bf4:	86 78       	andi	r24, 0x86	; 134
 bf6:	09 f0       	breq	.+2      	; 0xbfa <__stack+0x2fb>
 bf8:	b3 94       	inc	r11
 bfa:	a3 fc       	sbrc	r10, 3
 bfc:	11 c0       	rjmp	.+34     	; 0xc20 <__stack+0x321>
 bfe:	a0 fe       	sbrs	r10, 0
 c00:	06 c0       	rjmp	.+12     	; 0xc0e <__stack+0x30f>
 c02:	b2 14       	cp	r11, r2
 c04:	88 f4       	brcc	.+34     	; 0xc28 <__stack+0x329>
 c06:	28 0c       	add	r2, r8
 c08:	92 2c       	mov	r9, r2
 c0a:	9b 18       	sub	r9, r11
 c0c:	0e c0       	rjmp	.+28     	; 0xc2a <__stack+0x32b>
 c0e:	b2 14       	cp	r11, r2
 c10:	60 f4       	brcc	.+24     	; 0xc2a <__stack+0x32b>
 c12:	b6 01       	movw	r22, r12
 c14:	80 e2       	ldi	r24, 0x20	; 32
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 c1c:	b3 94       	inc	r11
 c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <__stack+0x30f>
 c20:	b2 14       	cp	r11, r2
 c22:	18 f4       	brcc	.+6      	; 0xc2a <__stack+0x32b>
 c24:	2b 18       	sub	r2, r11
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <__stack+0x32d>
 c28:	98 2c       	mov	r9, r8
 c2a:	21 2c       	mov	r2, r1
 c2c:	a4 fe       	sbrs	r10, 4
 c2e:	10 c0       	rjmp	.+32     	; 0xc50 <__stack+0x351>
 c30:	b6 01       	movw	r22, r12
 c32:	80 e3       	ldi	r24, 0x30	; 48
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 c3a:	a2 fe       	sbrs	r10, 2
 c3c:	17 c0       	rjmp	.+46     	; 0xc6c <__stack+0x36d>
 c3e:	a1 fc       	sbrc	r10, 1
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <__stack+0x349>
 c42:	88 e7       	ldi	r24, 0x78	; 120
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <__stack+0x34d>
 c48:	88 e5       	ldi	r24, 0x58	; 88
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	b6 01       	movw	r22, r12
 c4e:	0c c0       	rjmp	.+24     	; 0xc68 <__stack+0x369>
 c50:	8a 2d       	mov	r24, r10
 c52:	86 78       	andi	r24, 0x86	; 134
 c54:	59 f0       	breq	.+22     	; 0xc6c <__stack+0x36d>
 c56:	a1 fe       	sbrs	r10, 1
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <__stack+0x35f>
 c5a:	8b e2       	ldi	r24, 0x2B	; 43
 c5c:	01 c0       	rjmp	.+2      	; 0xc60 <__stack+0x361>
 c5e:	80 e2       	ldi	r24, 0x20	; 32
 c60:	a7 fc       	sbrc	r10, 7
 c62:	8d e2       	ldi	r24, 0x2D	; 45
 c64:	b6 01       	movw	r22, r12
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 c6c:	89 14       	cp	r8, r9
 c6e:	38 f4       	brcc	.+14     	; 0xc7e <__stack+0x37f>
 c70:	b6 01       	movw	r22, r12
 c72:	80 e3       	ldi	r24, 0x30	; 48
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 c7a:	9a 94       	dec	r9
 c7c:	f7 cf       	rjmp	.-18     	; 0xc6c <__stack+0x36d>
 c7e:	8a 94       	dec	r8
 c80:	f3 01       	movw	r30, r6
 c82:	e8 0d       	add	r30, r8
 c84:	f1 1d       	adc	r31, r1
 c86:	80 81       	ld	r24, Z
 c88:	b6 01       	movw	r22, r12
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 c90:	81 10       	cpse	r8, r1
 c92:	f5 cf       	rjmp	.-22     	; 0xc7e <__stack+0x37f>
 c94:	22 20       	and	r2, r2
 c96:	09 f4       	brne	.+2      	; 0xc9a <__stack+0x39b>
 c98:	42 ce       	rjmp	.-892    	; 0x91e <__stack+0x1f>
 c9a:	b6 01       	movw	r22, r12
 c9c:	80 e2       	ldi	r24, 0x20	; 32
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	0e 94 74 06 	call	0xce8	; 0xce8 <fputc>
 ca4:	2a 94       	dec	r2
 ca6:	f6 cf       	rjmp	.-20     	; 0xc94 <__stack+0x395>
 ca8:	f6 01       	movw	r30, r12
 caa:	86 81       	ldd	r24, Z+6	; 0x06
 cac:	97 81       	ldd	r25, Z+7	; 0x07
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <__stack+0x3b5>
 cb0:	8f ef       	ldi	r24, 0xFF	; 255
 cb2:	9f ef       	ldi	r25, 0xFF	; 255
 cb4:	2b 96       	adiw	r28, 0x0b	; 11
 cb6:	e2 e1       	ldi	r30, 0x12	; 18
 cb8:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__epilogue_restores__>

00000cbc <strnlen_P>:
 cbc:	fc 01       	movw	r30, r24
 cbe:	05 90       	lpm	r0, Z+
 cc0:	61 50       	subi	r22, 0x01	; 1
 cc2:	70 40       	sbci	r23, 0x00	; 0
 cc4:	01 10       	cpse	r0, r1
 cc6:	d8 f7       	brcc	.-10     	; 0xcbe <strnlen_P+0x2>
 cc8:	80 95       	com	r24
 cca:	90 95       	com	r25
 ccc:	8e 0f       	add	r24, r30
 cce:	9f 1f       	adc	r25, r31
 cd0:	08 95       	ret

00000cd2 <strnlen>:
 cd2:	fc 01       	movw	r30, r24
 cd4:	61 50       	subi	r22, 0x01	; 1
 cd6:	70 40       	sbci	r23, 0x00	; 0
 cd8:	01 90       	ld	r0, Z+
 cda:	01 10       	cpse	r0, r1
 cdc:	d8 f7       	brcc	.-10     	; 0xcd4 <strnlen+0x2>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	8e 0f       	add	r24, r30
 ce4:	9f 1f       	adc	r25, r31
 ce6:	08 95       	ret

00000ce8 <fputc>:
 ce8:	0f 93       	push	r16
 cea:	1f 93       	push	r17
 cec:	cf 93       	push	r28
 cee:	df 93       	push	r29
 cf0:	fb 01       	movw	r30, r22
 cf2:	23 81       	ldd	r18, Z+3	; 0x03
 cf4:	21 fd       	sbrc	r18, 1
 cf6:	03 c0       	rjmp	.+6      	; 0xcfe <fputc+0x16>
 cf8:	8f ef       	ldi	r24, 0xFF	; 255
 cfa:	9f ef       	ldi	r25, 0xFF	; 255
 cfc:	2c c0       	rjmp	.+88     	; 0xd56 <fputc+0x6e>
 cfe:	22 ff       	sbrs	r18, 2
 d00:	16 c0       	rjmp	.+44     	; 0xd2e <fputc+0x46>
 d02:	46 81       	ldd	r20, Z+6	; 0x06
 d04:	57 81       	ldd	r21, Z+7	; 0x07
 d06:	24 81       	ldd	r18, Z+4	; 0x04
 d08:	35 81       	ldd	r19, Z+5	; 0x05
 d0a:	42 17       	cp	r20, r18
 d0c:	53 07       	cpc	r21, r19
 d0e:	44 f4       	brge	.+16     	; 0xd20 <fputc+0x38>
 d10:	a0 81       	ld	r26, Z
 d12:	b1 81       	ldd	r27, Z+1	; 0x01
 d14:	9d 01       	movw	r18, r26
 d16:	2f 5f       	subi	r18, 0xFF	; 255
 d18:	3f 4f       	sbci	r19, 0xFF	; 255
 d1a:	31 83       	std	Z+1, r19	; 0x01
 d1c:	20 83       	st	Z, r18
 d1e:	8c 93       	st	X, r24
 d20:	26 81       	ldd	r18, Z+6	; 0x06
 d22:	37 81       	ldd	r19, Z+7	; 0x07
 d24:	2f 5f       	subi	r18, 0xFF	; 255
 d26:	3f 4f       	sbci	r19, 0xFF	; 255
 d28:	37 83       	std	Z+7, r19	; 0x07
 d2a:	26 83       	std	Z+6, r18	; 0x06
 d2c:	14 c0       	rjmp	.+40     	; 0xd56 <fputc+0x6e>
 d2e:	8b 01       	movw	r16, r22
 d30:	ec 01       	movw	r28, r24
 d32:	fb 01       	movw	r30, r22
 d34:	00 84       	ldd	r0, Z+8	; 0x08
 d36:	f1 85       	ldd	r31, Z+9	; 0x09
 d38:	e0 2d       	mov	r30, r0
 d3a:	09 95       	icall
 d3c:	89 2b       	or	r24, r25
 d3e:	e1 f6       	brne	.-72     	; 0xcf8 <fputc+0x10>
 d40:	d8 01       	movw	r26, r16
 d42:	16 96       	adiw	r26, 0x06	; 6
 d44:	8d 91       	ld	r24, X+
 d46:	9c 91       	ld	r25, X
 d48:	17 97       	sbiw	r26, 0x07	; 7
 d4a:	01 96       	adiw	r24, 0x01	; 1
 d4c:	17 96       	adiw	r26, 0x07	; 7
 d4e:	9c 93       	st	X, r25
 d50:	8e 93       	st	-X, r24
 d52:	16 97       	sbiw	r26, 0x06	; 6
 d54:	ce 01       	movw	r24, r28
 d56:	df 91       	pop	r29
 d58:	cf 91       	pop	r28
 d5a:	1f 91       	pop	r17
 d5c:	0f 91       	pop	r16
 d5e:	08 95       	ret

00000d60 <__ultoa_invert>:
 d60:	fa 01       	movw	r30, r20
 d62:	aa 27       	eor	r26, r26
 d64:	28 30       	cpi	r18, 0x08	; 8
 d66:	51 f1       	breq	.+84     	; 0xdbc <__ultoa_invert+0x5c>
 d68:	20 31       	cpi	r18, 0x10	; 16
 d6a:	81 f1       	breq	.+96     	; 0xdcc <__ultoa_invert+0x6c>
 d6c:	e8 94       	clt
 d6e:	6f 93       	push	r22
 d70:	6e 7f       	andi	r22, 0xFE	; 254
 d72:	6e 5f       	subi	r22, 0xFE	; 254
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	af 4f       	sbci	r26, 0xFF	; 255
 d7c:	b1 e0       	ldi	r27, 0x01	; 1
 d7e:	3e d0       	rcall	.+124    	; 0xdfc <__ultoa_invert+0x9c>
 d80:	b4 e0       	ldi	r27, 0x04	; 4
 d82:	3c d0       	rcall	.+120    	; 0xdfc <__ultoa_invert+0x9c>
 d84:	67 0f       	add	r22, r23
 d86:	78 1f       	adc	r23, r24
 d88:	89 1f       	adc	r24, r25
 d8a:	9a 1f       	adc	r25, r26
 d8c:	a1 1d       	adc	r26, r1
 d8e:	68 0f       	add	r22, r24
 d90:	79 1f       	adc	r23, r25
 d92:	8a 1f       	adc	r24, r26
 d94:	91 1d       	adc	r25, r1
 d96:	a1 1d       	adc	r26, r1
 d98:	6a 0f       	add	r22, r26
 d9a:	71 1d       	adc	r23, r1
 d9c:	81 1d       	adc	r24, r1
 d9e:	91 1d       	adc	r25, r1
 da0:	a1 1d       	adc	r26, r1
 da2:	20 d0       	rcall	.+64     	; 0xde4 <__ultoa_invert+0x84>
 da4:	09 f4       	brne	.+2      	; 0xda8 <__ultoa_invert+0x48>
 da6:	68 94       	set
 da8:	3f 91       	pop	r19
 daa:	2a e0       	ldi	r18, 0x0A	; 10
 dac:	26 9f       	mul	r18, r22
 dae:	11 24       	eor	r1, r1
 db0:	30 19       	sub	r19, r0
 db2:	30 5d       	subi	r19, 0xD0	; 208
 db4:	31 93       	st	Z+, r19
 db6:	de f6       	brtc	.-74     	; 0xd6e <__ultoa_invert+0xe>
 db8:	cf 01       	movw	r24, r30
 dba:	08 95       	ret
 dbc:	46 2f       	mov	r20, r22
 dbe:	47 70       	andi	r20, 0x07	; 7
 dc0:	40 5d       	subi	r20, 0xD0	; 208
 dc2:	41 93       	st	Z+, r20
 dc4:	b3 e0       	ldi	r27, 0x03	; 3
 dc6:	0f d0       	rcall	.+30     	; 0xde6 <__ultoa_invert+0x86>
 dc8:	c9 f7       	brne	.-14     	; 0xdbc <__ultoa_invert+0x5c>
 dca:	f6 cf       	rjmp	.-20     	; 0xdb8 <__ultoa_invert+0x58>
 dcc:	46 2f       	mov	r20, r22
 dce:	4f 70       	andi	r20, 0x0F	; 15
 dd0:	40 5d       	subi	r20, 0xD0	; 208
 dd2:	4a 33       	cpi	r20, 0x3A	; 58
 dd4:	18 f0       	brcs	.+6      	; 0xddc <__ultoa_invert+0x7c>
 dd6:	49 5d       	subi	r20, 0xD9	; 217
 dd8:	31 fd       	sbrc	r19, 1
 dda:	40 52       	subi	r20, 0x20	; 32
 ddc:	41 93       	st	Z+, r20
 dde:	02 d0       	rcall	.+4      	; 0xde4 <__ultoa_invert+0x84>
 de0:	a9 f7       	brne	.-22     	; 0xdcc <__ultoa_invert+0x6c>
 de2:	ea cf       	rjmp	.-44     	; 0xdb8 <__ultoa_invert+0x58>
 de4:	b4 e0       	ldi	r27, 0x04	; 4
 de6:	a6 95       	lsr	r26
 de8:	97 95       	ror	r25
 dea:	87 95       	ror	r24
 dec:	77 95       	ror	r23
 dee:	67 95       	ror	r22
 df0:	ba 95       	dec	r27
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0x86>
 df4:	00 97       	sbiw	r24, 0x00	; 0
 df6:	61 05       	cpc	r22, r1
 df8:	71 05       	cpc	r23, r1
 dfa:	08 95       	ret
 dfc:	9b 01       	movw	r18, r22
 dfe:	ac 01       	movw	r20, r24
 e00:	0a 2e       	mov	r0, r26
 e02:	06 94       	lsr	r0
 e04:	57 95       	ror	r21
 e06:	47 95       	ror	r20
 e08:	37 95       	ror	r19
 e0a:	27 95       	ror	r18
 e0c:	ba 95       	dec	r27
 e0e:	c9 f7       	brne	.-14     	; 0xe02 <__ultoa_invert+0xa2>
 e10:	62 0f       	add	r22, r18
 e12:	73 1f       	adc	r23, r19
 e14:	84 1f       	adc	r24, r20
 e16:	95 1f       	adc	r25, r21
 e18:	a0 1d       	adc	r26, r0
 e1a:	08 95       	ret

00000e1c <__prologue_saves__>:
 e1c:	2f 92       	push	r2
 e1e:	3f 92       	push	r3
 e20:	4f 92       	push	r4
 e22:	5f 92       	push	r5
 e24:	6f 92       	push	r6
 e26:	7f 92       	push	r7
 e28:	8f 92       	push	r8
 e2a:	9f 92       	push	r9
 e2c:	af 92       	push	r10
 e2e:	bf 92       	push	r11
 e30:	cf 92       	push	r12
 e32:	df 92       	push	r13
 e34:	ef 92       	push	r14
 e36:	ff 92       	push	r15
 e38:	0f 93       	push	r16
 e3a:	1f 93       	push	r17
 e3c:	cf 93       	push	r28
 e3e:	df 93       	push	r29
 e40:	cd b7       	in	r28, 0x3d	; 61
 e42:	de b7       	in	r29, 0x3e	; 62
 e44:	ca 1b       	sub	r28, r26
 e46:	db 0b       	sbc	r29, r27
 e48:	0f b6       	in	r0, 0x3f	; 63
 e4a:	f8 94       	cli
 e4c:	de bf       	out	0x3e, r29	; 62
 e4e:	0f be       	out	0x3f, r0	; 63
 e50:	cd bf       	out	0x3d, r28	; 61
 e52:	09 94       	ijmp

00000e54 <__epilogue_restores__>:
 e54:	2a 88       	ldd	r2, Y+18	; 0x12
 e56:	39 88       	ldd	r3, Y+17	; 0x11
 e58:	48 88       	ldd	r4, Y+16	; 0x10
 e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e60:	8c 84       	ldd	r8, Y+12	; 0x0c
 e62:	9b 84       	ldd	r9, Y+11	; 0x0b
 e64:	aa 84       	ldd	r10, Y+10	; 0x0a
 e66:	b9 84       	ldd	r11, Y+9	; 0x09
 e68:	c8 84       	ldd	r12, Y+8	; 0x08
 e6a:	df 80       	ldd	r13, Y+7	; 0x07
 e6c:	ee 80       	ldd	r14, Y+6	; 0x06
 e6e:	fd 80       	ldd	r15, Y+5	; 0x05
 e70:	0c 81       	ldd	r16, Y+4	; 0x04
 e72:	1b 81       	ldd	r17, Y+3	; 0x03
 e74:	aa 81       	ldd	r26, Y+2	; 0x02
 e76:	b9 81       	ldd	r27, Y+1	; 0x01
 e78:	ce 0f       	add	r28, r30
 e7a:	d1 1d       	adc	r29, r1
 e7c:	0f b6       	in	r0, 0x3f	; 63
 e7e:	f8 94       	cli
 e80:	de bf       	out	0x3e, r29	; 62
 e82:	0f be       	out	0x3f, r0	; 63
 e84:	cd bf       	out	0x3d, r28	; 61
 e86:	ed 01       	movw	r28, r26
 e88:	08 95       	ret

00000e8a <_exit>:
 e8a:	f8 94       	cli

00000e8c <__stop_program>:
 e8c:	ff cf       	rjmp	.-2      	; 0xe8c <__stop_program>
