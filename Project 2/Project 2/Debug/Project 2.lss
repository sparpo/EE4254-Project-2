
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080014a  0080014a  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008aa  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d7  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000326  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 37       	cpi	r26, 0x7F	; 127
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_USART>:
	TCCR1B = (0b00000010);
	TIMSK1 = (0b00100001);

}

void init_timer2() {
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ac:	88 e5       	ldi	r24, 0x58	; 88
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  c4:	08 95       	ret

000000c6 <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_end>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
  cc:	ec e4       	ldi	r30, 0x4C	; 76
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	2d e0       	ldi	r18, 0x0D	; 13
  d2:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <qcntr>
  da:	2a e0       	ldi	r18, 0x0A	; 10
  dc:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
  de:	fc 01       	movw	r30, r24
  e0:	20 81       	ld	r18, Z
  e2:	22 23       	and	r18, r18
  e4:	79 f0       	breq	.+30     	; 0x104 <sendmsg+0x3e>
  e6:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
  e8:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <qcntr>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8e 0f       	add	r24, r30
  f0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <qcntr>
  f4:	8d 91       	ld	r24, X+
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e4 5b       	subi	r30, 0xB4	; 180
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
  fe:	8c 91       	ld	r24, X
 100:	81 11       	cpse	r24, r1
 102:	f2 cf       	rjmp	.-28     	; 0xe8 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 104:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <queue>
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 10c:	08 95       	ret

0000010e <main>:
enum adc{ADC0,ADC1,ADC2} input;

int main(void)
{
	char ch;  /* character variable for received character*/
	input = ADC1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <input>
	init_USART();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <init_USART>


	sei(); /*global interrupt enable */
 118:	78 94       	sei

	while (1)
	{
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 11a:	c0 ec       	ldi	r28, 0xC0	; 192
 11c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 11e:	06 ec       	ldi	r16, 0xC6	; 198
 120:	10 e0       	ldi	r17, 0x00	; 0

	sei(); /*global interrupt enable */

	while (1)
	{
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <main+0x14>
		{
			ch = UDR0;    /*get character sent from PC*/
 128:	f8 01       	movw	r30, r16
 12a:	80 81       	ld	r24, Z
			switch (ch)
 12c:	81 36       	cpi	r24, 0x61	; 97
 12e:	21 f0       	breq	.+8      	; 0x138 <main+0x2a>
 130:	82 36       	cpi	r24, 0x62	; 98
 132:	39 f0       	breq	.+14     	; 0x142 <main+0x34>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	51 f4       	brne	.+20     	; 0x14c <main+0x3e>
			{
				case 'A':
				case 'a':
				sendmsg(msg1); /*send first message*/
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendmsg>
				break;
 140:	f0 cf       	rjmp	.-32     	; 0x122 <main+0x14>
				case 'b':
				sendmsg(msg2); /*send second message*/
 142:	8a e1       	ldi	r24, 0x1A	; 26
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 63 00 	call	0xc6	; 0xc6 <sendmsg>
				break;
 14a:	eb cf       	rjmp	.-42     	; 0x122 <main+0x14>
				default:
				sendmsg(msg3); /*send default message*/
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 63 00 	call	0xc6	; 0xc6 <sendmsg>
 154:	e6 cf       	rjmp	.-52     	; 0x122 <main+0x14>

00000156 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 166:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <__data_end>
 16a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <qcntr>
 16e:	8e 17       	cp	r24, r30
 170:	51 f0       	breq	.+20     	; 0x186 <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	8e 0f       	add	r24, r30
 176:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	e4 5b       	subi	r30, 0xB4	; 180
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
