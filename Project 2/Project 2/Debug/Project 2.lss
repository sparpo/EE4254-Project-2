
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00000ccc  00000d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ccc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080021a  0080021a  00000e7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7e  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a1  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  00002c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_20>
  54:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	8f 01       	movw	r16, r30
  6a:	f7 01       	movw	r30, r14
  6c:	d2 01       	movw	r26, r4
  6e:	f7 01       	movw	r30, r14
  70:	d7 01       	movw	r26, r14
  72:	f7 01       	movw	r30, r14
  74:	f7 01       	movw	r30, r14
  76:	f7 01       	movw	r30, r14
  78:	f7 01       	movw	r30, r14
  7a:	f7 01       	movw	r30, r14
  7c:	f7 01       	movw	r30, r14
  7e:	75 01       	movw	r14, r10
  80:	32 01       	movw	r6, r4
  82:	3a 01       	movw	r6, r20
  84:	f7 01       	movw	r30, r14
  86:	42 01       	movw	r8, r4
  88:	f7 01       	movw	r30, r14
  8a:	f7 01       	movw	r30, r14
  8c:	dc 01       	movw	r26, r24
  8e:	49 01       	movw	r8, r18
  90:	f7 01       	movw	r30, r14
  92:	a5 01       	movw	r20, r10
  94:	f7 01       	movw	r30, r14
  96:	f7 01       	movw	r30, r14
  98:	f7 01       	movw	r30, r14
  9a:	f7 01       	movw	r30, r14
  9c:	f7 01       	movw	r30, r14
  9e:	f7 01       	movw	r30, r14
  a0:	f7 01       	movw	r30, r14
  a2:	f7 01       	movw	r30, r14
  a4:	f7 01       	movw	r30, r14
  a6:	f7 01       	movw	r30, r14
  a8:	8f 01       	movw	r16, r30
  aa:	f7 01       	movw	r30, r14
  ac:	d2 01       	movw	r26, r4
  ae:	f7 01       	movw	r30, r14
  b0:	d7 01       	movw	r26, r14
  b2:	f7 01       	movw	r30, r14
  b4:	f7 01       	movw	r30, r14
  b6:	f7 01       	movw	r30, r14
  b8:	f7 01       	movw	r30, r14
  ba:	f7 01       	movw	r30, r14
  bc:	f7 01       	movw	r30, r14
  be:	75 01       	movw	r14, r10
  c0:	32 01       	movw	r6, r4
  c2:	3a 01       	movw	r6, r20
  c4:	f7 01       	movw	r30, r14
  c6:	42 01       	movw	r8, r4
  c8:	f7 01       	movw	r30, r14
  ca:	f7 01       	movw	r30, r14
  cc:	dc 01       	movw	r26, r24
  ce:	49 01       	movw	r8, r18
  d0:	f7 01       	movw	r30, r14
  d2:	a5 01       	movw	r20, r10

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	12 e0       	ldi	r17, 0x02	; 2
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	ec ec       	ldi	r30, 0xCC	; 204
  e8:	fc e0       	ldi	r31, 0x0C	; 12
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	aa 31       	cpi	r26, 0x1A	; 26
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	aa e1       	ldi	r26, 0x1A	; 26
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a6 35       	cpi	r26, 0x56	; 86
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}*/
	}
	return 1;
}
void init_adc() {
	ADMUX = (1<<6)|(1<<1); //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = (1<<7)|(1<<6)|(1<<5)|(1<<3)|(7<<0); //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<0); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<1); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<5) | (1<<0); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (1<<7)|(1<<0); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (6<<0); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	ee e1       	ldi	r30, 0x1E	; 30
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e2 5e       	subi	r30, 0xE2	; 226
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
enum active{pot,lit,temper,OCR,ADC_val} on; // potentiometer measuring active,LDR measuring active,LM35 sensor active, OC2RA, ADC value

unsigned int enContDisplay = 0; //enable continuous display

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e2 97       	sbiw	r28, 0x32	; 50
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	int adc_mV;
	double temp;
	double OC;
	char ch;  /* character variable for received character*/
	char data[50];
	init_ports();
 1da:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1f2:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f4:	00 ec       	ldi	r16, 0xC0	; 192
 1f6:	10 e0       	ldi	r17, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f6 ec       	ldi	r31, 0xC6	; 198
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
				
				case 'S':
				case 's':
				{
					OC = OCR2A;
					sprintf(data, "OCR2A = %f", OC);
 202:	0f 2e       	mov	r0, r31
 204:	ff e0       	ldi	r31, 0x0F	; 15
 206:	af 2e       	mov	r10, r31
 208:	f2 e0       	ldi	r31, 0x02	; 2
 20a:	bf 2e       	mov	r11, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	6c 01       	movw	r12, r24
				break;
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 214:	88 24       	eor	r8, r8
 216:	83 94       	inc	r8
 218:	91 2c       	mov	r9, r1
				
				case 'V':
				case 'v':
				{
					adc_mV = (adc_reading/1000)*5000;
					sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 21a:	0f 2e       	mov	r0, r31
 21c:	f8 e8       	ldi	r31, 0x88	; 136
 21e:	6f 2e       	mov	r6, r31
 220:	f3 e1       	ldi	r31, 0x13	; 19
 222:	7f 2e       	mov	r7, r31
 224:	f0 2d       	mov	r31, r0
 226:	0f 2e       	mov	r0, r31
 228:	fd ef       	ldi	r31, 0xFD	; 253
 22a:	4f 2e       	mov	r4, r31
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	5f 2e       	mov	r5, r31
 230:	f0 2d       	mov	r31, r0
				break;
				
				case 'A':
				case 'a':
				{
					sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 232:	0f 2e       	mov	r0, r31
 234:	fe ee       	ldi	r31, 0xEE	; 238
 236:	2f 2e       	mov	r2, r31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	3f 2e       	mov	r3, r31
 23c:	f0 2d       	mov	r31, r0

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 23e:	d8 01       	movw	r26, r16
 240:	8c 91       	ld	r24, X
 242:	88 23       	and	r24, r24
 244:	e4 f7       	brge	.-8      	; 0x23e <main+0x78>
		{
			ch = UDR0;    /*get character sent from PC*/
 246:	d7 01       	movw	r26, r14
 248:	ec 91       	ld	r30, X
			switch (ch) { //character input
 24a:	8e 2f       	mov	r24, r30
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	e1 54       	subi	r30, 0x41	; 65
 252:	f1 09       	sbc	r31, r1
 254:	e6 33       	cpi	r30, 0x36	; 54
 256:	f1 05       	cpc	r31, r1
 258:	08 f0       	brcs	.+2      	; 0x25c <main+0x96>
 25a:	c9 c0       	rjmp	.+402    	; 0x3ee <main+0x228>
 25c:	ec 5c       	subi	r30, 0xCC	; 204
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__tablejump2__>
				
				case 'M':
				case 'm':
					input = Temp;
 264:	b2 e0       	ldi	r27, 0x02	; 2
 266:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <input>
					sendmsg(msg2);
 26a:	8e e9       	ldi	r24, 0x9E	; 158
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 272:	e5 cf       	rjmp	.-54     	; 0x23e <main+0x78>
				
				case 'N':
				case 'n':
					input = LDR;
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	e0 93 51 02 	sts	0x0251, r30	; 0x800251 <input>
					sendmsg(msg3);
 27a:	8e e8       	ldi	r24, 0x8E	; 142
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 282:	dd cf       	rjmp	.-70     	; 0x23e <main+0x78>
				
				case 'P':
				case 'p':
					input = Volt;
 284:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <input>
					sendmsg(msg4);
 288:	84 e7       	ldi	r24, 0x74	; 116
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 290:	d6 cf       	rjmp	.-84     	; 0x23e <main+0x78>
				
				case 'T':
				case 't':
					if (input == Temp) {
 292:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <input>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	19 f5       	brne	.+70     	; 0x2e0 <main+0x11a>
						temp = adc_reading/2.0; //(5v/1023)=4.887mV = 5mV, every deg c is 10Mv voltage change
						sprintf(data,"LM35 Temperature = %f deg C",temp);
 29a:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <adc_reading>
 29e:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <adc_reading+0x1>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__floatunsisf>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	0e 94 a7 02 	call	0x54e	; 0x54e <__mulsf3>
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	7f 93       	push	r23
 2bc:	6f 93       	push	r22
 2be:	82 ed       	ldi	r24, 0xD2	; 210
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	df 92       	push	r13
 2c8:	cf 92       	push	r12
 2ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
						sendmsg(data);
 2ce:	c6 01       	movw	r24, r12
 2d0:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	af cf       	rjmp	.-162    	; 0x23e <main+0x78>
					} else {
						//Give warning
						sendmsg(msg5);
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 2e8:	aa cf       	rjmp	.-172    	; 0x23e <main+0x78>
					}
				break;
				
				case 'L':
				case 'l':
					if (input == LDR) {
 2ea:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <input>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	89 f4       	brne	.+34     	; 0x314 <main+0x14e>
							if(adc_reading>512)
 2f2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <adc_reading>
 2f6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <adc_reading+0x1>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	92 40       	sbci	r25, 0x02	; 2
 2fe:	28 f0       	brcs	.+10     	; 0x30a <main+0x144>
							{
								sendmsg(msg7);
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 308:	9a cf       	rjmp	.-204    	; 0x23e <main+0x78>
							}
							else
							{
								sendmsg(msg8);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 312:	95 cf       	rjmp	.-214    	; 0x23e <main+0x78>
							}
					} else {
						//Give warning
						sendmsg(msg6);
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 31c:	90 cf       	rjmp	.-224    	; 0x23e <main+0x78>
				break;
				
				case 'A':
				case 'a':
				{
					sprintf(data, "ADC value = %d", adc_reading); //Report ADC value
 31e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <adc_reading+0x1>
 322:	8f 93       	push	r24
 324:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <adc_reading>
 328:	8f 93       	push	r24
 32a:	3f 92       	push	r3
 32c:	2f 92       	push	r2
 32e:	df 92       	push	r13
 330:	cf 92       	push	r12
 332:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
					sendmsg(data);
 336:	c6 01       	movw	r24, r12
 338:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	7a cf       	rjmp	.-268    	; 0x23e <main+0x78>
				
				case 'V':
				case 'v':
				{
					adc_mV = (adc_reading/1000)*5000;
					sprintf(data, "ADC value = %d mV", adc_mV); //Report ADC value in mV
 34a:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <adc_reading>
 34e:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <adc_reading+0x1>
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	36 95       	lsr	r19
 358:	27 95       	ror	r18
 35a:	36 95       	lsr	r19
 35c:	27 95       	ror	r18
 35e:	a5 ec       	ldi	r26, 0xC5	; 197
 360:	b0 e2       	ldi	r27, 0x20	; 32
 362:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__umulhisi3>
 366:	92 95       	swap	r25
 368:	82 95       	swap	r24
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	89 27       	eor	r24, r25
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	89 27       	eor	r24, r25
 372:	86 9d       	mul	r24, r6
 374:	90 01       	movw	r18, r0
 376:	87 9d       	mul	r24, r7
 378:	30 0d       	add	r19, r0
 37a:	96 9d       	mul	r25, r6
 37c:	30 0d       	add	r19, r0
 37e:	11 24       	eor	r1, r1
 380:	3f 93       	push	r19
 382:	2f 93       	push	r18
 384:	5f 92       	push	r5
 386:	4f 92       	push	r4
 388:	df 92       	push	r13
 38a:	cf 92       	push	r12
 38c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
					sendmsg(data);
 390:	c6 01       	movw	r24, r12
 392:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				
				break;
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	4d cf       	rjmp	.-358    	; 0x23e <main+0x78>
				}
				
				case 'C':
				case 'c':
					enContDisplay = 1; //enable continuous adc display
 3a4:	90 92 1b 02 	sts	0x021B, r9	; 0x80021b <__data_end+0x1>
 3a8:	80 92 1a 02 	sts	0x021A, r8	; 0x80021a <__data_end>
				break;
 3ac:	48 cf       	rjmp	.-368    	; 0x23e <main+0x78>
				
				case 'E':
				case 'e':
					enContDisplay = 0; //disable continuous adc display
 3ae:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x1>
 3b2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
				break;
 3b6:	43 cf       	rjmp	.-378    	; 0x23e <main+0x78>
				
				case 'S':
				case 's':
				{
					OC = OCR2A;
 3b8:	a3 eb       	ldi	r26, 0xB3	; 179
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	6c 91       	ld	r22, X
					sprintf(data, "OCR2A = %f", OC);
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__floatunsisf>
 3c8:	9f 93       	push	r25
 3ca:	8f 93       	push	r24
 3cc:	7f 93       	push	r23
 3ce:	6f 93       	push	r22
 3d0:	bf 92       	push	r11
 3d2:	af 92       	push	r10
 3d4:	df 92       	push	r13
 3d6:	cf 92       	push	r12
 3d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
					sendmsg(data);
 3dc:	c6 01       	movw	r24, r12
 3de:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
				break;
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	28 cf       	rjmp	.-432    	; 0x23e <main+0x78>
				}
				default:
				sendmsg(msg1); /*send default message*/
 3ee:	8d eb       	ldi	r24, 0xBD	; 189
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
 3f6:	23 cf       	rjmp	.-442    	; 0x23e <main+0x78>

000003f8 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 408:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <sndcntr>
 40c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <qcntr>
 410:	8e 17       	cp	r24, r30
 412:	51 f0       	breq	.+20     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	UDR0 = queue[sndcntr++];
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8e 0f       	add	r24, r30
 418:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <sndcntr>
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	e2 5e       	subi	r30, 0xE2	; 226
 420:	fd 4f       	sbci	r31, 0xFD	; 253
 422:	80 81       	ld	r24, Z
 424:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
	
	//adc_reading = ADC;
	new_adc_data = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <new_adc_data+0x1>
 44e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <new_adc_data>
	switch(input) {
 452:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <input>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	81 f0       	breq	.+32     	; 0x47a <__vector_21+0x42>
 45a:	18 f0       	brcs	.+6      	; 0x462 <__vector_21+0x2a>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	c9 f0       	breq	.+50     	; 0x492 <__vector_21+0x5a>
 460:	24 c0       	rjmp	.+72     	; 0x4aa <__vector_21+0x72>
		
		case Volt :
			ADMUX = (1<<7); //adc0
 462:	80 e8       	ldi	r24, 0x80	; 128
 464:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 468:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 46c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 470:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <adc_reading+0x1>
 474:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <adc_reading>
		break;
 478:	23 c0       	rjmp	.+70     	; 0x4c0 <__vector_21+0x88>
		
		case LDR :
			ADMUX = (1<<7) | (1<<0); //adc1
 47a:	81 e8       	ldi	r24, 0x81	; 129
 47c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 480:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 484:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 488:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <adc_reading+0x1>
 48c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <adc_reading>
		break;
 490:	17 c0       	rjmp	.+46     	; 0x4c0 <__vector_21+0x88>
		
		case Temp :
			ADMUX = (1<<7) | (1<<1); //adc2
 492:	82 e8       	ldi	r24, 0x82	; 130
 494:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 498:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 49c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4a0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <adc_reading+0x1>
 4a4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <adc_reading>
		break;
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <__vector_21+0x88>
		default:
			ADMUX = (1<<7) | (1<<1); //adc2
 4aa:	82 e8       	ldi	r24, 0x82	; 130
 4ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			adc_reading = ADC;
 4b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 4b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4b8:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <adc_reading+0x1>
 4bc:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <adc_reading>
	}
	TIFR0 = TIFR0 & (1<<0); //clears Counter0 overflow
 4c0:	85 b3       	in	r24, 0x15	; 21
 4c2:	81 70       	andi	r24, 0x01	; 1
 4c4:	85 bb       	out	0x15, r24	; 21
}
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__floatunsisf>:
 4d4:	e8 94       	clt
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <__floatsisf+0x12>

000004d8 <__floatsisf>:
 4d8:	97 fb       	bst	r25, 7
 4da:	3e f4       	brtc	.+14     	; 0x4ea <__floatsisf+0x12>
 4dc:	90 95       	com	r25
 4de:	80 95       	com	r24
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	99 23       	and	r25, r25
 4ec:	a9 f0       	breq	.+42     	; 0x518 <__floatsisf+0x40>
 4ee:	f9 2f       	mov	r31, r25
 4f0:	96 e9       	ldi	r25, 0x96	; 150
 4f2:	bb 27       	eor	r27, r27
 4f4:	93 95       	inc	r25
 4f6:	f6 95       	lsr	r31
 4f8:	87 95       	ror	r24
 4fa:	77 95       	ror	r23
 4fc:	67 95       	ror	r22
 4fe:	b7 95       	ror	r27
 500:	f1 11       	cpse	r31, r1
 502:	f8 cf       	rjmp	.-16     	; 0x4f4 <__floatsisf+0x1c>
 504:	fa f4       	brpl	.+62     	; 0x544 <__floatsisf+0x6c>
 506:	bb 0f       	add	r27, r27
 508:	11 f4       	brne	.+4      	; 0x50e <__floatsisf+0x36>
 50a:	60 ff       	sbrs	r22, 0
 50c:	1b c0       	rjmp	.+54     	; 0x544 <__floatsisf+0x6c>
 50e:	6f 5f       	subi	r22, 0xFF	; 255
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	16 c0       	rjmp	.+44     	; 0x544 <__floatsisf+0x6c>
 518:	88 23       	and	r24, r24
 51a:	11 f0       	breq	.+4      	; 0x520 <__floatsisf+0x48>
 51c:	96 e9       	ldi	r25, 0x96	; 150
 51e:	11 c0       	rjmp	.+34     	; 0x542 <__floatsisf+0x6a>
 520:	77 23       	and	r23, r23
 522:	21 f0       	breq	.+8      	; 0x52c <__floatsisf+0x54>
 524:	9e e8       	ldi	r25, 0x8E	; 142
 526:	87 2f       	mov	r24, r23
 528:	76 2f       	mov	r23, r22
 52a:	05 c0       	rjmp	.+10     	; 0x536 <__floatsisf+0x5e>
 52c:	66 23       	and	r22, r22
 52e:	71 f0       	breq	.+28     	; 0x54c <__floatsisf+0x74>
 530:	96 e8       	ldi	r25, 0x86	; 134
 532:	86 2f       	mov	r24, r22
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	2a f0       	brmi	.+10     	; 0x544 <__floatsisf+0x6c>
 53a:	9a 95       	dec	r25
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	da f7       	brpl	.-10     	; 0x53a <__floatsisf+0x62>
 544:	88 0f       	add	r24, r24
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret

0000054e <__mulsf3>:
 54e:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3x>
 552:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_round>
 556:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscA>
 55a:	38 f0       	brcs	.+14     	; 0x56a <__mulsf3+0x1c>
 55c:	0e 94 24 03 	call	0x648	; 0x648 <__fp_pscB>
 560:	20 f0       	brcs	.+8      	; 0x56a <__mulsf3+0x1c>
 562:	95 23       	and	r25, r21
 564:	11 f0       	breq	.+4      	; 0x56a <__mulsf3+0x1c>
 566:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_inf>
 56a:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_nan>
 56e:	11 24       	eor	r1, r1
 570:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_szero>

00000574 <__mulsf3x>:
 574:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_split3>
 578:	70 f3       	brcs	.-36     	; 0x556 <__mulsf3+0x8>

0000057a <__mulsf3_pse>:
 57a:	95 9f       	mul	r25, r21
 57c:	c1 f3       	breq	.-16     	; 0x56e <__mulsf3+0x20>
 57e:	95 0f       	add	r25, r21
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	55 1f       	adc	r21, r21
 584:	62 9f       	mul	r22, r18
 586:	f0 01       	movw	r30, r0
 588:	72 9f       	mul	r23, r18
 58a:	bb 27       	eor	r27, r27
 58c:	f0 0d       	add	r31, r0
 58e:	b1 1d       	adc	r27, r1
 590:	63 9f       	mul	r22, r19
 592:	aa 27       	eor	r26, r26
 594:	f0 0d       	add	r31, r0
 596:	b1 1d       	adc	r27, r1
 598:	aa 1f       	adc	r26, r26
 59a:	64 9f       	mul	r22, r20
 59c:	66 27       	eor	r22, r22
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	66 1f       	adc	r22, r22
 5a4:	82 9f       	mul	r24, r18
 5a6:	22 27       	eor	r18, r18
 5a8:	b0 0d       	add	r27, r0
 5aa:	a1 1d       	adc	r26, r1
 5ac:	62 1f       	adc	r22, r18
 5ae:	73 9f       	mul	r23, r19
 5b0:	b0 0d       	add	r27, r0
 5b2:	a1 1d       	adc	r26, r1
 5b4:	62 1f       	adc	r22, r18
 5b6:	83 9f       	mul	r24, r19
 5b8:	a0 0d       	add	r26, r0
 5ba:	61 1d       	adc	r22, r1
 5bc:	22 1f       	adc	r18, r18
 5be:	74 9f       	mul	r23, r20
 5c0:	33 27       	eor	r19, r19
 5c2:	a0 0d       	add	r26, r0
 5c4:	61 1d       	adc	r22, r1
 5c6:	23 1f       	adc	r18, r19
 5c8:	84 9f       	mul	r24, r20
 5ca:	60 0d       	add	r22, r0
 5cc:	21 1d       	adc	r18, r1
 5ce:	82 2f       	mov	r24, r18
 5d0:	76 2f       	mov	r23, r22
 5d2:	6a 2f       	mov	r22, r26
 5d4:	11 24       	eor	r1, r1
 5d6:	9f 57       	subi	r25, 0x7F	; 127
 5d8:	50 40       	sbci	r21, 0x00	; 0
 5da:	9a f0       	brmi	.+38     	; 0x602 <__mulsf3_pse+0x88>
 5dc:	f1 f0       	breq	.+60     	; 0x61a <__mulsf3_pse+0xa0>
 5de:	88 23       	and	r24, r24
 5e0:	4a f0       	brmi	.+18     	; 0x5f4 <__mulsf3_pse+0x7a>
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	bb 1f       	adc	r27, r27
 5e8:	66 1f       	adc	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	a9 f7       	brne	.-22     	; 0x5de <__mulsf3_pse+0x64>
 5f4:	9e 3f       	cpi	r25, 0xFE	; 254
 5f6:	51 05       	cpc	r21, r1
 5f8:	80 f0       	brcs	.+32     	; 0x61a <__mulsf3_pse+0xa0>
 5fa:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_inf>
 5fe:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_szero>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	e4 f3       	brlt	.-8      	; 0x5fe <__mulsf3_pse+0x84>
 606:	98 3e       	cpi	r25, 0xE8	; 232
 608:	d4 f3       	brlt	.-12     	; 0x5fe <__mulsf3_pse+0x84>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	e7 95       	ror	r30
 616:	9f 5f       	subi	r25, 0xFF	; 255
 618:	c1 f7       	brne	.-16     	; 0x60a <__mulsf3_pse+0x90>
 61a:	fe 2b       	or	r31, r30
 61c:	88 0f       	add	r24, r24
 61e:	91 1d       	adc	r25, r1
 620:	96 95       	lsr	r25
 622:	87 95       	ror	r24
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret

00000628 <__fp_inf>:
 628:	97 f9       	bld	r25, 7
 62a:	9f 67       	ori	r25, 0x7F	; 127
 62c:	80 e8       	ldi	r24, 0x80	; 128
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	08 95       	ret

00000634 <__fp_nan>:
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	80 ec       	ldi	r24, 0xC0	; 192
 638:	08 95       	ret

0000063a <__fp_pscA>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	09 06       	cpc	r0, r25
 646:	08 95       	ret

00000648 <__fp_pscB>:
 648:	00 24       	eor	r0, r0
 64a:	0a 94       	dec	r0
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	05 06       	cpc	r0, r21
 654:	08 95       	ret

00000656 <__fp_round>:
 656:	09 2e       	mov	r0, r25
 658:	03 94       	inc	r0
 65a:	00 0c       	add	r0, r0
 65c:	11 f4       	brne	.+4      	; 0x662 <__fp_round+0xc>
 65e:	88 23       	and	r24, r24
 660:	52 f0       	brmi	.+20     	; 0x676 <__fp_round+0x20>
 662:	bb 0f       	add	r27, r27
 664:	40 f4       	brcc	.+16     	; 0x676 <__fp_round+0x20>
 666:	bf 2b       	or	r27, r31
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0x18>
 66a:	60 ff       	sbrs	r22, 0
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__fp_round+0x20>
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__fp_split3>:
 678:	57 fd       	sbrc	r21, 7
 67a:	90 58       	subi	r25, 0x80	; 128
 67c:	44 0f       	add	r20, r20
 67e:	55 1f       	adc	r21, r21
 680:	59 f0       	breq	.+22     	; 0x698 <__fp_splitA+0x10>
 682:	5f 3f       	cpi	r21, 0xFF	; 255
 684:	71 f0       	breq	.+28     	; 0x6a2 <__fp_splitA+0x1a>
 686:	47 95       	ror	r20

00000688 <__fp_splitA>:
 688:	88 0f       	add	r24, r24
 68a:	97 fb       	bst	r25, 7
 68c:	99 1f       	adc	r25, r25
 68e:	61 f0       	breq	.+24     	; 0x6a8 <__fp_splitA+0x20>
 690:	9f 3f       	cpi	r25, 0xFF	; 255
 692:	79 f0       	breq	.+30     	; 0x6b2 <__fp_splitA+0x2a>
 694:	87 95       	ror	r24
 696:	08 95       	ret
 698:	12 16       	cp	r1, r18
 69a:	13 06       	cpc	r1, r19
 69c:	14 06       	cpc	r1, r20
 69e:	55 1f       	adc	r21, r21
 6a0:	f2 cf       	rjmp	.-28     	; 0x686 <__fp_split3+0xe>
 6a2:	46 95       	lsr	r20
 6a4:	f1 df       	rcall	.-30     	; 0x688 <__fp_splitA>
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <__fp_splitA+0x30>
 6a8:	16 16       	cp	r1, r22
 6aa:	17 06       	cpc	r1, r23
 6ac:	18 06       	cpc	r1, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	f1 cf       	rjmp	.-30     	; 0x694 <__fp_splitA+0xc>
 6b2:	86 95       	lsr	r24
 6b4:	71 05       	cpc	r23, r1
 6b6:	61 05       	cpc	r22, r1
 6b8:	08 94       	sec
 6ba:	08 95       	ret

000006bc <__fp_zero>:
 6bc:	e8 94       	clt

000006be <__fp_szero>:
 6be:	bb 27       	eor	r27, r27
 6c0:	66 27       	eor	r22, r22
 6c2:	77 27       	eor	r23, r23
 6c4:	cb 01       	movw	r24, r22
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__tablejump2__>:
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	05 90       	lpm	r0, Z+
 6d0:	f4 91       	lpm	r31, Z
 6d2:	e0 2d       	mov	r30, r0
 6d4:	09 94       	ijmp

000006d6 <__umulhisi3>:
 6d6:	a2 9f       	mul	r26, r18
 6d8:	b0 01       	movw	r22, r0
 6da:	b3 9f       	mul	r27, r19
 6dc:	c0 01       	movw	r24, r0
 6de:	a3 9f       	mul	r26, r19
 6e0:	70 0d       	add	r23, r0
 6e2:	81 1d       	adc	r24, r1
 6e4:	11 24       	eor	r1, r1
 6e6:	91 1d       	adc	r25, r1
 6e8:	b2 9f       	mul	r27, r18
 6ea:	70 0d       	add	r23, r0
 6ec:	81 1d       	adc	r24, r1
 6ee:	11 24       	eor	r1, r1
 6f0:	91 1d       	adc	r25, r1
 6f2:	08 95       	ret

000006f4 <sprintf>:
 6f4:	ae e0       	ldi	r26, 0x0E	; 14
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__prologue_saves__+0x1c>
 700:	0d 89       	ldd	r16, Y+21	; 0x15
 702:	1e 89       	ldd	r17, Y+22	; 0x16
 704:	86 e0       	ldi	r24, 0x06	; 6
 706:	8c 83       	std	Y+4, r24	; 0x04
 708:	1a 83       	std	Y+2, r17	; 0x02
 70a:	09 83       	std	Y+1, r16	; 0x01
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f e7       	ldi	r25, 0x7F	; 127
 710:	9e 83       	std	Y+6, r25	; 0x06
 712:	8d 83       	std	Y+5, r24	; 0x05
 714:	ae 01       	movw	r20, r28
 716:	47 5e       	subi	r20, 0xE7	; 231
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	6f 89       	ldd	r22, Y+23	; 0x17
 71c:	78 8d       	ldd	r23, Y+24	; 0x18
 71e:	ce 01       	movw	r24, r28
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	0e 94 9c 03 	call	0x738	; 0x738 <vfprintf>
 726:	ef 81       	ldd	r30, Y+7	; 0x07
 728:	f8 85       	ldd	r31, Y+8	; 0x08
 72a:	e0 0f       	add	r30, r16
 72c:	f1 1f       	adc	r31, r17
 72e:	10 82       	st	Z, r1
 730:	2e 96       	adiw	r28, 0x0e	; 14
 732:	e4 e0       	ldi	r30, 0x04	; 4
 734:	0c 94 57 06 	jmp	0xcae	; 0xcae <__epilogue_restores__+0x1c>

00000738 <vfprintf>:
 738:	ab e0       	ldi	r26, 0x0B	; 11
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	e2 ea       	ldi	r30, 0xA2	; 162
 73e:	f3 e0       	ldi	r31, 0x03	; 3
 740:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__prologue_saves__>
 744:	6c 01       	movw	r12, r24
 746:	7b 01       	movw	r14, r22
 748:	8a 01       	movw	r16, r20
 74a:	fc 01       	movw	r30, r24
 74c:	17 82       	std	Z+7, r1	; 0x07
 74e:	16 82       	std	Z+6, r1	; 0x06
 750:	83 81       	ldd	r24, Z+3	; 0x03
 752:	81 ff       	sbrs	r24, 1
 754:	cc c1       	rjmp	.+920    	; 0xaee <__stack+0x1ef>
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	3c 01       	movw	r6, r24
 75c:	f6 01       	movw	r30, r12
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	f7 01       	movw	r30, r14
 762:	93 fd       	sbrc	r25, 3
 764:	85 91       	lpm	r24, Z+
 766:	93 ff       	sbrs	r25, 3
 768:	81 91       	ld	r24, Z+
 76a:	7f 01       	movw	r14, r30
 76c:	88 23       	and	r24, r24
 76e:	09 f4       	brne	.+2      	; 0x772 <vfprintf+0x3a>
 770:	ba c1       	rjmp	.+884    	; 0xae6 <__stack+0x1e7>
 772:	85 32       	cpi	r24, 0x25	; 37
 774:	39 f4       	brne	.+14     	; 0x784 <vfprintf+0x4c>
 776:	93 fd       	sbrc	r25, 3
 778:	85 91       	lpm	r24, Z+
 77a:	93 ff       	sbrs	r25, 3
 77c:	81 91       	ld	r24, Z+
 77e:	7f 01       	movw	r14, r30
 780:	85 32       	cpi	r24, 0x25	; 37
 782:	29 f4       	brne	.+10     	; 0x78e <vfprintf+0x56>
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 78c:	e7 cf       	rjmp	.-50     	; 0x75c <vfprintf+0x24>
 78e:	91 2c       	mov	r9, r1
 790:	21 2c       	mov	r2, r1
 792:	31 2c       	mov	r3, r1
 794:	ff e1       	ldi	r31, 0x1F	; 31
 796:	f3 15       	cp	r31, r3
 798:	d8 f0       	brcs	.+54     	; 0x7d0 <vfprintf+0x98>
 79a:	8b 32       	cpi	r24, 0x2B	; 43
 79c:	79 f0       	breq	.+30     	; 0x7bc <vfprintf+0x84>
 79e:	38 f4       	brcc	.+14     	; 0x7ae <vfprintf+0x76>
 7a0:	80 32       	cpi	r24, 0x20	; 32
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x8a>
 7a4:	83 32       	cpi	r24, 0x23	; 35
 7a6:	a1 f4       	brne	.+40     	; 0x7d0 <vfprintf+0x98>
 7a8:	23 2d       	mov	r18, r3
 7aa:	20 61       	ori	r18, 0x10	; 16
 7ac:	1d c0       	rjmp	.+58     	; 0x7e8 <vfprintf+0xb0>
 7ae:	8d 32       	cpi	r24, 0x2D	; 45
 7b0:	61 f0       	breq	.+24     	; 0x7ca <vfprintf+0x92>
 7b2:	80 33       	cpi	r24, 0x30	; 48
 7b4:	69 f4       	brne	.+26     	; 0x7d0 <vfprintf+0x98>
 7b6:	23 2d       	mov	r18, r3
 7b8:	21 60       	ori	r18, 0x01	; 1
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <vfprintf+0xb0>
 7bc:	83 2d       	mov	r24, r3
 7be:	82 60       	ori	r24, 0x02	; 2
 7c0:	38 2e       	mov	r3, r24
 7c2:	e3 2d       	mov	r30, r3
 7c4:	e4 60       	ori	r30, 0x04	; 4
 7c6:	3e 2e       	mov	r3, r30
 7c8:	2a c0       	rjmp	.+84     	; 0x81e <vfprintf+0xe6>
 7ca:	f3 2d       	mov	r31, r3
 7cc:	f8 60       	ori	r31, 0x08	; 8
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <vfprintf+0xd2>
 7d0:	37 fc       	sbrc	r3, 7
 7d2:	2d c0       	rjmp	.+90     	; 0x82e <vfprintf+0xf6>
 7d4:	20 ed       	ldi	r18, 0xD0	; 208
 7d6:	28 0f       	add	r18, r24
 7d8:	2a 30       	cpi	r18, 0x0A	; 10
 7da:	40 f0       	brcs	.+16     	; 0x7ec <vfprintf+0xb4>
 7dc:	8e 32       	cpi	r24, 0x2E	; 46
 7de:	b9 f4       	brne	.+46     	; 0x80e <vfprintf+0xd6>
 7e0:	36 fc       	sbrc	r3, 6
 7e2:	81 c1       	rjmp	.+770    	; 0xae6 <__stack+0x1e7>
 7e4:	23 2d       	mov	r18, r3
 7e6:	20 64       	ori	r18, 0x40	; 64
 7e8:	32 2e       	mov	r3, r18
 7ea:	19 c0       	rjmp	.+50     	; 0x81e <vfprintf+0xe6>
 7ec:	36 fe       	sbrs	r3, 6
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0xc4>
 7f0:	8a e0       	ldi	r24, 0x0A	; 10
 7f2:	98 9e       	mul	r9, r24
 7f4:	20 0d       	add	r18, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	92 2e       	mov	r9, r18
 7fa:	11 c0       	rjmp	.+34     	; 0x81e <vfprintf+0xe6>
 7fc:	ea e0       	ldi	r30, 0x0A	; 10
 7fe:	2e 9e       	mul	r2, r30
 800:	20 0d       	add	r18, r0
 802:	11 24       	eor	r1, r1
 804:	22 2e       	mov	r2, r18
 806:	f3 2d       	mov	r31, r3
 808:	f0 62       	ori	r31, 0x20	; 32
 80a:	3f 2e       	mov	r3, r31
 80c:	08 c0       	rjmp	.+16     	; 0x81e <vfprintf+0xe6>
 80e:	8c 36       	cpi	r24, 0x6C	; 108
 810:	21 f4       	brne	.+8      	; 0x81a <vfprintf+0xe2>
 812:	83 2d       	mov	r24, r3
 814:	80 68       	ori	r24, 0x80	; 128
 816:	38 2e       	mov	r3, r24
 818:	02 c0       	rjmp	.+4      	; 0x81e <vfprintf+0xe6>
 81a:	88 36       	cpi	r24, 0x68	; 104
 81c:	41 f4       	brne	.+16     	; 0x82e <vfprintf+0xf6>
 81e:	f7 01       	movw	r30, r14
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	7f 01       	movw	r14, r30
 82a:	81 11       	cpse	r24, r1
 82c:	b3 cf       	rjmp	.-154    	; 0x794 <vfprintf+0x5c>
 82e:	98 2f       	mov	r25, r24
 830:	9f 7d       	andi	r25, 0xDF	; 223
 832:	95 54       	subi	r25, 0x45	; 69
 834:	93 30       	cpi	r25, 0x03	; 3
 836:	28 f4       	brcc	.+10     	; 0x842 <vfprintf+0x10a>
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	9f e3       	ldi	r25, 0x3F	; 63
 83e:	99 83       	std	Y+1, r25	; 0x01
 840:	0d c0       	rjmp	.+26     	; 0x85c <vfprintf+0x124>
 842:	83 36       	cpi	r24, 0x63	; 99
 844:	31 f0       	breq	.+12     	; 0x852 <vfprintf+0x11a>
 846:	83 37       	cpi	r24, 0x73	; 115
 848:	71 f0       	breq	.+28     	; 0x866 <vfprintf+0x12e>
 84a:	83 35       	cpi	r24, 0x53	; 83
 84c:	09 f0       	breq	.+2      	; 0x850 <vfprintf+0x118>
 84e:	59 c0       	rjmp	.+178    	; 0x902 <__stack+0x3>
 850:	21 c0       	rjmp	.+66     	; 0x894 <vfprintf+0x15c>
 852:	f8 01       	movw	r30, r16
 854:	80 81       	ld	r24, Z
 856:	89 83       	std	Y+1, r24	; 0x01
 858:	0e 5f       	subi	r16, 0xFE	; 254
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	88 24       	eor	r8, r8
 85e:	83 94       	inc	r8
 860:	91 2c       	mov	r9, r1
 862:	53 01       	movw	r10, r6
 864:	13 c0       	rjmp	.+38     	; 0x88c <vfprintf+0x154>
 866:	28 01       	movw	r4, r16
 868:	f2 e0       	ldi	r31, 0x02	; 2
 86a:	4f 0e       	add	r4, r31
 86c:	51 1c       	adc	r5, r1
 86e:	f8 01       	movw	r30, r16
 870:	a0 80       	ld	r10, Z
 872:	b1 80       	ldd	r11, Z+1	; 0x01
 874:	36 fe       	sbrs	r3, 6
 876:	03 c0       	rjmp	.+6      	; 0x87e <vfprintf+0x146>
 878:	69 2d       	mov	r22, r9
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <vfprintf+0x14a>
 87e:	6f ef       	ldi	r22, 0xFF	; 255
 880:	7f ef       	ldi	r23, 0xFF	; 255
 882:	c5 01       	movw	r24, r10
 884:	0e 94 88 05 	call	0xb10	; 0xb10 <strnlen>
 888:	4c 01       	movw	r8, r24
 88a:	82 01       	movw	r16, r4
 88c:	f3 2d       	mov	r31, r3
 88e:	ff 77       	andi	r31, 0x7F	; 127
 890:	3f 2e       	mov	r3, r31
 892:	16 c0       	rjmp	.+44     	; 0x8c0 <vfprintf+0x188>
 894:	28 01       	movw	r4, r16
 896:	22 e0       	ldi	r18, 0x02	; 2
 898:	42 0e       	add	r4, r18
 89a:	51 1c       	adc	r5, r1
 89c:	f8 01       	movw	r30, r16
 89e:	a0 80       	ld	r10, Z
 8a0:	b1 80       	ldd	r11, Z+1	; 0x01
 8a2:	36 fe       	sbrs	r3, 6
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <vfprintf+0x174>
 8a6:	69 2d       	mov	r22, r9
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x178>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c5 01       	movw	r24, r10
 8b2:	0e 94 7d 05 	call	0xafa	; 0xafa <strnlen_P>
 8b6:	4c 01       	movw	r8, r24
 8b8:	f3 2d       	mov	r31, r3
 8ba:	f0 68       	ori	r31, 0x80	; 128
 8bc:	3f 2e       	mov	r3, r31
 8be:	82 01       	movw	r16, r4
 8c0:	33 fc       	sbrc	r3, 3
 8c2:	1b c0       	rjmp	.+54     	; 0x8fa <vfprintf+0x1c2>
 8c4:	82 2d       	mov	r24, r2
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	88 16       	cp	r8, r24
 8ca:	99 06       	cpc	r9, r25
 8cc:	b0 f4       	brcc	.+44     	; 0x8fa <vfprintf+0x1c2>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 8d8:	2a 94       	dec	r2
 8da:	f4 cf       	rjmp	.-24     	; 0x8c4 <vfprintf+0x18c>
 8dc:	f5 01       	movw	r30, r10
 8de:	37 fc       	sbrc	r3, 7
 8e0:	85 91       	lpm	r24, Z+
 8e2:	37 fe       	sbrs	r3, 7
 8e4:	81 91       	ld	r24, Z+
 8e6:	5f 01       	movw	r10, r30
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 8f0:	21 10       	cpse	r2, r1
 8f2:	2a 94       	dec	r2
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	82 1a       	sub	r8, r18
 8f8:	91 08       	sbc	r9, r1
 8fa:	81 14       	cp	r8, r1
 8fc:	91 04       	cpc	r9, r1
 8fe:	71 f7       	brne	.-36     	; 0x8dc <vfprintf+0x1a4>
 900:	e8 c0       	rjmp	.+464    	; 0xad2 <__stack+0x1d3>
 902:	84 36       	cpi	r24, 0x64	; 100
 904:	11 f0       	breq	.+4      	; 0x90a <__stack+0xb>
 906:	89 36       	cpi	r24, 0x69	; 105
 908:	41 f5       	brne	.+80     	; 0x95a <__stack+0x5b>
 90a:	f8 01       	movw	r30, r16
 90c:	37 fe       	sbrs	r3, 7
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__stack+0x1f>
 910:	60 81       	ld	r22, Z
 912:	71 81       	ldd	r23, Z+1	; 0x01
 914:	82 81       	ldd	r24, Z+2	; 0x02
 916:	93 81       	ldd	r25, Z+3	; 0x03
 918:	0c 5f       	subi	r16, 0xFC	; 252
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__stack+0x2f>
 91e:	60 81       	ld	r22, Z
 920:	71 81       	ldd	r23, Z+1	; 0x01
 922:	07 2e       	mov	r0, r23
 924:	00 0c       	add	r0, r0
 926:	88 0b       	sbc	r24, r24
 928:	99 0b       	sbc	r25, r25
 92a:	0e 5f       	subi	r16, 0xFE	; 254
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	f3 2d       	mov	r31, r3
 930:	ff 76       	andi	r31, 0x6F	; 111
 932:	3f 2e       	mov	r3, r31
 934:	97 ff       	sbrs	r25, 7
 936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
 938:	90 95       	com	r25
 93a:	80 95       	com	r24
 93c:	70 95       	com	r23
 93e:	61 95       	neg	r22
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	f0 68       	ori	r31, 0x80	; 128
 948:	3f 2e       	mov	r3, r31
 94a:	2a e0       	ldi	r18, 0x0A	; 10
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	a3 01       	movw	r20, r6
 950:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 954:	88 2e       	mov	r8, r24
 956:	86 18       	sub	r8, r6
 958:	45 c0       	rjmp	.+138    	; 0x9e4 <__stack+0xe5>
 95a:	85 37       	cpi	r24, 0x75	; 117
 95c:	31 f4       	brne	.+12     	; 0x96a <__stack+0x6b>
 95e:	23 2d       	mov	r18, r3
 960:	2f 7e       	andi	r18, 0xEF	; 239
 962:	b2 2e       	mov	r11, r18
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	25 c0       	rjmp	.+74     	; 0x9b4 <__stack+0xb5>
 96a:	93 2d       	mov	r25, r3
 96c:	99 7f       	andi	r25, 0xF9	; 249
 96e:	b9 2e       	mov	r11, r25
 970:	8f 36       	cpi	r24, 0x6F	; 111
 972:	c1 f0       	breq	.+48     	; 0x9a4 <__stack+0xa5>
 974:	18 f4       	brcc	.+6      	; 0x97c <__stack+0x7d>
 976:	88 35       	cpi	r24, 0x58	; 88
 978:	79 f0       	breq	.+30     	; 0x998 <__stack+0x99>
 97a:	b5 c0       	rjmp	.+362    	; 0xae6 <__stack+0x1e7>
 97c:	80 37       	cpi	r24, 0x70	; 112
 97e:	19 f0       	breq	.+6      	; 0x986 <__stack+0x87>
 980:	88 37       	cpi	r24, 0x78	; 120
 982:	21 f0       	breq	.+8      	; 0x98c <__stack+0x8d>
 984:	b0 c0       	rjmp	.+352    	; 0xae6 <__stack+0x1e7>
 986:	e9 2f       	mov	r30, r25
 988:	e0 61       	ori	r30, 0x10	; 16
 98a:	be 2e       	mov	r11, r30
 98c:	b4 fe       	sbrs	r11, 4
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0xab>
 990:	fb 2d       	mov	r31, r11
 992:	f4 60       	ori	r31, 0x04	; 4
 994:	bf 2e       	mov	r11, r31
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__stack+0xab>
 998:	34 fe       	sbrs	r3, 4
 99a:	0a c0       	rjmp	.+20     	; 0x9b0 <__stack+0xb1>
 99c:	29 2f       	mov	r18, r25
 99e:	26 60       	ori	r18, 0x06	; 6
 9a0:	b2 2e       	mov	r11, r18
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	28 e0       	ldi	r18, 0x08	; 8
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
 9aa:	20 e1       	ldi	r18, 0x10	; 16
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	20 e1       	ldi	r18, 0x10	; 16
 9b2:	32 e0       	ldi	r19, 0x02	; 2
 9b4:	f8 01       	movw	r30, r16
 9b6:	b7 fe       	sbrs	r11, 7
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <__stack+0xc9>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	82 81       	ldd	r24, Z+2	; 0x02
 9c0:	93 81       	ldd	r25, Z+3	; 0x03
 9c2:	0c 5f       	subi	r16, 0xFC	; 252
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
 9c8:	60 81       	ld	r22, Z
 9ca:	71 81       	ldd	r23, Z+1	; 0x01
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	a3 01       	movw	r20, r6
 9d6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 9da:	88 2e       	mov	r8, r24
 9dc:	86 18       	sub	r8, r6
 9de:	fb 2d       	mov	r31, r11
 9e0:	ff 77       	andi	r31, 0x7F	; 127
 9e2:	3f 2e       	mov	r3, r31
 9e4:	36 fe       	sbrs	r3, 6
 9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x103>
 9e8:	23 2d       	mov	r18, r3
 9ea:	2e 7f       	andi	r18, 0xFE	; 254
 9ec:	a2 2e       	mov	r10, r18
 9ee:	89 14       	cp	r8, r9
 9f0:	58 f4       	brcc	.+22     	; 0xa08 <__stack+0x109>
 9f2:	34 fe       	sbrs	r3, 4
 9f4:	0b c0       	rjmp	.+22     	; 0xa0c <__stack+0x10d>
 9f6:	32 fc       	sbrc	r3, 2
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__stack+0x10d>
 9fa:	83 2d       	mov	r24, r3
 9fc:	8e 7e       	andi	r24, 0xEE	; 238
 9fe:	a8 2e       	mov	r10, r24
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <__stack+0x10d>
 a02:	b8 2c       	mov	r11, r8
 a04:	a3 2c       	mov	r10, r3
 a06:	03 c0       	rjmp	.+6      	; 0xa0e <__stack+0x10f>
 a08:	b8 2c       	mov	r11, r8
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <__stack+0x10f>
 a0c:	b9 2c       	mov	r11, r9
 a0e:	a4 fe       	sbrs	r10, 4
 a10:	0f c0       	rjmp	.+30     	; 0xa30 <__stack+0x131>
 a12:	fe 01       	movw	r30, r28
 a14:	e8 0d       	add	r30, r8
 a16:	f1 1d       	adc	r31, r1
 a18:	80 81       	ld	r24, Z
 a1a:	80 33       	cpi	r24, 0x30	; 48
 a1c:	21 f4       	brne	.+8      	; 0xa26 <__stack+0x127>
 a1e:	9a 2d       	mov	r25, r10
 a20:	99 7e       	andi	r25, 0xE9	; 233
 a22:	a9 2e       	mov	r10, r25
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__stack+0x139>
 a26:	a2 fe       	sbrs	r10, 2
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <__stack+0x137>
 a2a:	b3 94       	inc	r11
 a2c:	b3 94       	inc	r11
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x139>
 a30:	8a 2d       	mov	r24, r10
 a32:	86 78       	andi	r24, 0x86	; 134
 a34:	09 f0       	breq	.+2      	; 0xa38 <__stack+0x139>
 a36:	b3 94       	inc	r11
 a38:	a3 fc       	sbrc	r10, 3
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__stack+0x15f>
 a3c:	a0 fe       	sbrs	r10, 0
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <__stack+0x14d>
 a40:	b2 14       	cp	r11, r2
 a42:	88 f4       	brcc	.+34     	; 0xa66 <__stack+0x167>
 a44:	28 0c       	add	r2, r8
 a46:	92 2c       	mov	r9, r2
 a48:	9b 18       	sub	r9, r11
 a4a:	0e c0       	rjmp	.+28     	; 0xa68 <__stack+0x169>
 a4c:	b2 14       	cp	r11, r2
 a4e:	60 f4       	brcc	.+24     	; 0xa68 <__stack+0x169>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e2       	ldi	r24, 0x20	; 32
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 a5a:	b3 94       	inc	r11
 a5c:	f7 cf       	rjmp	.-18     	; 0xa4c <__stack+0x14d>
 a5e:	b2 14       	cp	r11, r2
 a60:	18 f4       	brcc	.+6      	; 0xa68 <__stack+0x169>
 a62:	2b 18       	sub	r2, r11
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <__stack+0x16b>
 a66:	98 2c       	mov	r9, r8
 a68:	21 2c       	mov	r2, r1
 a6a:	a4 fe       	sbrs	r10, 4
 a6c:	10 c0       	rjmp	.+32     	; 0xa8e <__stack+0x18f>
 a6e:	b6 01       	movw	r22, r12
 a70:	80 e3       	ldi	r24, 0x30	; 48
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 a78:	a2 fe       	sbrs	r10, 2
 a7a:	17 c0       	rjmp	.+46     	; 0xaaa <__stack+0x1ab>
 a7c:	a1 fc       	sbrc	r10, 1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__stack+0x187>
 a80:	88 e7       	ldi	r24, 0x78	; 120
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	88 e5       	ldi	r24, 0x58	; 88
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	b6 01       	movw	r22, r12
 a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <__stack+0x1a7>
 a8e:	8a 2d       	mov	r24, r10
 a90:	86 78       	andi	r24, 0x86	; 134
 a92:	59 f0       	breq	.+22     	; 0xaaa <__stack+0x1ab>
 a94:	a1 fe       	sbrs	r10, 1
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x19d>
 a98:	8b e2       	ldi	r24, 0x2B	; 43
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__stack+0x19f>
 a9c:	80 e2       	ldi	r24, 0x20	; 32
 a9e:	a7 fc       	sbrc	r10, 7
 aa0:	8d e2       	ldi	r24, 0x2D	; 45
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 aaa:	89 14       	cp	r8, r9
 aac:	38 f4       	brcc	.+14     	; 0xabc <__stack+0x1bd>
 aae:	b6 01       	movw	r22, r12
 ab0:	80 e3       	ldi	r24, 0x30	; 48
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ab8:	9a 94       	dec	r9
 aba:	f7 cf       	rjmp	.-18     	; 0xaaa <__stack+0x1ab>
 abc:	8a 94       	dec	r8
 abe:	f3 01       	movw	r30, r6
 ac0:	e8 0d       	add	r30, r8
 ac2:	f1 1d       	adc	r31, r1
 ac4:	80 81       	ld	r24, Z
 ac6:	b6 01       	movw	r22, r12
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ace:	81 10       	cpse	r8, r1
 ad0:	f5 cf       	rjmp	.-22     	; 0xabc <__stack+0x1bd>
 ad2:	22 20       	and	r2, r2
 ad4:	09 f4       	brne	.+2      	; 0xad8 <__stack+0x1d9>
 ad6:	42 ce       	rjmp	.-892    	; 0x75c <vfprintf+0x24>
 ad8:	b6 01       	movw	r22, r12
 ada:	80 e2       	ldi	r24, 0x20	; 32
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ae2:	2a 94       	dec	r2
 ae4:	f6 cf       	rjmp	.-20     	; 0xad2 <__stack+0x1d3>
 ae6:	f6 01       	movw	r30, r12
 ae8:	86 81       	ldd	r24, Z+6	; 0x06
 aea:	97 81       	ldd	r25, Z+7	; 0x07
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__stack+0x1f3>
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	9f ef       	ldi	r25, 0xFF	; 255
 af2:	2b 96       	adiw	r28, 0x0b	; 11
 af4:	e2 e1       	ldi	r30, 0x12	; 18
 af6:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__epilogue_restores__>

00000afa <strnlen_P>:
 afa:	fc 01       	movw	r30, r24
 afc:	05 90       	lpm	r0, Z+
 afe:	61 50       	subi	r22, 0x01	; 1
 b00:	70 40       	sbci	r23, 0x00	; 0
 b02:	01 10       	cpse	r0, r1
 b04:	d8 f7       	brcc	.-10     	; 0xafc <strnlen_P+0x2>
 b06:	80 95       	com	r24
 b08:	90 95       	com	r25
 b0a:	8e 0f       	add	r24, r30
 b0c:	9f 1f       	adc	r25, r31
 b0e:	08 95       	ret

00000b10 <strnlen>:
 b10:	fc 01       	movw	r30, r24
 b12:	61 50       	subi	r22, 0x01	; 1
 b14:	70 40       	sbci	r23, 0x00	; 0
 b16:	01 90       	ld	r0, Z+
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <fputc>:
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	fb 01       	movw	r30, r22
 b30:	23 81       	ldd	r18, Z+3	; 0x03
 b32:	21 fd       	sbrc	r18, 1
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <fputc+0x16>
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	2c c0       	rjmp	.+88     	; 0xb94 <fputc+0x6e>
 b3c:	22 ff       	sbrs	r18, 2
 b3e:	16 c0       	rjmp	.+44     	; 0xb6c <fputc+0x46>
 b40:	46 81       	ldd	r20, Z+6	; 0x06
 b42:	57 81       	ldd	r21, Z+7	; 0x07
 b44:	24 81       	ldd	r18, Z+4	; 0x04
 b46:	35 81       	ldd	r19, Z+5	; 0x05
 b48:	42 17       	cp	r20, r18
 b4a:	53 07       	cpc	r21, r19
 b4c:	44 f4       	brge	.+16     	; 0xb5e <fputc+0x38>
 b4e:	a0 81       	ld	r26, Z
 b50:	b1 81       	ldd	r27, Z+1	; 0x01
 b52:	9d 01       	movw	r18, r26
 b54:	2f 5f       	subi	r18, 0xFF	; 255
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	31 83       	std	Z+1, r19	; 0x01
 b5a:	20 83       	st	Z, r18
 b5c:	8c 93       	st	X, r24
 b5e:	26 81       	ldd	r18, Z+6	; 0x06
 b60:	37 81       	ldd	r19, Z+7	; 0x07
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	37 83       	std	Z+7, r19	; 0x07
 b68:	26 83       	std	Z+6, r18	; 0x06
 b6a:	14 c0       	rjmp	.+40     	; 0xb94 <fputc+0x6e>
 b6c:	8b 01       	movw	r16, r22
 b6e:	ec 01       	movw	r28, r24
 b70:	fb 01       	movw	r30, r22
 b72:	00 84       	ldd	r0, Z+8	; 0x08
 b74:	f1 85       	ldd	r31, Z+9	; 0x09
 b76:	e0 2d       	mov	r30, r0
 b78:	09 95       	icall
 b7a:	89 2b       	or	r24, r25
 b7c:	e1 f6       	brne	.-72     	; 0xb36 <fputc+0x10>
 b7e:	d8 01       	movw	r26, r16
 b80:	16 96       	adiw	r26, 0x06	; 6
 b82:	8d 91       	ld	r24, X+
 b84:	9c 91       	ld	r25, X
 b86:	17 97       	sbiw	r26, 0x07	; 7
 b88:	01 96       	adiw	r24, 0x01	; 1
 b8a:	17 96       	adiw	r26, 0x07	; 7
 b8c:	9c 93       	st	X, r25
 b8e:	8e 93       	st	-X, r24
 b90:	16 97       	sbiw	r26, 0x06	; 6
 b92:	ce 01       	movw	r24, r28
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	08 95       	ret

00000b9e <__ultoa_invert>:
 b9e:	fa 01       	movw	r30, r20
 ba0:	aa 27       	eor	r26, r26
 ba2:	28 30       	cpi	r18, 0x08	; 8
 ba4:	51 f1       	breq	.+84     	; 0xbfa <__ultoa_invert+0x5c>
 ba6:	20 31       	cpi	r18, 0x10	; 16
 ba8:	81 f1       	breq	.+96     	; 0xc0a <__ultoa_invert+0x6c>
 baa:	e8 94       	clt
 bac:	6f 93       	push	r22
 bae:	6e 7f       	andi	r22, 0xFE	; 254
 bb0:	6e 5f       	subi	r22, 0xFE	; 254
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	af 4f       	sbci	r26, 0xFF	; 255
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	3e d0       	rcall	.+124    	; 0xc3a <__ultoa_invert+0x9c>
 bbe:	b4 e0       	ldi	r27, 0x04	; 4
 bc0:	3c d0       	rcall	.+120    	; 0xc3a <__ultoa_invert+0x9c>
 bc2:	67 0f       	add	r22, r23
 bc4:	78 1f       	adc	r23, r24
 bc6:	89 1f       	adc	r24, r25
 bc8:	9a 1f       	adc	r25, r26
 bca:	a1 1d       	adc	r26, r1
 bcc:	68 0f       	add	r22, r24
 bce:	79 1f       	adc	r23, r25
 bd0:	8a 1f       	adc	r24, r26
 bd2:	91 1d       	adc	r25, r1
 bd4:	a1 1d       	adc	r26, r1
 bd6:	6a 0f       	add	r22, r26
 bd8:	71 1d       	adc	r23, r1
 bda:	81 1d       	adc	r24, r1
 bdc:	91 1d       	adc	r25, r1
 bde:	a1 1d       	adc	r26, r1
 be0:	20 d0       	rcall	.+64     	; 0xc22 <__ultoa_invert+0x84>
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__ultoa_invert+0x48>
 be4:	68 94       	set
 be6:	3f 91       	pop	r19
 be8:	2a e0       	ldi	r18, 0x0A	; 10
 bea:	26 9f       	mul	r18, r22
 bec:	11 24       	eor	r1, r1
 bee:	30 19       	sub	r19, r0
 bf0:	30 5d       	subi	r19, 0xD0	; 208
 bf2:	31 93       	st	Z+, r19
 bf4:	de f6       	brtc	.-74     	; 0xbac <__ultoa_invert+0xe>
 bf6:	cf 01       	movw	r24, r30
 bf8:	08 95       	ret
 bfa:	46 2f       	mov	r20, r22
 bfc:	47 70       	andi	r20, 0x07	; 7
 bfe:	40 5d       	subi	r20, 0xD0	; 208
 c00:	41 93       	st	Z+, r20
 c02:	b3 e0       	ldi	r27, 0x03	; 3
 c04:	0f d0       	rcall	.+30     	; 0xc24 <__ultoa_invert+0x86>
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0x5c>
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <__ultoa_invert+0x58>
 c0a:	46 2f       	mov	r20, r22
 c0c:	4f 70       	andi	r20, 0x0F	; 15
 c0e:	40 5d       	subi	r20, 0xD0	; 208
 c10:	4a 33       	cpi	r20, 0x3A	; 58
 c12:	18 f0       	brcs	.+6      	; 0xc1a <__ultoa_invert+0x7c>
 c14:	49 5d       	subi	r20, 0xD9	; 217
 c16:	31 fd       	sbrc	r19, 1
 c18:	40 52       	subi	r20, 0x20	; 32
 c1a:	41 93       	st	Z+, r20
 c1c:	02 d0       	rcall	.+4      	; 0xc22 <__ultoa_invert+0x84>
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__ultoa_invert+0x6c>
 c20:	ea cf       	rjmp	.-44     	; 0xbf6 <__ultoa_invert+0x58>
 c22:	b4 e0       	ldi	r27, 0x04	; 4
 c24:	a6 95       	lsr	r26
 c26:	97 95       	ror	r25
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0x86>
 c32:	00 97       	sbiw	r24, 0x00	; 0
 c34:	61 05       	cpc	r22, r1
 c36:	71 05       	cpc	r23, r1
 c38:	08 95       	ret
 c3a:	9b 01       	movw	r18, r22
 c3c:	ac 01       	movw	r20, r24
 c3e:	0a 2e       	mov	r0, r26
 c40:	06 94       	lsr	r0
 c42:	57 95       	ror	r21
 c44:	47 95       	ror	r20
 c46:	37 95       	ror	r19
 c48:	27 95       	ror	r18
 c4a:	ba 95       	dec	r27
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0xa2>
 c4e:	62 0f       	add	r22, r18
 c50:	73 1f       	adc	r23, r19
 c52:	84 1f       	adc	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	a0 1d       	adc	r26, r0
 c58:	08 95       	ret

00000c5a <__prologue_saves__>:
 c5a:	2f 92       	push	r2
 c5c:	3f 92       	push	r3
 c5e:	4f 92       	push	r4
 c60:	5f 92       	push	r5
 c62:	6f 92       	push	r6
 c64:	7f 92       	push	r7
 c66:	8f 92       	push	r8
 c68:	9f 92       	push	r9
 c6a:	af 92       	push	r10
 c6c:	bf 92       	push	r11
 c6e:	cf 92       	push	r12
 c70:	df 92       	push	r13
 c72:	ef 92       	push	r14
 c74:	ff 92       	push	r15
 c76:	0f 93       	push	r16
 c78:	1f 93       	push	r17
 c7a:	cf 93       	push	r28
 c7c:	df 93       	push	r29
 c7e:	cd b7       	in	r28, 0x3d	; 61
 c80:	de b7       	in	r29, 0x3e	; 62
 c82:	ca 1b       	sub	r28, r26
 c84:	db 0b       	sbc	r29, r27
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	f8 94       	cli
 c8a:	de bf       	out	0x3e, r29	; 62
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	cd bf       	out	0x3d, r28	; 61
 c90:	09 94       	ijmp

00000c92 <__epilogue_restores__>:
 c92:	2a 88       	ldd	r2, Y+18	; 0x12
 c94:	39 88       	ldd	r3, Y+17	; 0x11
 c96:	48 88       	ldd	r4, Y+16	; 0x10
 c98:	5f 84       	ldd	r5, Y+15	; 0x0f
 c9a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c9e:	8c 84       	ldd	r8, Y+12	; 0x0c
 ca0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca4:	b9 84       	ldd	r11, Y+9	; 0x09
 ca6:	c8 84       	ldd	r12, Y+8	; 0x08
 ca8:	df 80       	ldd	r13, Y+7	; 0x07
 caa:	ee 80       	ldd	r14, Y+6	; 0x06
 cac:	fd 80       	ldd	r15, Y+5	; 0x05
 cae:	0c 81       	ldd	r16, Y+4	; 0x04
 cb0:	1b 81       	ldd	r17, Y+3	; 0x03
 cb2:	aa 81       	ldd	r26, Y+2	; 0x02
 cb4:	b9 81       	ldd	r27, Y+1	; 0x01
 cb6:	ce 0f       	add	r28, r30
 cb8:	d1 1d       	adc	r29, r1
 cba:	0f b6       	in	r0, 0x3f	; 63
 cbc:	f8 94       	cli
 cbe:	de bf       	out	0x3e, r29	; 62
 cc0:	0f be       	out	0x3f, r0	; 63
 cc2:	cd bf       	out	0x3d, r28	; 61
 cc4:	ed 01       	movw	r28, r26
 cc6:	08 95       	ret

00000cc8 <_exit>:
 cc8:	f8 94       	cli

00000cca <__stop_program>:
 cca:	ff cf       	rjmp	.-2      	; 0xcca <__stop_program>
