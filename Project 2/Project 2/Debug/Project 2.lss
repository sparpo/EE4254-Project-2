
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800116  00800116  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ac  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d1  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040b  00000000  00000000  00001421  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000102  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_20>
  54:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_21>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	24 01       	movw	r4, r8
  6a:	20 01       	movw	r4, r0
  6c:	16 01       	movw	r2, r12
  6e:	20 01       	movw	r4, r0
  70:	1b 01       	movw	r2, r22
  72:	20 01       	movw	r4, r0
  74:	20 01       	movw	r4, r0
  76:	20 01       	movw	r4, r0
  78:	20 01       	movw	r4, r0
  7a:	20 01       	movw	r4, r0
  7c:	20 01       	movw	r4, r0
  7e:	24 01       	movw	r4, r8
  80:	0d 01       	movw	r0, r26
  82:	10 01       	movw	r2, r0
  84:	20 01       	movw	r4, r0
  86:	13 01       	movw	r2, r6
  88:	20 01       	movw	r4, r0
  8a:	20 01       	movw	r4, r0
  8c:	24 01       	movw	r4, r8
  8e:	24 01       	movw	r4, r8
  90:	20 01       	movw	r4, r0
  92:	24 01       	movw	r4, r8
  94:	20 01       	movw	r4, r0
  96:	20 01       	movw	r4, r0
  98:	20 01       	movw	r4, r0
  9a:	20 01       	movw	r4, r0
  9c:	20 01       	movw	r4, r0
  9e:	20 01       	movw	r4, r0
  a0:	20 01       	movw	r4, r0
  a2:	20 01       	movw	r4, r0
  a4:	20 01       	movw	r4, r0
  a6:	20 01       	movw	r4, r0
  a8:	24 01       	movw	r4, r8
  aa:	20 01       	movw	r4, r0
  ac:	16 01       	movw	r2, r12
  ae:	20 01       	movw	r4, r0
  b0:	1b 01       	movw	r2, r22
  b2:	20 01       	movw	r4, r0
  b4:	20 01       	movw	r4, r0
  b6:	20 01       	movw	r4, r0
  b8:	20 01       	movw	r4, r0
  ba:	20 01       	movw	r4, r0
  bc:	20 01       	movw	r4, r0
  be:	24 01       	movw	r4, r8
  c0:	0d 01       	movw	r0, r26
  c2:	10 01       	movw	r2, r0
  c4:	20 01       	movw	r4, r0
  c6:	13 01       	movw	r2, r6
  c8:	20 01       	movw	r4, r0
  ca:	20 01       	movw	r4, r0
  cc:	24 01       	movw	r4, r8
  ce:	24 01       	movw	r4, r8
  d0:	20 01       	movw	r4, r0
  d2:	24 01       	movw	r4, r8

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e0 e2       	ldi	r30, 0x20	; 32
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a6 31       	cpi	r26, 0x16	; 22
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a6 e1       	ldi	r26, 0x16	; 22
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 35       	cpi	r26, 0x51	; 81
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
 10a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <init_adc>:
		}
	}
	return 1;
}
void init_adc() {
	ADMUX = 0b01000010; //sets voltage ref to Vcc and starts ADC2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = 0b11101111; //enable adc, starts conversion, enable interrupt, sets prescalar 128
 118:	8f ee       	ldi	r24, 0xEF	; 239
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = (1<<2);// sets timer0 overflow 
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 124:	08 95       	ret

00000126 <init_ports>:

}

void init_ports() {
	
	DDRB = (1<<3);		// Initialize turn bit 3 to output
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;		// Initialize to all off	
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	08 95       	ret

0000012e <init_USART>:
}

void init_USART() {
	
	UCSR0A	= (1<<RXC0) | (1<<TXC0); // enable RX and TX
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B	= (1<<RXEN0) | (1<<TXEN0) | (1<<TXC0) | (1<<TXCIE0) | (0<<UCSZ02);  //enable receiver, transmitter, TX Complete and transmit interrupt and setting data to 8 bits
 134:	88 e5       	ldi	r24, 0x58	; 88
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600*/
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C = (0b00000110); //setting data to 8 bits
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 14c:	08 95       	ret

0000014e <init_timer0>:
	
}

void init_timer0() {
	
	TCCR0A = 0;
 14e:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
 150:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (0b00000101); // prescalar 1024
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 6; // TCNT0 set to 6 so that will cause timer overflow after 16 ms
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	86 bd       	out	0x26, r24	; 38
 15c:	08 95       	ret

0000015e <init_timer1>:

}

void init_timer1() {
	
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0b00000010); // prescalar 8 
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0b00100001); //Input Capture set for falling edge with noise control turned OFF , Input Capture and Timer1 Overflow Interrupts enable
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 16e:	08 95       	ret

00000170 <init_timer2>:

}

void init_timer2() {
	
	TCCR0A = (0b10000001); // Clear OC2A on Compare Match when Upcounting , Phase Correct PWM Mode
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b00000110); // Phase Correct PWM Mode, prescalar 256
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	85 bd       	out	0x25, r24	; 37
	OCR2A = 0; // turn off led
 178:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 17c:	08 95       	ret

0000017e <sendmsg>:
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <sndcntr>
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 184:	ea e1       	ldi	r30, 0x1A	; 26
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	2d e0       	ldi	r18, 0x0D	; 13
 18a:	20 83       	st	Z, r18
	queue[qcntr++] = 0x0a;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <qcntr>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	21 83       	std	Z+1, r18	; 0x01
	while (*s)
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	22 23       	and	r18, r18
 19c:	79 f0       	breq	.+30     	; 0x1bc <sendmsg+0x3e>
 19e:	dc 01       	movw	r26, r24
	queue[qcntr++] = *s++;   /*put characters into queue*/
 1a0:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <qcntr>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8e 0f       	add	r24, r30
 1a8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <qcntr>
 1ac:	8d 91       	ld	r24, X+
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e6 5e       	subi	r30, 0xE6	; 230
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 83       	st	Z, r24
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
 1b6:	8c 91       	ld	r24, X
 1b8:	81 11       	cpse	r24, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <sendmsg+0x22>
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
 1bc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <queue>
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c4:	08 95       	ret

000001c6 <main>:
unsigned int enContdisplay = 0; //enable continuous display

int main(void)
{
	char ch;  /* character variable for received character*/
	init_ports();
 1c6:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_USART();
 1ca:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
	init_adc();
 1ce:	0e 94 89 00 	call	0x112	; 0x112 <init_adc>
	init_timer0();
 1d2:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();
 1d6:	0e 94 af 00 	call	0x15e	; 0x15e <init_timer1>
	init_timer2();
 1da:	0e 94 b8 00 	call	0x170	; 0x170 <init_timer2>


	sei(); /*global interrupt enable */
 1de:	78 94       	sei

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1e0:	c0 ec       	ldi	r28, 0xC0	; 192
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			ch = UDR0;    /*get character sent from PC*/
 1e4:	06 ec       	ldi	r16, 0xC6	; 198
 1e6:	10 e0       	ldi	r17, 0x00	; 0
				//Report ADC value in mV
				break;
				
				case 'C':
				case 'c':
					enContdisplay = 1; //enable continuous adc display
 1e8:	ee 24       	eor	r14, r14
 1ea:	e3 94       	inc	r14
 1ec:	f1 2c       	mov	r15, r1
				input = Temp;
				break;
				
				case 'N':
				case 'n':
				input = Bright;
 1ee:	cc 24       	eor	r12, r12
 1f0:	c3 94       	inc	r12
		{
			ch = UDR0;    /*get character sent from PC*/
			switch (ch) { //character input
				case 'M':
				case 'm':
				input = Temp;
 1f2:	68 94       	set
 1f4:	dd 24       	eor	r13, r13
 1f6:	d1 f8       	bld	r13, 1

	sei(); /*global interrupt enable */

	while (1)
	{	
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
 1f8:	88 81       	ld	r24, Y
 1fa:	88 23       	and	r24, r24
 1fc:	2c f5       	brge	.+74     	; 0x248 <main+0x82>
		{
			ch = UDR0;    /*get character sent from PC*/
 1fe:	d8 01       	movw	r26, r16
 200:	ec 91       	ld	r30, X
			switch (ch) { //character input
 202:	8e 2f       	mov	r24, r30
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	e1 54       	subi	r30, 0x41	; 65
 20a:	f1 09       	sbc	r31, r1
 20c:	e6 33       	cpi	r30, 0x36	; 54
 20e:	f1 05       	cpc	r31, r1
 210:	b8 f4       	brcc	.+46     	; 0x240 <main+0x7a>
 212:	ec 5c       	subi	r30, 0xCC	; 204
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	0c 94 88 01 	jmp	0x310	; 0x310 <__tablejump2__>
				case 'M':
				case 'm':
				input = Temp;
 21a:	d0 92 4c 01 	sts	0x014C, r13	; 0x80014c <input>
				break;
 21e:	14 c0       	rjmp	.+40     	; 0x248 <main+0x82>
				
				case 'N':
				case 'n':
				input = Bright;
 220:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <input>
				break;
 224:	11 c0       	rjmp	.+34     	; 0x248 <main+0x82>
				
				case 'P':
				case 'p':
				input = Volt;
 226:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <input>
				break;
 22a:	0e c0       	rjmp	.+28     	; 0x248 <main+0x82>
				//Report ADC value in mV
				break;
				
				case 'C':
				case 'c':
					enContdisplay = 1; //enable continuous adc display
 22c:	f0 92 17 01 	sts	0x0117, r15	; 0x800117 <__data_end+0x1>
 230:	e0 92 16 01 	sts	0x0116, r14	; 0x800116 <__data_end>
				break;
 234:	09 c0       	rjmp	.+18     	; 0x248 <main+0x82>
				
				case 'E':
				case 'e':
					enContdisplay = 0; //disable continuous adc display
 236:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 23a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
				break;
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x82>
				case 's':
				//report current value of OCR2B register
				break;
				
				default:
				sendmsg(msg1); /*send default message*/
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 bf 00 	call	0x17e	; 0x17e <sendmsg>
			}
		}
		
		if(new_adc_data == 1) {
 248:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <new_adc_data>
 24c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <new_adc_data+0x1>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	91 f6       	brne	.-92     	; 0x1f8 <main+0x32>
			if(enContdisplay) {
				//send new adc data to usart
			}
			new_adc_data=0;
 254:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <new_adc_data+0x1>
 258:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <new_adc_data>
 25c:	cd cf       	rjmp	.-102    	; 0x1f8 <main+0x32>

0000025e <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 26e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <sndcntr>
 272:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <qcntr>
 276:	8e 17       	cp	r24, r30
 278:	51 f0       	breq	.+20     	; 0x28e <__vector_20+0x30>
	UDR0 = queue[sndcntr++];
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8e 0f       	add	r24, r30
 27e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sndcntr>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e6 5e       	subi	r30, 0xE6	; 230
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 81       	ld	r24, Z
 28a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_21>:

ISR (ADC_vect)//handles ADC interrupts
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
	
	adc_reading = ADC;
 2ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 2b4:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <adc_reading+0x1>
 2b8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <adc_reading>
	new_adc_data = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <new_adc_data+0x1>
 2c4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <new_adc_data>
	switch(input) {
 2c8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <input>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	51 f0       	breq	.+20     	; 0x2e4 <__vector_21+0x46>
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <__vector_21+0x3a>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <__vector_21+0x52>
 2d6:	12 c0       	rjmp	.+36     	; 0x2fc <__vector_21+0x5e>
		
		case Volt :
			ADMUX = 0b01000000; //adc0
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	85 bb       	out	0x15, r24	; 21
		break;
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <__vector_21+0x64>
		
		case Bright :
			ADMUX = 0b01000001; //adc1
 2e4:	81 e4       	ldi	r24, 0x41	; 65
 2e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	85 bb       	out	0x15, r24	; 21
		break;
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <__vector_21+0x64>
		
		case Temp :
			ADMUX = 0b01000010; //adc2
 2f0:	82 e4       	ldi	r24, 0x42	; 66
 2f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			TIFR0 = 0b00000001;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	85 bb       	out	0x15, r24	; 21
		break;
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <__vector_21+0x64>
		default:
			ADMUX = 0b01000010; //adc2
 2fc:	82 e4       	ldi	r24, 0x42	; 66
 2fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		break;
	}

 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__tablejump2__>:
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	05 90       	lpm	r0, Z+
 316:	f4 91       	lpm	r31, Z
 318:	e0 2d       	mov	r30, r0
 31a:	09 94       	ijmp

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
